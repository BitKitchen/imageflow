# Generated by carnix 0.7.2: /home/rin/Code/carnix/target/debug/carnix nix --src .
{ lib, buildPlatform, buildRustCrate, fetchgit }:
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src: builtins.filterSource (path: type:
      lib.lists.any (f:
        let p = toString (src + ("/" + f)); in
        (path == p) || (type == "directory" && lib.strings.hasPrefix path p)
      ) includedFiles
    ) src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  cargo_vendor = f: cargo_vendor_0_1_15 { features = cargo_vendor_0_1_15_features { cargo_vendor_0_1_15 = f; }; };
  __all = [ (cargo_vendor {}) ];
  aho_corasick_0_6_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "aho-corasick";
    version = "0.6.4";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "189v919mp6rzzgjp1khpn4zlq8ls81gh43x1lmc8kbkagdlpq888";
    libName = "aho_corasick";
    crateBin = [ {  name = "aho-corasick-dot"; } ];
    inherit dependencies buildDependencies features;
  };
  ansi_term_0_11_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ansi_term";
    version = "0.11.0";
    authors = [ "ogham@bsago.me" "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>" "Josh Triplett <josh@joshtriplett.org>" ];
    sha256 = "08fk0p2xvkqpmz3zlrwnf6l8sj2vngw464rvzspzp31sbgxbwm4v";
    inherit dependencies buildDependencies features;
  };
  atty_0_2_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "atty";
    version = "0.2.10";
    authors = [ "softprops <d.tangren@gmail.com>" ];
    sha256 = "1h26lssj8rwaz0xhwwm5a645r49yly211amfmd243m3m0jl49i2c";
    inherit dependencies buildDependencies features;
  };
  backtrace_0_3_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "backtrace";
    version = "0.3.7";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "The Rust Project Developers" ];
    sha256 = "00zzcgacv516dlhxkrdw4c8vsx3bwkkdrrzi5pnxrhpd87ambjwn";
    inherit dependencies buildDependencies features;
  };
  backtrace_sys_0_1_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "backtrace-sys";
    version = "0.1.16";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1cn2c8q3dn06crmnk0p62czkngam4l8nf57wy33nz1y5g25pszwy";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  bitflags_1_0_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "1.0.3";
    authors = [ "The Rust Project Developers" ];
    sha256 = "162p4w4h1ad76awq6b5yivmls3d50m9cl27d8g588lsps6g8s5rw";
    inherit dependencies buildDependencies features;
  };
  cargo_0_27_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cargo";
    version = "0.27.0";
    authors = [ "Yehuda Katz <wycats@gmail.com>" "Carl Lerche <me@carllerche.com>" "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "11n3agfjcqbaalbfz2kzq223nglrcsxjkflym7chcqn9xv8wvwfj";
    libPath = "src/cargo/lib.rs";
    crateBin = [ {  name = "cargo"; } ];
    inherit dependencies buildDependencies features;
  };
  cargo_vendor_0_1_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cargo-vendor";
    version = "0.1.15";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    src = ./.;
    inherit dependencies buildDependencies features;
  };
  cc_1_0_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cc";
    version = "1.0.15";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1zmcv4zf888byhay2qakqlc9b8snhy5ccfs35zb6flywmlj8f2c0";
    inherit dependencies buildDependencies features;
  };
  cfg_if_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cfg-if";
    version = "0.1.3";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0hphfz5qg40gr5p18gmgy2rzkqj019lii3n0dy3s0a6lnl9106k6";
    inherit dependencies buildDependencies features;
  };
  clap_2_31_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "clap";
    version = "2.31.2";
    authors = [ "Kevin K. <kbknapp@gmail.com>" ];
    sha256 = "0r24ziw85a8y1sf2l21y4mvv5qan3rjafcshpyfsjfadqfxsij72";
    inherit dependencies buildDependencies features;
  };
  cmake_0_1_31_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cmake";
    version = "0.1.31";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "18j5fci486s7v5yjvv2ik3nsp4lk0fn0b8js5k6c4dviml476vz2";
    inherit dependencies buildDependencies features;
  };
  commoncrypto_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "commoncrypto";
    version = "0.2.0";
    authors = [ "Mark Lee" ];
    sha256 = "1ywgmv5ai4f6yskr3wv3j1wzfsdm9km8j8lm4x4j5ccln5362xdf";
    inherit dependencies buildDependencies features;
  };
  commoncrypto_sys_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "commoncrypto-sys";
    version = "0.2.0";
    authors = [ "Mark Lee" ];
    sha256 = "001i2g7xbfi48r2xjgxwrgjjjf00x9c24vfrs3g6p2q2djhwww4i";
    inherit dependencies buildDependencies features;
  };
  core_foundation_0_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "core-foundation";
    version = "0.5.1";
    authors = [ "The Servo Project Developers" ];
    sha256 = "03s11z23rb1kk325c34rmsbd7k0l5rkzk4q6id55n174z28zqln1";
    inherit dependencies buildDependencies features;
  };
  core_foundation_sys_0_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "core-foundation-sys";
    version = "0.5.1";
    authors = [ "The Servo Project Developers" ];
    sha256 = "0qbrasll5nw1bgr071i8s8jc975d0y4qfysf868bh9xp0f6vcypa";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  crates_io_0_16_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crates-io";
    version = "0.16.0";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1v1ylgpm9w37gxynczs7vsybjy7wrjhsksjylc62gmm8knn8dkig";
    libPath = "lib.rs";
    libName = "crates_io";
    inherit dependencies buildDependencies features;
  };
  crossbeam_0_3_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam";
    version = "0.3.2";
    authors = [ "Aaron Turon <aturon@mozilla.com>" ];
    sha256 = "1y0fhf8lapczpk49achg29hg6s3y7jh8j4a7yf0lfx0x888lqcin";
    inherit dependencies buildDependencies features;
  };
  crypto_hash_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crypto-hash";
    version = "0.3.1";
    authors = [ "Mark Lee" ];
    sha256 = "1qxmmx2wykyz8zigjda1j5fpqw4xjxv3mzjbqpx9gjxkv97zsw6a";
    inherit dependencies buildDependencies features;
  };
  curl_0_4_12_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "curl";
    version = "0.4.12";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "07598w569drjgxh4s4h9kn7ss32r1g5gdaihdv1zv95gidhswrkd";
    inherit dependencies buildDependencies features;
  };
  curl_sys_0_4_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "curl-sys";
    version = "0.4.5";
    authors = [ "Carl Lerche <me@carllerche.com>" "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "149nswzwzr1lx0ki8awbppm7kf8nb268pc3zhzmvbs5fliq075qw";
    libPath = "lib.rs";
    libName = "curl_sys";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  docopt_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "docopt";
    version = "1.0.0";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "009xdzqzyrx0yq390vbjbr6m9s8pyazq5r6gf7bchygy9r4p40hr";
    crateBin = [ {  name = "docopt-wordlist";  path = "src/wordlist.rs"; } ];
    inherit dependencies buildDependencies features;
  };
  dtoa_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "dtoa";
    version = "0.4.2";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1bxsh6fags7nr36vlz07ik2a1rzyipc8x1y30kjk832hf2pzadmw";
    inherit dependencies buildDependencies features;
  };
  env_logger_0_5_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "env_logger";
    version = "0.5.10";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0any21l2x4h4h4ggc6r69k14i57pzqrm1pf89vfm3faxfpa23nhk";
    inherit dependencies buildDependencies features;
  };
  failure_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "failure";
    version = "0.1.1";
    authors = [ "Without Boats <boats@mozilla.com>" ];
    sha256 = "0gf9cmkm9kc163sszgjksqp5pcgj689lnf2104nn4h4is18nhigk";
    inherit dependencies buildDependencies features;
  };
  failure_derive_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "failure_derive";
    version = "0.1.1";
    authors = [ "Without Boats <woboats@gmail.com>" ];
    sha256 = "1w895q4pbyx3rwnhgjwfcayk9ghbi166wc1c3553qh8zkbz52k8i";
    procMacro = true;
    inherit dependencies buildDependencies features;
  };
  filetime_0_1_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "filetime";
    version = "0.1.15";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1qbib2cl25i9m0l65d8idyl0fci15pqpvldh1zdnkzb0v3a9m2l4";
    inherit dependencies buildDependencies features;
  };
  filetime_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "filetime";
    version = "0.2.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1wmbj3jnpl39851lymw64j9ac1nmy1z96h1wymvlvypspl68w5y0";
    inherit dependencies buildDependencies features;
  };
  flate2_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "flate2";
    version = "1.0.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0hi1r0sz8ca750hq9ym6d3n99g6rmmm8m8hadz2v49pfh6jd6svc";
    inherit dependencies buildDependencies features;
  };
  fnv_1_0_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fnv";
    version = "1.0.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "128mlh23y3gg6ag5h8iiqlcbl59smisdzraqy88ldrf75kbw27ip";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  foreign_types_0_3_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "foreign-types";
    version = "0.3.2";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "105n8sp2djb1s5lzrw04p7ss3dchr5qa3canmynx396nh3vwm2p8";
    inherit dependencies buildDependencies features;
  };
  foreign_types_shared_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "foreign-types-shared";
    version = "0.1.1";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0b6cnvqbflws8dxywk4589vgbz80049lz4x1g9dfy4s1ppd3g4z5";
    inherit dependencies buildDependencies features;
  };
  fs2_0_4_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fs2";
    version = "0.4.3";
    authors = [ "Dan Burkert <dan@danburkert.com>" ];
    sha256 = "1crj36rhhpk3qby9yj7r77w7sld0mzab2yicmphbdkfymbmp3ldp";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "0jrf4shb1699r4la8z358vri8318w4mdi6qzfqy30p2ymjlca4gk";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_sys_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon-sys";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "08jp1zxrm9jbrr6l26bjal4dbm8bxfy57ickdgibsqxr1n9j3hf5";
    inherit dependencies buildDependencies features;
  };
  git2_0_7_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "git2";
    version = "0.7.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1mygr6w957q8bpahnlbd0vrs389bl3149gb792zgl004hfyhd3k6";
    inherit dependencies buildDependencies features;
  };
  git2_curl_0_8_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "git2-curl";
    version = "0.8.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0yn64hcld1pvxw3kdff4c34vgb9m6vc695nrib8kh4ar5adx8yhn";
    inherit dependencies buildDependencies features;
  };
  glob_0_2_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "glob";
    version = "0.2.11";
    authors = [ "The Rust Project Developers" ];
    sha256 = "104389jjxs8r2f5cc9p0axhjmndgln60ih5x4f00ccgg9d3zarlf";
    inherit dependencies buildDependencies features;
  };
  globset_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "globset";
    version = "0.4.0";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1gcc2344p2gfmc36snix8229gyblw2qrb25i8f3msibcq1jn3dpb";
    inherit dependencies buildDependencies features;
  };
  hex_0_3_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "hex";
    version = "0.3.2";
    authors = [ "KokaKiwi <kokakiwi@kokakiwi.net>" ];
    sha256 = "0hs0xfb4x67y4ss9mmbjmibkwakbn3xf23i21m409bw2zqk9b6kz";
    inherit dependencies buildDependencies features;
  };
  home_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "home";
    version = "0.3.3";
    authors = [ "Brian Anderson <andersrb@gmail.com>" ];
    sha256 = "1hgyd8zglkf3qn1agc6k87nykkimi19rbcc47c165xfyldcgmk09";
    inherit dependencies buildDependencies features;
  };
  humantime_1_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "humantime";
    version = "1.1.1";
    authors = [ "Paul Colomiets <paul@colomiets.name>" ];
    sha256 = "1lzdfsfzdikcp1qb6wcdvnsdv16pmzr7p7cv171vnbnyz2lrwbgn";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  idna_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "idna";
    version = "0.1.4";
    authors = [ "The rust-url developers" ];
    sha256 = "15j44qgjx1skwg9i7f4cm36ni4n99b1ayx23yxx7axxcw8vjf336";
    inherit dependencies buildDependencies features;
  };
  ignore_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ignore";
    version = "0.4.2";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0flvr5gykp966w40x4b7s96sp2as1ykb0pqyxs2c6580v3m59vwh";
    inherit dependencies buildDependencies features;
  };
  itoa_0_4_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "itoa";
    version = "0.4.1";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1jyrsmrm5q4r2ipmq5hvvkqg0mgnlbk44lm7gr0v9ymvbrh2gbij";
    inherit dependencies buildDependencies features;
  };
  jobserver_0_1_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "jobserver";
    version = "0.1.11";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0l424ksgmixvac4x9adq14jh6n00py502wvcfbv01qp6qg2bdlv6";
    inherit dependencies buildDependencies features;
  };
  kernel32_sys_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "kernel32-sys";
    version = "0.2.2";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
    libName = "kernel32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lazy_static_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazy_static";
    version = "1.0.0";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "0wfvqyr2nvx2mbsrscg5y7gfa9skhb8p72ayanl8vl49pw24v4fh";
    inherit dependencies buildDependencies features;
  };
  lazycell_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazycell";
    version = "0.6.0";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Nikita Pekin <contact@nikitapek.in>" ];
    sha256 = "1ax148clinbvp6alxcih8s5i2bg3mc5mi69n3hvzvzbwlm6k532r";
    inherit dependencies buildDependencies features;
  };
  libc_0_2_40_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libc";
    version = "0.2.40";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1xfc39237ldzgr8x8wcflgdr8zssi3wif7g2zxc02d94gzkjsw83";
    inherit dependencies buildDependencies features;
  };
  libgit2_sys_0_7_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libgit2-sys";
    version = "0.7.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "15j5x14nxjb73bcbp1g7wxj333rzc62s7b1qwmxbfzqgja4kn7sx";
    libPath = "lib.rs";
    libName = "libgit2_sys";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  libssh2_sys_0_2_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libssh2-sys";
    version = "0.2.7";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1mr683x23l7f0mmc10vd5fnarfqpd7wqxs3rxyhq2igrh3fn0m2v";
    libPath = "lib.rs";
    libName = "libssh2_sys";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  libz_sys_1_0_18_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libz-sys";
    version = "1.0.18";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0lr0rvmmfbfa4g7mhi0l93i8jq86pfcssdv4d40kzfy45ajdcgim";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  log_0_4_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "log";
    version = "0.4.1";
    authors = [ "The Rust Project Developers" ];
    sha256 = "01vm8yy3wngvyj6qp1x3xpcb4xq7v67yn9l7fsma8kz28mliz90d";
    inherit dependencies buildDependencies features;
  };
  matches_0_1_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "matches";
    version = "0.1.6";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "1zlrqlbvzxdil8z8ial2ihvxjwvlvg3g8dr0lcdpsjclkclasjan";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  memchr_2_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "memchr";
    version = "2.0.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" "bluss" ];
    sha256 = "0ls2y47rjwapjdax6bp974gdp06ggm1v8d1h69wyydmh1nhgm5gr";
    inherit dependencies buildDependencies features;
  };
  miniz_sys_0_1_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "miniz-sys";
    version = "0.1.10";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "11vg6phafxil87nbxgrlhcx5hjr3145wsbwwkfmibvnmzxfdmvln";
    libPath = "lib.rs";
    libName = "miniz_sys";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  miow_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "miow";
    version = "0.3.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1jhymncgg6ik9cfkcq2rk56hz9jjma55yg0g46rd09advrxa0rby";
    inherit dependencies buildDependencies features;
  };
  num_traits_0_2_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num-traits";
    version = "0.2.4";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0j0n4lcxbqq8q9v2qcyybz6aqxvmghzl5q2p19ds0c8fl5wviqmj";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  num_cpus_1_8_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num_cpus";
    version = "1.8.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1y6qnd9r8ga6y8mvlabdrr73nc8cshjjlzbvnanzyj9b8zzkfwk2";
    inherit dependencies buildDependencies features;
  };
  openssl_0_10_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl";
    version = "0.10.7";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0pw3c6psf2w85mdzxnbm43x1793j9ihah35rkvhn0pkja0c2aynw";
    inherit dependencies buildDependencies features;
  };
  openssl_probe_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl-probe";
    version = "0.1.2";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1a89fznx26vvaxyrxdvgf6iwai5xvs6xjvpjin68fgvrslv6n15a";
    inherit dependencies buildDependencies features;
  };
  openssl_sys_0_9_30_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl-sys";
    version = "0.9.30";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1p5y3md4crbmg0lcfkdl8pp3kf9k82vghjy28x7ix5mji3j2p87a";
    inherit dependencies buildDependencies features;
  };
  percent_encoding_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "percent-encoding";
    version = "1.0.1";
    authors = [ "The rust-url developers" ];
    sha256 = "04ahrp7aw4ip7fmadb0bknybmkfav0kk0gw4ps3ydq5w6hr0ib5i";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  pkg_config_0_3_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "pkg-config";
    version = "0.3.11";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "177kbs465skvzmb2d9bh7aa5lqm0npfig12awcbd34c6k6nlyr5h";
    inherit dependencies buildDependencies features;
  };
  proc_macro2_0_3_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "proc-macro2";
    version = "0.3.8";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0ixnavxcd6sk1861hjgnfxly7qgq4ch1iplsx0nclvjjkwg39qdc";
    inherit dependencies buildDependencies features;
  };
  quick_error_1_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "quick-error";
    version = "1.2.1";
    authors = [ "Paul Colomiets <paul@colomiets.name>" "Colin Kiegel <kiegel@gmx.de>" ];
    sha256 = "0vq41csw68ynaq2fy5dvldh4lx7pnbw6pr332kv5rvrz4pz0jnq6";
    inherit dependencies buildDependencies features;
  };
  quote_0_3_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "quote";
    version = "0.3.15";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "09il61jv4kd1360spaj46qwyl21fv1qz18fsv2jra8wdnlgl5jsg";
    inherit dependencies buildDependencies features;
  };
  quote_0_5_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "quote";
    version = "0.5.2";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "062cnp12j09x0z0nj4j5pfh26h35zlrks07asxgqhfhcym1ba595";
    inherit dependencies buildDependencies features;
  };
  rand_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.4.2";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0h8pkg23wb67i8904sm76iyr1jlmhklb85vbpz9c9191a24xzkfm";
    inherit dependencies buildDependencies features;
  };
  redox_syscall_0_1_37_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "redox_syscall";
    version = "0.1.37";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "0qa0jl9cr3qp80an8vshp2mcn8rzvwiavs1398hq1vsjw7pc3h2v";
    libName = "syscall";
    inherit dependencies buildDependencies features;
  };
  redox_termios_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "redox_termios";
    version = "0.1.1";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "04s6yyzjca552hdaqlvqhp3vw0zqbc304md5czyd3axh56iry8wh";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  regex_0_2_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex";
    version = "0.2.11";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0r50cymxdqp0fv1dxd22mjr6y32q450nwacd279p9s7lh0cafijj";
    inherit dependencies buildDependencies features;
  };
  regex_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex";
    version = "1.0.0";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1wynl7jmf6l2fnsayw1bzfh7km4wwqnqfpi8anj7wbhdk17i6j6b";
    inherit dependencies buildDependencies features;
  };
  regex_syntax_0_5_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex-syntax";
    version = "0.5.6";
    authors = [ "The Rust Project Developers" ];
    sha256 = "10vf3r34bgjnbrnqd5aszn35bjvm8insw498l1vjy8zx5yms3427";
    inherit dependencies buildDependencies features;
  };
  regex_syntax_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex-syntax";
    version = "0.6.0";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1zlaq3y1zbiqilxbh0471bizcs4p14b58nqr815w3ssyam169cy6";
    inherit dependencies buildDependencies features;
  };
  remove_dir_all_0_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "remove_dir_all";
    version = "0.5.1";
    authors = [ "Aaronepower <theaaronepower@gmail.com>" ];
    sha256 = "1chx3yvfbj46xjz4bzsvps208l46hfbcy0sm98gpiya454n4rrl7";
    inherit dependencies buildDependencies features;
  };
  rustc_demangle_0_1_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustc-demangle";
    version = "0.1.8";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0xn5l86qfwngmdsjbglj30wh37zplvch96jl9raysl3k06gkkv3c";
    inherit dependencies buildDependencies features;
  };
  same_file_1_0_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "same-file";
    version = "1.0.2";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1xjj93345qz4dqk1qwlah98dkqrbfvrg7i3hcm3dkjygjqdid2h7";
    inherit dependencies buildDependencies features;
  };
  schannel_0_1_12_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "schannel";
    version = "0.1.12";
    authors = [ "Steven Fackler <sfackler@gmail.com>" "Steffen Butzer <steffen.butzer@outlook.com>" ];
    sha256 = "1lqdzx8d4rql8ah9w760syvrbbyp26s9cgidvrh34h0hjglja42d";
    inherit dependencies buildDependencies features;
  };
  scopeguard_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "scopeguard";
    version = "0.3.3";
    authors = [ "bluss" ];
    sha256 = "0i1l013csrqzfz6c68pr5pi01hg5v5yahq8fsdmaxy6p8ygsjf3r";
    inherit dependencies buildDependencies features;
  };
  semver_0_9_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "semver";
    version = "0.9.0";
    authors = [ "Steve Klabnik <steve@steveklabnik.com>" "The Rust Project Developers" ];
    sha256 = "0azak2lb2wc36s3x15az886kck7rpnksrw14lalm157rg9sc9z63";
    inherit dependencies buildDependencies features;
  };
  semver_parser_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "semver-parser";
    version = "0.7.0";
    authors = [ "Steve Klabnik <steve@steveklabnik.com>" ];
    sha256 = "1da66c8413yakx0y15k8c055yna5lyb6fr0fw9318kdwkrk5k12h";
    inherit dependencies buildDependencies features;
  };
  serde_1_0_56_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde";
    version = "1.0.56";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1w0yl4bk9lbah6z79gpxd7yr2a6pdw26vv9n0373ybdak4i82vyp";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  serde_derive_1_0_56_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_derive";
    version = "1.0.56";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0j945f9m2dbkc4b41ibhazpyalz98qm3bw2zja356f88z7riaxxc";
    procMacro = true;
    inherit dependencies buildDependencies features;
  };
  serde_ignored_0_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_ignored";
    version = "0.0.4";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1ljsywm58p1s645rg2l9mchc5xa6mzxjpm8ag8nc2b74yp09h4jh";
    inherit dependencies buildDependencies features;
  };
  serde_json_1_0_17_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_json";
    version = "1.0.17";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1q4660h8yqq5y3wkpqfzwmyvncfb2z7qqxblngs4jfi1sndi2zlz";
    inherit dependencies buildDependencies features;
  };
  shell_escape_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "shell-escape";
    version = "0.1.4";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "02ik28la039b8anx0sx8mbdp2yx66m64mjrjyy6x0dgpbmfxmc24";
    inherit dependencies buildDependencies features;
  };
  socket2_0_3_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "socket2";
    version = "0.3.5";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0bi6z6qvra16rwm3lk7xz4aakvcmmak6fpdmra1v7ccp40bss0kf";
    inherit dependencies buildDependencies features;
  };
  strsim_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "strsim";
    version = "0.7.0";
    authors = [ "Danny Guo <dannyguo91@gmail.com>" ];
    sha256 = "0fy0k5f2705z73mb3x9459bpcvrx4ky8jpr4zikcbiwan4bnm0iv";
    inherit dependencies buildDependencies features;
  };
  syn_0_11_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "syn";
    version = "0.11.11";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0yw8ng7x1dn5a6ykg0ib49y7r9nhzgpiq2989rqdp7rdz3n85502";
    inherit dependencies buildDependencies features;
  };
  syn_0_13_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "syn";
    version = "0.13.10";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0dbvdxlpvx7f8iw5cbv88vbyszp72df8y8zhl36gj73g1xwdqfhx";
    inherit dependencies buildDependencies features;
  };
  synom_0_11_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "synom";
    version = "0.11.3";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1l6d1s9qjfp6ng2s2z8219igvlv7gyk8gby97sdykqc1r93d8rhc";
    inherit dependencies buildDependencies features;
  };
  synstructure_0_6_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "synstructure";
    version = "0.6.1";
    authors = [ "Michael Layzell <michael@thelayzells.com>" ];
    sha256 = "1xnyw58va9zcqi4vvpnmpllacdj2a0mvy0cbd698izmr4qs92xlk";
    inherit dependencies buildDependencies features;
  };
  tar_0_4_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tar";
    version = "0.4.15";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1pbd5d5qqgrvdd8jl2w8pirq6f0fv7r5dfq4krgygwyxgvhsd4m0";
    inherit dependencies buildDependencies features;
  };
  tempfile_3_0_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tempfile";
    version = "3.0.2";
    authors = [ "Steven Allen <steven@stebalien.com>" "The Rust Project Developers" "Ashley Mannix <ashleymannix@live.com.au>" "Jason White <jasonaw0@gmail.com>" ];
    sha256 = "0ga3lxzd3l576khqlxygawwzphgvmkkf40x4sdddl74skydsl78k";
    inherit dependencies buildDependencies features;
  };
  termcolor_0_3_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "termcolor";
    version = "0.3.6";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0w609sa1apl1kii67ln2g82r4rrycw45zgjq7mxxjrx1fa21v05z";
    inherit dependencies buildDependencies features;
  };
  termion_1_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "termion";
    version = "1.5.1";
    authors = [ "ticki <Ticki@users.noreply.github.com>" "gycos <alexandre.bury@gmail.com>" "IGI-111 <igi-111@protonmail.com>" ];
    sha256 = "02gq4vd8iws1f3gjrgrgpajsk2bk43nds5acbbb4s8dvrdvr8nf1";
    inherit dependencies buildDependencies features;
  };
  textwrap_0_9_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "textwrap";
    version = "0.9.0";
    authors = [ "Martin Geisler <martin@geisler.net>" ];
    sha256 = "18jg79ndjlwndz01mlbh82kkr2arqm658yn5kwp65l5n1hz8w4yb";
    inherit dependencies buildDependencies features;
  };
  thread_local_0_3_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "thread_local";
    version = "0.3.5";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "0mkp0sp91aqsk7brgygai4igv751r1754rsxn37mig3ag5rx8np6";
    inherit dependencies buildDependencies features;
  };
  toml_0_4_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "toml";
    version = "0.4.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0rfl7lyb5f67spk69s604nw87f97g7fvv36hj9v88qlr2bwyrn8v";
    inherit dependencies buildDependencies features;
  };
  ucd_util_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ucd-util";
    version = "0.1.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "02a8h3siipx52b832xc8m8rwasj6nx9jpiwfldw8hp6k205hgkn0";
    inherit dependencies buildDependencies features;
  };
  unicode_bidi_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-bidi";
    version = "0.3.4";
    authors = [ "The Servo Project Developers" ];
    sha256 = "0lcd6jasrf8p9p0q20qyf10c6xhvw40m2c4rr105hbk6zy26nj1q";
    libName = "unicode_bidi";
    inherit dependencies buildDependencies features;
  };
  unicode_normalization_0_1_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-normalization";
    version = "0.1.7";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "1da2hv800pd0wilmn4idwpgv5p510hjxizjcfv6xzb40xcsjd8gs";
    inherit dependencies buildDependencies features;
  };
  unicode_width_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-width";
    version = "0.1.4";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "1rp7a04icn9y5c0lm74nrd4py0rdl0af8bhdwq7g478n1xifpifl";
    inherit dependencies buildDependencies features;
  };
  unicode_xid_0_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-xid";
    version = "0.0.4";
    authors = [ "erick.tryzelaar <erick.tryzelaar@gmail.com>" "kwantam <kwantam@gmail.com>" ];
    sha256 = "1dc8wkkcd3s6534s5aw4lbjn8m67flkkbnajp5bl8408wdg8rh9v";
    inherit dependencies buildDependencies features;
  };
  unicode_xid_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-xid";
    version = "0.1.0";
    authors = [ "erick.tryzelaar <erick.tryzelaar@gmail.com>" "kwantam <kwantam@gmail.com>" ];
    sha256 = "05wdmwlfzxhq3nhsxn6wx4q8dhxzzfb9szsz6wiw092m1rjj01zj";
    inherit dependencies buildDependencies features;
  };
  unreachable_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unreachable";
    version = "1.0.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1am8czbk5wwr25gbp2zr007744fxjshhdqjz9liz7wl4pnv3whcf";
    inherit dependencies buildDependencies features;
  };
  url_1_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "url";
    version = "1.7.0";
    authors = [ "The rust-url developers" ];
    sha256 = "0333ynhkp47hna88aamz1zpk4lxyzx4ab9n7yhc75g14w27cv8jj";
    inherit dependencies buildDependencies features;
  };
  utf8_ranges_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "utf8-ranges";
    version = "1.0.0";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0rzmqprwjv9yp1n0qqgahgm24872x6c0xddfym5pfndy7a36vkn0";
    inherit dependencies buildDependencies features;
  };
  vcpkg_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "vcpkg";
    version = "0.2.3";
    authors = [ "Jim McGrath <jimmc2@gmail.com>" ];
    sha256 = "0achi8sfy0wm4q04gj7nwpq9xfx8ynk6vv4r12a3ijg26hispq0c";
    inherit dependencies buildDependencies features;
  };
  vec_map_0_8_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "vec_map";
    version = "0.8.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Jorge Aparicio <japaricious@gmail.com>" "Alexis Beingessner <a.beingessner@gmail.com>" "Brian Anderson <>" "tbu- <>" "Manish Goregaokar <>" "Aaron Turon <aturon@mozilla.com>" "Adolfo Ochagavía <>" "Niko Matsakis <>" "Steven Fackler <>" "Chase Southwood <csouth3@illinois.edu>" "Eduard Burtescu <>" "Florian Wilkens <>" "Félix Raimundo <>" "Tibor Benke <>" "Markus Siemens <markus@m-siemens.de>" "Josh Branchaud <jbranchaud@gmail.com>" "Huon Wilson <dbau.pp@gmail.com>" "Corey Farwell <coref@rwell.org>" "Aaron Liblong <>" "Nick Cameron <nrc@ncameron.org>" "Patrick Walton <pcwalton@mimiga.net>" "Felix S Klock II <>" "Andrew Paseltiner <apaseltiner@gmail.com>" "Sean McArthur <sean.monstar@gmail.com>" "Vadim Petrochenkov <>" ];
    sha256 = "1jj2nrg8h3l53d43rwkpkikq5a5x15ms4rf1rw92hp5lrqhi8mpi";
    inherit dependencies buildDependencies features;
  };
  void_1_0_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "void";
    version = "1.0.2";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "0h1dm0dx8dhf56a83k68mijyxigqhizpskwxfdrs1drwv2cdclv3";
    inherit dependencies buildDependencies features;
  };
  walkdir_2_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "walkdir";
    version = "2.1.4";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1bx9q2xnhgbjygn99zi8j5avhv8jmkbi5lxgg20h9kmgswqkbmny";
    inherit dependencies buildDependencies features;
  };
  winapi_0_2_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.2.8";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
    inherit dependencies buildDependencies features;
  };
  winapi_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.3.4";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1qbrf5dcnd8j36cawby5d9r5vx07r0l4ryf672pfncnp8895k9lx";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_build_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-build";
    version = "0.1.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
    libName = "build";
    inherit dependencies buildDependencies features;
  };
  winapi_i686_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_x86_64_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  wincolor_0_1_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "wincolor";
    version = "0.1.6";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0f8m3l86pw6qi31jidqj78pgd15xj914850lyvsxkbln4f1drv47";
    inherit dependencies buildDependencies features;
  };
  aho_corasick_0_6_4 = { features?(aho_corasick_0_6_4_features {}) }: aho_corasick_0_6_4_ {
    dependencies = mapFeatures features ([ memchr_2_0_1 ]);
  };
  aho_corasick_0_6_4_features = f: updateFeatures f (rec {
    aho_corasick_0_6_4.default = (f.aho_corasick_0_6_4.default or true);
    memchr_2_0_1.default = true;
  }) [ memchr_2_0_1_features ];
  ansi_term_0_11_0 = { features?(ansi_term_0_11_0_features {}) }: ansi_term_0_11_0_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
  };
  ansi_term_0_11_0_features = f: updateFeatures f (rec {
    ansi_term_0_11_0.default = (f.ansi_term_0_11_0.default or true);
    winapi_0_3_4.consoleapi = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.errhandlingapi = true;
    winapi_0_3_4.processenv = true;
  }) [ winapi_0_3_4_features ];
  atty_0_2_10 = { features?(atty_0_2_10_features {}) }: atty_0_2_10_ {
    dependencies = (if kernel == "redox" then mapFeatures features ([ termion_1_5_1 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_40 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
  };
  atty_0_2_10_features = f: updateFeatures f (rec {
    atty_0_2_10.default = (f.atty_0_2_10.default or true);
    libc_0_2_40.default = (f.libc_0_2_40.default or false);
    termion_1_5_1.default = true;
    winapi_0_3_4.consoleapi = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.minwinbase = true;
    winapi_0_3_4.minwindef = true;
    winapi_0_3_4.processenv = true;
    winapi_0_3_4.winbase = true;
  }) [ termion_1_5_1_features libc_0_2_40_features winapi_0_3_4_features ];
  backtrace_0_3_7 = { features?(backtrace_0_3_7_features {}) }: backtrace_0_3_7_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_3 rustc_demangle_0_1_8 ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "fuchsia") && !(kernel == "emscripten") && !(kernel == "darwin") && !(kernel == "ios") then mapFeatures features ([ ]
      ++ (if features.backtrace_0_3_7."backtrace-sys" or false then [ backtrace_sys_0_1_16 ] else [])) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_40 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ ]
      ++ (if features.backtrace_0_3_7.winapi or false then [ winapi_0_3_4 ] else [])) else []);
    features = mkFeatures (features.backtrace_0_3_7 or {});
  };
  backtrace_0_3_7_features = f: updateFeatures f (rec {
    backtrace_0_3_7."addr2line" =
      (f.backtrace_0_3_7."addr2line" or false) ||
      (f.backtrace_0_3_7."gimli-symbolize" or false) ||
      (backtrace_0_3_7."gimli-symbolize" or false);
    backtrace_0_3_7."backtrace-sys" =
      (f.backtrace_0_3_7."backtrace-sys" or false) ||
      (f.backtrace_0_3_7.libbacktrace or false) ||
      (backtrace_0_3_7.libbacktrace or false);
    backtrace_0_3_7."rustc-serialize" =
      (f.backtrace_0_3_7."rustc-serialize" or false) ||
      (f.backtrace_0_3_7."serialize-rustc" or false) ||
      (backtrace_0_3_7."serialize-rustc" or false);
    backtrace_0_3_7.coresymbolication =
      (f.backtrace_0_3_7.coresymbolication or false) ||
      (f.backtrace_0_3_7.default or false) ||
      (backtrace_0_3_7.default or false);
    backtrace_0_3_7.dbghelp =
      (f.backtrace_0_3_7.dbghelp or false) ||
      (f.backtrace_0_3_7.default or false) ||
      (backtrace_0_3_7.default or false);
    backtrace_0_3_7.default = (f.backtrace_0_3_7.default or true);
    backtrace_0_3_7.dladdr =
      (f.backtrace_0_3_7.dladdr or false) ||
      (f.backtrace_0_3_7.default or false) ||
      (backtrace_0_3_7.default or false);
    backtrace_0_3_7.findshlibs =
      (f.backtrace_0_3_7.findshlibs or false) ||
      (f.backtrace_0_3_7."gimli-symbolize" or false) ||
      (backtrace_0_3_7."gimli-symbolize" or false);
    backtrace_0_3_7.gimli =
      (f.backtrace_0_3_7.gimli or false) ||
      (f.backtrace_0_3_7."gimli-symbolize" or false) ||
      (backtrace_0_3_7."gimli-symbolize" or false);
    backtrace_0_3_7.libbacktrace =
      (f.backtrace_0_3_7.libbacktrace or false) ||
      (f.backtrace_0_3_7.default or false) ||
      (backtrace_0_3_7.default or false);
    backtrace_0_3_7.libunwind =
      (f.backtrace_0_3_7.libunwind or false) ||
      (f.backtrace_0_3_7.default or false) ||
      (backtrace_0_3_7.default or false);
    backtrace_0_3_7.memmap =
      (f.backtrace_0_3_7.memmap or false) ||
      (f.backtrace_0_3_7."gimli-symbolize" or false) ||
      (backtrace_0_3_7."gimli-symbolize" or false);
    backtrace_0_3_7.object =
      (f.backtrace_0_3_7.object or false) ||
      (f.backtrace_0_3_7."gimli-symbolize" or false) ||
      (backtrace_0_3_7."gimli-symbolize" or false);
    backtrace_0_3_7.serde =
      (f.backtrace_0_3_7.serde or false) ||
      (f.backtrace_0_3_7."serialize-serde" or false) ||
      (backtrace_0_3_7."serialize-serde" or false);
    backtrace_0_3_7.serde_derive =
      (f.backtrace_0_3_7.serde_derive or false) ||
      (f.backtrace_0_3_7."serialize-serde" or false) ||
      (backtrace_0_3_7."serialize-serde" or false);
    backtrace_0_3_7.winapi =
      (f.backtrace_0_3_7.winapi or false) ||
      (f.backtrace_0_3_7.dbghelp or false) ||
      (backtrace_0_3_7.dbghelp or false);
    backtrace_sys_0_1_16.default = true;
    cfg_if_0_1_3.default = true;
    libc_0_2_40.default = true;
    rustc_demangle_0_1_8.default = true;
    winapi_0_3_4.dbghelp = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.minwindef = true;
    winapi_0_3_4.processthreadsapi = true;
    winapi_0_3_4.std = true;
    winapi_0_3_4.winnt = true;
  }) [ cfg_if_0_1_3_features rustc_demangle_0_1_8_features backtrace_sys_0_1_16_features libc_0_2_40_features winapi_0_3_4_features ];
  backtrace_sys_0_1_16 = { features?(backtrace_sys_0_1_16_features {}) }: backtrace_sys_0_1_16_ {
    dependencies = mapFeatures features ([ libc_0_2_40 ]);
    buildDependencies = mapFeatures features ([ cc_1_0_15 ]);
  };
  backtrace_sys_0_1_16_features = f: updateFeatures f (rec {
    backtrace_sys_0_1_16.default = (f.backtrace_sys_0_1_16.default or true);
    cc_1_0_15.default = true;
    libc_0_2_40.default = true;
  }) [ libc_0_2_40_features cc_1_0_15_features ];
  bitflags_1_0_3 = { features?(bitflags_1_0_3_features {}) }: bitflags_1_0_3_ {
    features = mkFeatures (features.bitflags_1_0_3 or {});
  };
  bitflags_1_0_3_features = f: updateFeatures f (rec {
    bitflags_1_0_3.default = (f.bitflags_1_0_3.default or true);
  }) [];
  cargo_0_27_0 = { features?(cargo_0_27_0_features {}) }: cargo_0_27_0_ {
    dependencies = mapFeatures features ([ atty_0_2_10 clap_2_31_2 crates_io_0_16_0 crossbeam_0_3_2 crypto_hash_0_3_1 curl_0_4_12 env_logger_0_5_10 failure_0_1_1 filetime_0_1_15 flate2_1_0_1 fs2_0_4_3 git2_0_7_1 git2_curl_0_8_1 glob_0_2_11 hex_0_3_2 home_0_3_3 ignore_0_4_2 jobserver_0_1_11 lazy_static_1_0_0 lazycell_0_6_0 libc_0_2_40 libgit2_sys_0_7_1 log_0_4_1 num_traits_0_2_4 num_cpus_1_8_0 same_file_1_0_2 semver_0_9_0 serde_1_0_56 serde_derive_1_0_56 serde_ignored_0_0_4 serde_json_1_0_17 shell_escape_0_1_4 tar_0_4_15 tempfile_3_0_2 termcolor_0_3_6 toml_0_4_6 url_1_7_0 ])
      ++ (if kernel == "darwin" then mapFeatures features ([ core_foundation_0_5_1 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ miow_0_3_1 winapi_0_3_4 ]) else []);
  };
  cargo_0_27_0_features = f: updateFeatures f (rec {
    atty_0_2_10.default = true;
    cargo_0_27_0.default = (f.cargo_0_27_0.default or true);
    clap_2_31_2.default = true;
    core_foundation_0_5_1."mac_os_10_7_support" = true;
    core_foundation_0_5_1.default = true;
    crates_io_0_16_0.default = true;
    crossbeam_0_3_2.default = true;
    crypto_hash_0_3_1.default = true;
    curl_0_4_12.default = true;
    env_logger_0_5_10.default = true;
    failure_0_1_1.default = true;
    filetime_0_1_15.default = true;
    flate2_1_0_1.default = true;
    fs2_0_4_3.default = true;
    git2_0_7_1.default = true;
    git2_curl_0_8_1.default = true;
    glob_0_2_11.default = true;
    hex_0_3_2.default = true;
    home_0_3_3.default = true;
    ignore_0_4_2.default = true;
    jobserver_0_1_11.default = true;
    lazy_static_1_0_0.default = true;
    lazycell_0_6_0.default = true;
    libc_0_2_40.default = true;
    libgit2_sys_0_7_1.default = true;
    log_0_4_1.default = true;
    miow_0_3_1.default = true;
    num_cpus_1_8_0.default = true;
    num_traits_0_2_4.default = true;
    same_file_1_0_2.default = true;
    semver_0_9_0.default = true;
    semver_0_9_0.serde = true;
    serde_1_0_56.default = true;
    serde_derive_1_0_56.default = true;
    serde_ignored_0_0_4.default = true;
    serde_json_1_0_17.default = true;
    shell_escape_0_1_4.default = true;
    tar_0_4_15.default = (f.tar_0_4_15.default or false);
    tempfile_3_0_2.default = true;
    termcolor_0_3_6.default = true;
    toml_0_4_6.default = true;
    url_1_7_0.default = true;
    winapi_0_3_4."jobapi2" = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.handleapi = true;
    winapi_0_3_4.jobapi = true;
    winapi_0_3_4.minwindef = true;
    winapi_0_3_4.ntdef = true;
    winapi_0_3_4.ntstatus = true;
    winapi_0_3_4.processenv = true;
    winapi_0_3_4.processthreadsapi = true;
    winapi_0_3_4.psapi = true;
    winapi_0_3_4.synchapi = true;
    winapi_0_3_4.winbase = true;
    winapi_0_3_4.wincon = true;
    winapi_0_3_4.winerror = true;
    winapi_0_3_4.winnt = true;
  }) [ atty_0_2_10_features clap_2_31_2_features crates_io_0_16_0_features crossbeam_0_3_2_features crypto_hash_0_3_1_features curl_0_4_12_features env_logger_0_5_10_features failure_0_1_1_features filetime_0_1_15_features flate2_1_0_1_features fs2_0_4_3_features git2_0_7_1_features git2_curl_0_8_1_features glob_0_2_11_features hex_0_3_2_features home_0_3_3_features ignore_0_4_2_features jobserver_0_1_11_features lazy_static_1_0_0_features lazycell_0_6_0_features libc_0_2_40_features libgit2_sys_0_7_1_features log_0_4_1_features num_traits_0_2_4_features num_cpus_1_8_0_features same_file_1_0_2_features semver_0_9_0_features serde_1_0_56_features serde_derive_1_0_56_features serde_ignored_0_0_4_features serde_json_1_0_17_features shell_escape_0_1_4_features tar_0_4_15_features tempfile_3_0_2_features termcolor_0_3_6_features toml_0_4_6_features url_1_7_0_features core_foundation_0_5_1_features miow_0_3_1_features winapi_0_3_4_features ];
  cargo_vendor_0_1_15 = { features?(cargo_vendor_0_1_15_features {}) }: cargo_vendor_0_1_15_ {
    dependencies = mapFeatures features ([ cargo_0_27_0 docopt_1_0_0 env_logger_0_5_10 failure_0_1_1 serde_1_0_56 serde_derive_1_0_56 serde_json_1_0_17 toml_0_4_6 ]);
  };
  cargo_vendor_0_1_15_features = f: updateFeatures f (rec {
    cargo_0_27_0.default = true;
    cargo_vendor_0_1_15.default = (f.cargo_vendor_0_1_15.default or true);
    docopt_1_0_0.default = true;
    env_logger_0_5_10.default = true;
    failure_0_1_1.default = true;
    serde_1_0_56.default = true;
    serde_derive_1_0_56.default = true;
    serde_json_1_0_17.default = true;
    toml_0_4_6.default = true;
  }) [ cargo_0_27_0_features docopt_1_0_0_features env_logger_0_5_10_features failure_0_1_1_features serde_1_0_56_features serde_derive_1_0_56_features serde_json_1_0_17_features toml_0_4_6_features ];
  cc_1_0_15 = { features?(cc_1_0_15_features {}) }: cc_1_0_15_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.cc_1_0_15 or {});
  };
  cc_1_0_15_features = f: updateFeatures f (rec {
    cc_1_0_15.default = (f.cc_1_0_15.default or true);
    cc_1_0_15.rayon =
      (f.cc_1_0_15.rayon or false) ||
      (f.cc_1_0_15.parallel or false) ||
      (cc_1_0_15.parallel or false);
  }) [];
  cfg_if_0_1_3 = { features?(cfg_if_0_1_3_features {}) }: cfg_if_0_1_3_ {};
  cfg_if_0_1_3_features = f: updateFeatures f (rec {
    cfg_if_0_1_3.default = (f.cfg_if_0_1_3.default or true);
  }) [];
  clap_2_31_2 = { features?(clap_2_31_2_features {}) }: clap_2_31_2_ {
    dependencies = mapFeatures features ([ bitflags_1_0_3 textwrap_0_9_0 unicode_width_0_1_4 ]
      ++ (if features.clap_2_31_2.atty or false then [ atty_0_2_10 ] else [])
      ++ (if features.clap_2_31_2.strsim or false then [ strsim_0_7_0 ] else [])
      ++ (if features.clap_2_31_2.vec_map or false then [ vec_map_0_8_1 ] else []))
      ++ (if !(kernel == "windows") then mapFeatures features ([ ]
      ++ (if features.clap_2_31_2.ansi_term or false then [ ansi_term_0_11_0 ] else [])) else []);
    features = mkFeatures (features.clap_2_31_2 or {});
  };
  clap_2_31_2_features = f: updateFeatures f (rec {
    ansi_term_0_11_0.default = true;
    atty_0_2_10.default = true;
    bitflags_1_0_3.default = true;
    clap_2_31_2."yaml-rust" =
      (f.clap_2_31_2."yaml-rust" or false) ||
      (f.clap_2_31_2.yaml or false) ||
      (clap_2_31_2.yaml or false);
    clap_2_31_2.ansi_term =
      (f.clap_2_31_2.ansi_term or false) ||
      (f.clap_2_31_2.color or false) ||
      (clap_2_31_2.color or false);
    clap_2_31_2.atty =
      (f.clap_2_31_2.atty or false) ||
      (f.clap_2_31_2.color or false) ||
      (clap_2_31_2.color or false);
    clap_2_31_2.clippy =
      (f.clap_2_31_2.clippy or false) ||
      (f.clap_2_31_2.lints or false) ||
      (clap_2_31_2.lints or false);
    clap_2_31_2.color =
      (f.clap_2_31_2.color or false) ||
      (f.clap_2_31_2.default or false) ||
      (clap_2_31_2.default or false);
    clap_2_31_2.default = (f.clap_2_31_2.default or true);
    clap_2_31_2.strsim =
      (f.clap_2_31_2.strsim or false) ||
      (f.clap_2_31_2.suggestions or false) ||
      (clap_2_31_2.suggestions or false);
    clap_2_31_2.suggestions =
      (f.clap_2_31_2.suggestions or false) ||
      (f.clap_2_31_2.default or false) ||
      (clap_2_31_2.default or false);
    clap_2_31_2.term_size =
      (f.clap_2_31_2.term_size or false) ||
      (f.clap_2_31_2.wrap_help or false) ||
      (clap_2_31_2.wrap_help or false);
    clap_2_31_2.vec_map =
      (f.clap_2_31_2.vec_map or false) ||
      (f.clap_2_31_2.default or false) ||
      (clap_2_31_2.default or false);
    clap_2_31_2.yaml =
      (f.clap_2_31_2.yaml or false) ||
      (f.clap_2_31_2.doc or false) ||
      (clap_2_31_2.doc or false);
    strsim_0_7_0.default = true;
    textwrap_0_9_0.default = true;
    textwrap_0_9_0.term_size =
      (f.textwrap_0_9_0.term_size or false) ||
      (clap_2_31_2.wrap_help or false) ||
      (f.clap_2_31_2.wrap_help or false);
    unicode_width_0_1_4.default = true;
    vec_map_0_8_1.default = true;
  }) [ atty_0_2_10_features bitflags_1_0_3_features strsim_0_7_0_features textwrap_0_9_0_features unicode_width_0_1_4_features vec_map_0_8_1_features ansi_term_0_11_0_features ];
  cmake_0_1_31 = { features?(cmake_0_1_31_features {}) }: cmake_0_1_31_ {
    dependencies = mapFeatures features ([ cc_1_0_15 ]);
  };
  cmake_0_1_31_features = f: updateFeatures f (rec {
    cc_1_0_15.default = true;
    cmake_0_1_31.default = (f.cmake_0_1_31.default or true);
  }) [ cc_1_0_15_features ];
  commoncrypto_0_2_0 = { features?(commoncrypto_0_2_0_features {}) }: commoncrypto_0_2_0_ {
    dependencies = mapFeatures features ([ commoncrypto_sys_0_2_0 ]);
    features = mkFeatures (features.commoncrypto_0_2_0 or {});
  };
  commoncrypto_0_2_0_features = f: updateFeatures f (rec {
    commoncrypto_0_2_0.clippy =
      (f.commoncrypto_0_2_0.clippy or false) ||
      (f.commoncrypto_0_2_0.lint or false) ||
      (commoncrypto_0_2_0.lint or false);
    commoncrypto_0_2_0.default = (f.commoncrypto_0_2_0.default or true);
    commoncrypto_sys_0_2_0.default = true;
  }) [ commoncrypto_sys_0_2_0_features ];
  commoncrypto_sys_0_2_0 = { features?(commoncrypto_sys_0_2_0_features {}) }: commoncrypto_sys_0_2_0_ {
    dependencies = mapFeatures features ([ libc_0_2_40 ]);
    features = mkFeatures (features.commoncrypto_sys_0_2_0 or {});
  };
  commoncrypto_sys_0_2_0_features = f: updateFeatures f (rec {
    commoncrypto_sys_0_2_0.clippy =
      (f.commoncrypto_sys_0_2_0.clippy or false) ||
      (f.commoncrypto_sys_0_2_0.lint or false) ||
      (commoncrypto_sys_0_2_0.lint or false);
    commoncrypto_sys_0_2_0.default = (f.commoncrypto_sys_0_2_0.default or true);
    libc_0_2_40.default = true;
  }) [ libc_0_2_40_features ];
  core_foundation_0_5_1 = { features?(core_foundation_0_5_1_features {}) }: core_foundation_0_5_1_ {
    dependencies = mapFeatures features ([ core_foundation_sys_0_5_1 libc_0_2_40 ]);
    features = mkFeatures (features.core_foundation_0_5_1 or {});
  };
  core_foundation_0_5_1_features = f: updateFeatures f (rec {
    core_foundation_0_5_1.chrono =
      (f.core_foundation_0_5_1.chrono or false) ||
      (f.core_foundation_0_5_1."with-chrono" or false) ||
      (core_foundation_0_5_1."with-chrono" or false);
    core_foundation_0_5_1.default = (f.core_foundation_0_5_1.default or true);
    core_foundation_0_5_1.uuid =
      (f.core_foundation_0_5_1.uuid or false) ||
      (f.core_foundation_0_5_1."with-uuid" or false) ||
      (core_foundation_0_5_1."with-uuid" or false);
    core_foundation_sys_0_5_1."mac_os_10_7_support" =
      (f.core_foundation_sys_0_5_1."mac_os_10_7_support" or false) ||
      (core_foundation_0_5_1."mac_os_10_7_support" or false) ||
      (f.core_foundation_0_5_1."mac_os_10_7_support" or false);
    core_foundation_sys_0_5_1."mac_os_10_8_features" =
      (f.core_foundation_sys_0_5_1."mac_os_10_8_features" or false) ||
      (core_foundation_0_5_1."mac_os_10_8_features" or false) ||
      (f.core_foundation_0_5_1."mac_os_10_8_features" or false);
    core_foundation_sys_0_5_1.default = true;
    libc_0_2_40.default = true;
  }) [ core_foundation_sys_0_5_1_features libc_0_2_40_features ];
  core_foundation_sys_0_5_1 = { features?(core_foundation_sys_0_5_1_features {}) }: core_foundation_sys_0_5_1_ {
    dependencies = mapFeatures features ([ libc_0_2_40 ]);
    features = mkFeatures (features.core_foundation_sys_0_5_1 or {});
  };
  core_foundation_sys_0_5_1_features = f: updateFeatures f (rec {
    core_foundation_sys_0_5_1.default = (f.core_foundation_sys_0_5_1.default or true);
    libc_0_2_40.default = true;
  }) [ libc_0_2_40_features ];
  crates_io_0_16_0 = { features?(crates_io_0_16_0_features {}) }: crates_io_0_16_0_ {
    dependencies = mapFeatures features ([ curl_0_4_12 failure_0_1_1 serde_1_0_56 serde_derive_1_0_56 serde_json_1_0_17 url_1_7_0 ]);
  };
  crates_io_0_16_0_features = f: updateFeatures f (rec {
    crates_io_0_16_0.default = (f.crates_io_0_16_0.default or true);
    curl_0_4_12.default = true;
    failure_0_1_1.default = true;
    serde_1_0_56.default = true;
    serde_derive_1_0_56.default = true;
    serde_json_1_0_17.default = true;
    url_1_7_0.default = true;
  }) [ curl_0_4_12_features failure_0_1_1_features serde_1_0_56_features serde_derive_1_0_56_features serde_json_1_0_17_features url_1_7_0_features ];
  crossbeam_0_3_2 = { features?(crossbeam_0_3_2_features {}) }: crossbeam_0_3_2_ {
    features = mkFeatures (features.crossbeam_0_3_2 or {});
  };
  crossbeam_0_3_2_features = f: updateFeatures f (rec {
    crossbeam_0_3_2.default = (f.crossbeam_0_3_2.default or true);
  }) [];
  crypto_hash_0_3_1 = { features?(crypto_hash_0_3_1_features {}) }: crypto_hash_0_3_1_ {
    dependencies = mapFeatures features ([ hex_0_3_2 ])
      ++ (if !(kernel == "windows" || kernel == "darwin") then mapFeatures features ([ openssl_0_10_7 ]) else [])
      ++ (if kernel == "darwin" then mapFeatures features ([ commoncrypto_0_2_0 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
  };
  crypto_hash_0_3_1_features = f: updateFeatures f (rec {
    commoncrypto_0_2_0.default = true;
    crypto_hash_0_3_1.default = (f.crypto_hash_0_3_1.default or true);
    hex_0_3_2.default = true;
    openssl_0_10_7.default = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.minwindef = true;
    winapi_0_3_4.wincrypt = true;
  }) [ hex_0_3_2_features openssl_0_10_7_features commoncrypto_0_2_0_features winapi_0_3_4_features ];
  curl_0_4_12 = { features?(curl_0_4_12_features {}) }: curl_0_4_12_ {
    dependencies = mapFeatures features ([ curl_sys_0_4_5 libc_0_2_40 socket2_0_3_5 ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "darwin") then mapFeatures features ([ openssl_probe_0_1_2 openssl_sys_0_9_30 ]) else [])
      ++ (if abi == "msvc" then mapFeatures features ([ kernel32_sys_0_2_2 schannel_0_1_12 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_2_8 ]) else []);
  };
  curl_0_4_12_features = f: updateFeatures f (rec {
    curl_0_4_12.default = (f.curl_0_4_12.default or true);
    curl_sys_0_4_5.default = true;
    kernel32_sys_0_2_2.default = true;
    libc_0_2_40.default = true;
    openssl_probe_0_1_2.default = true;
    openssl_sys_0_9_30.default = true;
    schannel_0_1_12.default = true;
    socket2_0_3_5.default = true;
    winapi_0_2_8.default = true;
  }) [ curl_sys_0_4_5_features libc_0_2_40_features socket2_0_3_5_features openssl_probe_0_1_2_features openssl_sys_0_9_30_features kernel32_sys_0_2_2_features schannel_0_1_12_features winapi_0_2_8_features ];
  curl_sys_0_4_5 = { features?(curl_sys_0_4_5_features {}) }: curl_sys_0_4_5_ {
    dependencies = mapFeatures features ([ libc_0_2_40 libz_sys_1_0_18 ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "darwin") then mapFeatures features ([ openssl_sys_0_9_30 ]) else [])
      ++ (if abi == "msvc" then mapFeatures features ([]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_15 pkg_config_0_3_11 ]);
  };
  curl_sys_0_4_5_features = f: updateFeatures f (rec {
    cc_1_0_15.default = true;
    curl_sys_0_4_5.default = (f.curl_sys_0_4_5.default or true);
    libc_0_2_40.default = true;
    libz_sys_1_0_18.default = true;
    openssl_sys_0_9_30.default = true;
    pkg_config_0_3_11.default = true;
    winapi_0_3_4."winsock2" = true;
    winapi_0_3_4."ws2def" = true;
    winapi_0_3_4.default = true;
  }) [ libc_0_2_40_features libz_sys_1_0_18_features cc_1_0_15_features pkg_config_0_3_11_features openssl_sys_0_9_30_features winapi_0_3_4_features ];
  docopt_1_0_0 = { features?(docopt_1_0_0_features {}) }: docopt_1_0_0_ {
    dependencies = mapFeatures features ([ lazy_static_1_0_0 regex_1_0_0 serde_1_0_56 serde_derive_1_0_56 strsim_0_7_0 ]);
  };
  docopt_1_0_0_features = f: updateFeatures f (rec {
    docopt_1_0_0.default = (f.docopt_1_0_0.default or true);
    lazy_static_1_0_0.default = true;
    regex_1_0_0.default = true;
    serde_1_0_56.default = true;
    serde_derive_1_0_56.default = true;
    strsim_0_7_0.default = true;
  }) [ lazy_static_1_0_0_features regex_1_0_0_features serde_1_0_56_features serde_derive_1_0_56_features strsim_0_7_0_features ];
  dtoa_0_4_2 = { features?(dtoa_0_4_2_features {}) }: dtoa_0_4_2_ {};
  dtoa_0_4_2_features = f: updateFeatures f (rec {
    dtoa_0_4_2.default = (f.dtoa_0_4_2.default or true);
  }) [];
  env_logger_0_5_10 = { features?(env_logger_0_5_10_features {}) }: env_logger_0_5_10_ {
    dependencies = mapFeatures features ([ atty_0_2_10 humantime_1_1_1 log_0_4_1 termcolor_0_3_6 ]
      ++ (if features.env_logger_0_5_10.regex or false then [ regex_1_0_0 ] else []));
    features = mkFeatures (features.env_logger_0_5_10 or {});
  };
  env_logger_0_5_10_features = f: updateFeatures f (rec {
    atty_0_2_10.default = true;
    env_logger_0_5_10.default = (f.env_logger_0_5_10.default or true);
    env_logger_0_5_10.regex =
      (f.env_logger_0_5_10.regex or false) ||
      (f.env_logger_0_5_10.default or false) ||
      (env_logger_0_5_10.default or false);
    humantime_1_1_1.default = true;
    log_0_4_1.default = true;
    log_0_4_1.std = true;
    regex_1_0_0.default = true;
    termcolor_0_3_6.default = true;
  }) [ atty_0_2_10_features humantime_1_1_1_features log_0_4_1_features regex_1_0_0_features termcolor_0_3_6_features ];
  failure_0_1_1 = { features?(failure_0_1_1_features {}) }: failure_0_1_1_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.failure_0_1_1.backtrace or false then [ backtrace_0_3_7 ] else [])
      ++ (if features.failure_0_1_1.failure_derive or false then [ failure_derive_0_1_1 ] else []));
    features = mkFeatures (features.failure_0_1_1 or {});
  };
  failure_0_1_1_features = f: updateFeatures f (rec {
    backtrace_0_3_7.default = true;
    failure_0_1_1.backtrace =
      (f.failure_0_1_1.backtrace or false) ||
      (f.failure_0_1_1.std or false) ||
      (failure_0_1_1.std or false);
    failure_0_1_1.default = (f.failure_0_1_1.default or true);
    failure_0_1_1.derive =
      (f.failure_0_1_1.derive or false) ||
      (f.failure_0_1_1.default or false) ||
      (failure_0_1_1.default or false);
    failure_0_1_1.failure_derive =
      (f.failure_0_1_1.failure_derive or false) ||
      (f.failure_0_1_1.derive or false) ||
      (failure_0_1_1.derive or false);
    failure_0_1_1.std =
      (f.failure_0_1_1.std or false) ||
      (f.failure_0_1_1.default or false) ||
      (failure_0_1_1.default or false);
    failure_derive_0_1_1.default = true;
  }) [ backtrace_0_3_7_features failure_derive_0_1_1_features ];
  failure_derive_0_1_1 = { features?(failure_derive_0_1_1_features {}) }: failure_derive_0_1_1_ {
    dependencies = mapFeatures features ([ quote_0_3_15 syn_0_11_11 synstructure_0_6_1 ]);
    features = mkFeatures (features.failure_derive_0_1_1 or {});
  };
  failure_derive_0_1_1_features = f: updateFeatures f (rec {
    failure_derive_0_1_1.default = (f.failure_derive_0_1_1.default or true);
    failure_derive_0_1_1.std =
      (f.failure_derive_0_1_1.std or false) ||
      (f.failure_derive_0_1_1.default or false) ||
      (failure_derive_0_1_1.default or false);
    quote_0_3_15.default = true;
    syn_0_11_11.default = true;
    synstructure_0_6_1.default = true;
  }) [ quote_0_3_15_features syn_0_11_11_features synstructure_0_6_1_features ];
  filetime_0_1_15 = { features?(filetime_0_1_15_features {}) }: filetime_0_1_15_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_3 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_37 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_40 ]) else []);
  };
  filetime_0_1_15_features = f: updateFeatures f (rec {
    cfg_if_0_1_3.default = true;
    filetime_0_1_15.default = (f.filetime_0_1_15.default or true);
    libc_0_2_40.default = true;
    redox_syscall_0_1_37.default = true;
  }) [ cfg_if_0_1_3_features redox_syscall_0_1_37_features libc_0_2_40_features ];
  filetime_0_2_1 = { features?(filetime_0_2_1_features {}) }: filetime_0_2_1_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_3 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_37 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_40 ]) else []);
  };
  filetime_0_2_1_features = f: updateFeatures f (rec {
    cfg_if_0_1_3.default = true;
    filetime_0_2_1.default = (f.filetime_0_2_1.default or true);
    libc_0_2_40.default = true;
    redox_syscall_0_1_37.default = true;
  }) [ cfg_if_0_1_3_features redox_syscall_0_1_37_features libc_0_2_40_features ];
  flate2_1_0_1 = { features?(flate2_1_0_1_features {}) }: flate2_1_0_1_ {
    dependencies = mapFeatures features ([ libc_0_2_40 ]
      ++ (if features.flate2_1_0_1."miniz-sys" or false then [ miniz_sys_0_1_10 ] else []));
    features = mkFeatures (features.flate2_1_0_1 or {});
  };
  flate2_1_0_1_features = f: updateFeatures f (rec {
    flate2_1_0_1."libz-sys" =
      (f.flate2_1_0_1."libz-sys" or false) ||
      (f.flate2_1_0_1.zlib or false) ||
      (flate2_1_0_1.zlib or false);
    flate2_1_0_1."miniz-sys" =
      (f.flate2_1_0_1."miniz-sys" or false) ||
      (f.flate2_1_0_1.default or false) ||
      (flate2_1_0_1.default or false);
    flate2_1_0_1."tokio-io" =
      (f.flate2_1_0_1."tokio-io" or false) ||
      (f.flate2_1_0_1.tokio or false) ||
      (flate2_1_0_1.tokio or false);
    flate2_1_0_1.default = (f.flate2_1_0_1.default or true);
    flate2_1_0_1.futures =
      (f.flate2_1_0_1.futures or false) ||
      (f.flate2_1_0_1.tokio or false) ||
      (flate2_1_0_1.tokio or false);
    flate2_1_0_1.miniz_oxide_c_api =
      (f.flate2_1_0_1.miniz_oxide_c_api or false) ||
      (f.flate2_1_0_1.rust_backend or false) ||
      (flate2_1_0_1.rust_backend or false);
    libc_0_2_40.default = true;
    miniz_sys_0_1_10.default = true;
  }) [ libc_0_2_40_features miniz_sys_0_1_10_features ];
  fnv_1_0_6 = { features?(fnv_1_0_6_features {}) }: fnv_1_0_6_ {};
  fnv_1_0_6_features = f: updateFeatures f (rec {
    fnv_1_0_6.default = (f.fnv_1_0_6.default or true);
  }) [];
  foreign_types_0_3_2 = { features?(foreign_types_0_3_2_features {}) }: foreign_types_0_3_2_ {
    dependencies = mapFeatures features ([ foreign_types_shared_0_1_1 ]);
  };
  foreign_types_0_3_2_features = f: updateFeatures f (rec {
    foreign_types_0_3_2.default = (f.foreign_types_0_3_2.default or true);
    foreign_types_shared_0_1_1.default = true;
  }) [ foreign_types_shared_0_1_1_features ];
  foreign_types_shared_0_1_1 = { features?(foreign_types_shared_0_1_1_features {}) }: foreign_types_shared_0_1_1_ {};
  foreign_types_shared_0_1_1_features = f: updateFeatures f (rec {
    foreign_types_shared_0_1_1.default = (f.foreign_types_shared_0_1_1.default or true);
  }) [];
  fs2_0_4_3 = { features?(fs2_0_4_3_features {}) }: fs2_0_4_3_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_40 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
  };
  fs2_0_4_3_features = f: updateFeatures f (rec {
    fs2_0_4_3.default = (f.fs2_0_4_3.default or true);
    libc_0_2_40.default = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.fileapi = true;
    winapi_0_3_4.handleapi = true;
    winapi_0_3_4.processthreadsapi = true;
    winapi_0_3_4.std = true;
    winapi_0_3_4.winbase = true;
    winapi_0_3_4.winerror = true;
  }) [ libc_0_2_40_features winapi_0_3_4_features ];
  fuchsia_zircon_0_3_3 = { features?(fuchsia_zircon_0_3_3_features {}) }: fuchsia_zircon_0_3_3_ {
    dependencies = mapFeatures features ([ bitflags_1_0_3 fuchsia_zircon_sys_0_3_3 ]);
  };
  fuchsia_zircon_0_3_3_features = f: updateFeatures f (rec {
    bitflags_1_0_3.default = true;
    fuchsia_zircon_0_3_3.default = (f.fuchsia_zircon_0_3_3.default or true);
    fuchsia_zircon_sys_0_3_3.default = true;
  }) [ bitflags_1_0_3_features fuchsia_zircon_sys_0_3_3_features ];
  fuchsia_zircon_sys_0_3_3 = { features?(fuchsia_zircon_sys_0_3_3_features {}) }: fuchsia_zircon_sys_0_3_3_ {};
  fuchsia_zircon_sys_0_3_3_features = f: updateFeatures f (rec {
    fuchsia_zircon_sys_0_3_3.default = (f.fuchsia_zircon_sys_0_3_3.default or true);
  }) [];
  git2_0_7_1 = { features?(git2_0_7_1_features {}) }: git2_0_7_1_ {
    dependencies = mapFeatures features ([ bitflags_1_0_3 libc_0_2_40 libgit2_sys_0_7_1 log_0_4_1 url_1_7_0 ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.git2_0_7_1."openssl-probe" or false then [ openssl_probe_0_1_2 ] else [])
      ++ (if features.git2_0_7_1."openssl-sys" or false then [ openssl_sys_0_9_30 ] else [])) else []);
    features = mkFeatures (features.git2_0_7_1 or {});
  };
  git2_0_7_1_features = f: updateFeatures f (rec {
    bitflags_1_0_3.default = true;
    git2_0_7_1."openssl-probe" =
      (f.git2_0_7_1."openssl-probe" or false) ||
      (f.git2_0_7_1.https or false) ||
      (git2_0_7_1.https or false);
    git2_0_7_1."openssl-sys" =
      (f.git2_0_7_1."openssl-sys" or false) ||
      (f.git2_0_7_1.https or false) ||
      (git2_0_7_1.https or false);
    git2_0_7_1.curl =
      (f.git2_0_7_1.curl or false) ||
      (f.git2_0_7_1.default or false) ||
      (git2_0_7_1.default or false);
    git2_0_7_1.default = (f.git2_0_7_1.default or true);
    git2_0_7_1.https =
      (f.git2_0_7_1.https or false) ||
      (f.git2_0_7_1.default or false) ||
      (git2_0_7_1.default or false);
    git2_0_7_1.ssh =
      (f.git2_0_7_1.ssh or false) ||
      (f.git2_0_7_1.default or false) ||
      (git2_0_7_1.default or false);
    libc_0_2_40.default = true;
    libgit2_sys_0_7_1.curl =
      (f.libgit2_sys_0_7_1.curl or false) ||
      (git2_0_7_1.curl or false) ||
      (f.git2_0_7_1.curl or false);
    libgit2_sys_0_7_1.default = true;
    libgit2_sys_0_7_1.https =
      (f.libgit2_sys_0_7_1.https or false) ||
      (git2_0_7_1.https or false) ||
      (f.git2_0_7_1.https or false);
    libgit2_sys_0_7_1.ssh =
      (f.libgit2_sys_0_7_1.ssh or false) ||
      (git2_0_7_1.ssh or false) ||
      (f.git2_0_7_1.ssh or false);
    log_0_4_1.default = true;
    openssl_probe_0_1_2.default = true;
    openssl_sys_0_9_30.default = true;
    url_1_7_0.default = true;
  }) [ bitflags_1_0_3_features libc_0_2_40_features libgit2_sys_0_7_1_features log_0_4_1_features url_1_7_0_features openssl_probe_0_1_2_features openssl_sys_0_9_30_features ];
  git2_curl_0_8_1 = { features?(git2_curl_0_8_1_features {}) }: git2_curl_0_8_1_ {
    dependencies = mapFeatures features ([ curl_0_4_12 git2_0_7_1 log_0_4_1 url_1_7_0 ]);
  };
  git2_curl_0_8_1_features = f: updateFeatures f (rec {
    curl_0_4_12.default = true;
    git2_0_7_1.default = (f.git2_0_7_1.default or false);
    git2_curl_0_8_1.default = (f.git2_curl_0_8_1.default or true);
    log_0_4_1.default = true;
    url_1_7_0.default = true;
  }) [ curl_0_4_12_features git2_0_7_1_features log_0_4_1_features url_1_7_0_features ];
  glob_0_2_11 = { features?(glob_0_2_11_features {}) }: glob_0_2_11_ {};
  glob_0_2_11_features = f: updateFeatures f (rec {
    glob_0_2_11.default = (f.glob_0_2_11.default or true);
  }) [];
  globset_0_4_0 = { features?(globset_0_4_0_features {}) }: globset_0_4_0_ {
    dependencies = mapFeatures features ([ aho_corasick_0_6_4 fnv_1_0_6 log_0_4_1 memchr_2_0_1 regex_0_2_11 ]);
    features = mkFeatures (features.globset_0_4_0 or {});
  };
  globset_0_4_0_features = f: updateFeatures f (rec {
    aho_corasick_0_6_4.default = true;
    fnv_1_0_6.default = true;
    globset_0_4_0.default = (f.globset_0_4_0.default or true);
    log_0_4_1.default = true;
    memchr_2_0_1.default = true;
    regex_0_2_11."simd-accel" =
      (f.regex_0_2_11."simd-accel" or false) ||
      (globset_0_4_0."simd-accel" or false) ||
      (f.globset_0_4_0."simd-accel" or false);
    regex_0_2_11.default = true;
  }) [ aho_corasick_0_6_4_features fnv_1_0_6_features log_0_4_1_features memchr_2_0_1_features regex_0_2_11_features ];
  hex_0_3_2 = { features?(hex_0_3_2_features {}) }: hex_0_3_2_ {
    features = mkFeatures (features.hex_0_3_2 or {});
  };
  hex_0_3_2_features = f: updateFeatures f (rec {
    hex_0_3_2.default = (f.hex_0_3_2.default or true);
  }) [];
  home_0_3_3 = { features?(home_0_3_3_features {}) }: home_0_3_3_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ scopeguard_0_3_3 winapi_0_3_4 ]) else []);
  };
  home_0_3_3_features = f: updateFeatures f (rec {
    home_0_3_3.default = (f.home_0_3_3.default or true);
    scopeguard_0_3_3.default = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.errhandlingapi = true;
    winapi_0_3_4.handleapi = true;
    winapi_0_3_4.processthreadsapi = true;
    winapi_0_3_4.std = true;
    winapi_0_3_4.userenv = true;
    winapi_0_3_4.winerror = true;
    winapi_0_3_4.winnt = true;
  }) [ scopeguard_0_3_3_features winapi_0_3_4_features ];
  humantime_1_1_1 = { features?(humantime_1_1_1_features {}) }: humantime_1_1_1_ {
    dependencies = mapFeatures features ([ quick_error_1_2_1 ]);
  };
  humantime_1_1_1_features = f: updateFeatures f (rec {
    humantime_1_1_1.default = (f.humantime_1_1_1.default or true);
    quick_error_1_2_1.default = true;
  }) [ quick_error_1_2_1_features ];
  idna_0_1_4 = { features?(idna_0_1_4_features {}) }: idna_0_1_4_ {
    dependencies = mapFeatures features ([ matches_0_1_6 unicode_bidi_0_3_4 unicode_normalization_0_1_7 ]);
  };
  idna_0_1_4_features = f: updateFeatures f (rec {
    idna_0_1_4.default = (f.idna_0_1_4.default or true);
    matches_0_1_6.default = true;
    unicode_bidi_0_3_4.default = true;
    unicode_normalization_0_1_7.default = true;
  }) [ matches_0_1_6_features unicode_bidi_0_3_4_features unicode_normalization_0_1_7_features ];
  ignore_0_4_2 = { features?(ignore_0_4_2_features {}) }: ignore_0_4_2_ {
    dependencies = mapFeatures features ([ crossbeam_0_3_2 globset_0_4_0 lazy_static_1_0_0 log_0_4_1 memchr_2_0_1 regex_0_2_11 same_file_1_0_2 thread_local_0_3_5 walkdir_2_1_4 ])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
    features = mkFeatures (features.ignore_0_4_2 or {});
  };
  ignore_0_4_2_features = f: updateFeatures f (rec {
    crossbeam_0_3_2.default = true;
    globset_0_4_0."simd-accel" =
      (f.globset_0_4_0."simd-accel" or false) ||
      (ignore_0_4_2."simd-accel" or false) ||
      (f.ignore_0_4_2."simd-accel" or false);
    globset_0_4_0.default = true;
    ignore_0_4_2.default = (f.ignore_0_4_2.default or true);
    lazy_static_1_0_0.default = true;
    log_0_4_1.default = true;
    memchr_2_0_1.default = true;
    regex_0_2_11.default = true;
    same_file_1_0_2.default = true;
    thread_local_0_3_5.default = true;
    walkdir_2_1_4.default = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.std = true;
    winapi_0_3_4.winnt = true;
  }) [ crossbeam_0_3_2_features globset_0_4_0_features lazy_static_1_0_0_features log_0_4_1_features memchr_2_0_1_features regex_0_2_11_features same_file_1_0_2_features thread_local_0_3_5_features walkdir_2_1_4_features winapi_0_3_4_features ];
  itoa_0_4_1 = { features?(itoa_0_4_1_features {}) }: itoa_0_4_1_ {
    features = mkFeatures (features.itoa_0_4_1 or {});
  };
  itoa_0_4_1_features = f: updateFeatures f (rec {
    itoa_0_4_1.default = (f.itoa_0_4_1.default or true);
    itoa_0_4_1.std =
      (f.itoa_0_4_1.std or false) ||
      (f.itoa_0_4_1.default or false) ||
      (itoa_0_4_1.default or false);
  }) [];
  jobserver_0_1_11 = { features?(jobserver_0_1_11_features {}) }: jobserver_0_1_11_ {
    dependencies = mapFeatures features ([ log_0_4_1 ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_40 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ rand_0_4_2 ]) else []);
  };
  jobserver_0_1_11_features = f: updateFeatures f (rec {
    jobserver_0_1_11.default = (f.jobserver_0_1_11.default or true);
    libc_0_2_40.default = true;
    log_0_4_1.default = true;
    rand_0_4_2.default = true;
  }) [ log_0_4_1_features libc_0_2_40_features rand_0_4_2_features ];
  kernel32_sys_0_2_2 = { features?(kernel32_sys_0_2_2_features {}) }: kernel32_sys_0_2_2_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  kernel32_sys_0_2_2_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = (f.kernel32_sys_0_2_2.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  lazy_static_1_0_0 = { features?(lazy_static_1_0_0_features {}) }: lazy_static_1_0_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazy_static_1_0_0 or {});
  };
  lazy_static_1_0_0_features = f: updateFeatures f (rec {
    lazy_static_1_0_0.compiletest_rs =
      (f.lazy_static_1_0_0.compiletest_rs or false) ||
      (f.lazy_static_1_0_0.compiletest or false) ||
      (lazy_static_1_0_0.compiletest or false);
    lazy_static_1_0_0.default = (f.lazy_static_1_0_0.default or true);
    lazy_static_1_0_0.nightly =
      (f.lazy_static_1_0_0.nightly or false) ||
      (f.lazy_static_1_0_0.spin_no_std or false) ||
      (lazy_static_1_0_0.spin_no_std or false);
    lazy_static_1_0_0.spin =
      (f.lazy_static_1_0_0.spin or false) ||
      (f.lazy_static_1_0_0.spin_no_std or false) ||
      (lazy_static_1_0_0.spin_no_std or false);
  }) [];
  lazycell_0_6_0 = { features?(lazycell_0_6_0_features {}) }: lazycell_0_6_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazycell_0_6_0 or {});
  };
  lazycell_0_6_0_features = f: updateFeatures f (rec {
    lazycell_0_6_0.clippy =
      (f.lazycell_0_6_0.clippy or false) ||
      (f.lazycell_0_6_0."nightly-testing" or false) ||
      (lazycell_0_6_0."nightly-testing" or false);
    lazycell_0_6_0.default = (f.lazycell_0_6_0.default or true);
    lazycell_0_6_0.nightly =
      (f.lazycell_0_6_0.nightly or false) ||
      (f.lazycell_0_6_0."nightly-testing" or false) ||
      (lazycell_0_6_0."nightly-testing" or false);
  }) [];
  libc_0_2_40 = { features?(libc_0_2_40_features {}) }: libc_0_2_40_ {
    features = mkFeatures (features.libc_0_2_40 or {});
  };
  libc_0_2_40_features = f: updateFeatures f (rec {
    libc_0_2_40.default = (f.libc_0_2_40.default or true);
    libc_0_2_40.use_std =
      (f.libc_0_2_40.use_std or false) ||
      (f.libc_0_2_40.default or false) ||
      (libc_0_2_40.default or false);
  }) [];
  libgit2_sys_0_7_1 = { features?(libgit2_sys_0_7_1_features {}) }: libgit2_sys_0_7_1_ {
    dependencies = mapFeatures features ([ libc_0_2_40 libz_sys_1_0_18 ]
      ++ (if features.libgit2_sys_0_7_1."curl-sys" or false then [ curl_sys_0_4_5 ] else [])
      ++ (if features.libgit2_sys_0_7_1."libssh2-sys" or false then [ libssh2_sys_0_2_7 ] else []))
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.libgit2_sys_0_7_1."openssl-sys" or false then [ openssl_sys_0_9_30 ] else [])) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_15 cmake_0_1_31 pkg_config_0_3_11 ]);
    features = mkFeatures (features.libgit2_sys_0_7_1 or {});
  };
  libgit2_sys_0_7_1_features = f: updateFeatures f (rec {
    cc_1_0_15.default = true;
    cmake_0_1_31.default = true;
    curl_sys_0_4_5.default = true;
    libc_0_2_40.default = true;
    libgit2_sys_0_7_1."curl-sys" =
      (f.libgit2_sys_0_7_1."curl-sys" or false) ||
      (f.libgit2_sys_0_7_1.curl or false) ||
      (libgit2_sys_0_7_1.curl or false);
    libgit2_sys_0_7_1."libssh2-sys" =
      (f.libgit2_sys_0_7_1."libssh2-sys" or false) ||
      (f.libgit2_sys_0_7_1.ssh or false) ||
      (libgit2_sys_0_7_1.ssh or false);
    libgit2_sys_0_7_1."openssl-sys" =
      (f.libgit2_sys_0_7_1."openssl-sys" or false) ||
      (f.libgit2_sys_0_7_1.https or false) ||
      (libgit2_sys_0_7_1.https or false);
    libgit2_sys_0_7_1.default = (f.libgit2_sys_0_7_1.default or true);
    libssh2_sys_0_2_7.default = true;
    libz_sys_1_0_18.default = true;
    openssl_sys_0_9_30.default = true;
    pkg_config_0_3_11.default = true;
  }) [ curl_sys_0_4_5_features libc_0_2_40_features libssh2_sys_0_2_7_features libz_sys_1_0_18_features cc_1_0_15_features cmake_0_1_31_features pkg_config_0_3_11_features openssl_sys_0_9_30_features ];
  libssh2_sys_0_2_7 = { features?(libssh2_sys_0_2_7_features {}) }: libssh2_sys_0_2_7_ {
    dependencies = mapFeatures features ([ libc_0_2_40 libz_sys_1_0_18 ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ openssl_sys_0_9_30 ]) else []);
    buildDependencies = mapFeatures features ([ cmake_0_1_31 pkg_config_0_3_11 ]);
  };
  libssh2_sys_0_2_7_features = f: updateFeatures f (rec {
    cmake_0_1_31.default = true;
    libc_0_2_40.default = true;
    libssh2_sys_0_2_7.default = (f.libssh2_sys_0_2_7.default or true);
    libz_sys_1_0_18.default = true;
    openssl_sys_0_9_30.default = true;
    pkg_config_0_3_11.default = true;
  }) [ libc_0_2_40_features libz_sys_1_0_18_features cmake_0_1_31_features pkg_config_0_3_11_features openssl_sys_0_9_30_features ];
  libz_sys_1_0_18 = { features?(libz_sys_1_0_18_features {}) }: libz_sys_1_0_18_ {
    dependencies = mapFeatures features ([ libc_0_2_40 ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_15 pkg_config_0_3_11 ]);
  };
  libz_sys_1_0_18_features = f: updateFeatures f (rec {
    cc_1_0_15.default = true;
    libc_0_2_40.default = true;
    libz_sys_1_0_18.default = (f.libz_sys_1_0_18.default or true);
    pkg_config_0_3_11.default = true;
  }) [ libc_0_2_40_features cc_1_0_15_features pkg_config_0_3_11_features ];
  log_0_4_1 = { features?(log_0_4_1_features {}) }: log_0_4_1_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_3 ]);
    features = mkFeatures (features.log_0_4_1 or {});
  };
  log_0_4_1_features = f: updateFeatures f (rec {
    cfg_if_0_1_3.default = true;
    log_0_4_1.default = (f.log_0_4_1.default or true);
  }) [ cfg_if_0_1_3_features ];
  matches_0_1_6 = { features?(matches_0_1_6_features {}) }: matches_0_1_6_ {};
  matches_0_1_6_features = f: updateFeatures f (rec {
    matches_0_1_6.default = (f.matches_0_1_6.default or true);
  }) [];
  memchr_2_0_1 = { features?(memchr_2_0_1_features {}) }: memchr_2_0_1_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.memchr_2_0_1.libc or false then [ libc_0_2_40 ] else []));
    features = mkFeatures (features.memchr_2_0_1 or {});
  };
  memchr_2_0_1_features = f: updateFeatures f (rec {
    libc_0_2_40.default = (f.libc_0_2_40.default or false);
    libc_0_2_40.use_std =
      (f.libc_0_2_40.use_std or false) ||
      (memchr_2_0_1.use_std or false) ||
      (f.memchr_2_0_1.use_std or false);
    memchr_2_0_1.default = (f.memchr_2_0_1.default or true);
    memchr_2_0_1.libc =
      (f.memchr_2_0_1.libc or false) ||
      (f.memchr_2_0_1.default or false) ||
      (memchr_2_0_1.default or false) ||
      (f.memchr_2_0_1.use_std or false) ||
      (memchr_2_0_1.use_std or false);
    memchr_2_0_1.use_std =
      (f.memchr_2_0_1.use_std or false) ||
      (f.memchr_2_0_1.default or false) ||
      (memchr_2_0_1.default or false);
  }) [ libc_0_2_40_features ];
  miniz_sys_0_1_10 = { features?(miniz_sys_0_1_10_features {}) }: miniz_sys_0_1_10_ {
    dependencies = mapFeatures features ([ libc_0_2_40 ]);
    buildDependencies = mapFeatures features ([ cc_1_0_15 ]);
  };
  miniz_sys_0_1_10_features = f: updateFeatures f (rec {
    cc_1_0_15.default = true;
    libc_0_2_40.default = true;
    miniz_sys_0_1_10.default = (f.miniz_sys_0_1_10.default or true);
  }) [ libc_0_2_40_features cc_1_0_15_features ];
  miow_0_3_1 = { features?(miow_0_3_1_features {}) }: miow_0_3_1_ {
    dependencies = mapFeatures features ([ socket2_0_3_5 winapi_0_3_4 ]);
  };
  miow_0_3_1_features = f: updateFeatures f (rec {
    miow_0_3_1.default = (f.miow_0_3_1.default or true);
    socket2_0_3_5.default = true;
    winapi_0_3_4."winsock2" = true;
    winapi_0_3_4."ws2def" = true;
    winapi_0_3_4."ws2ipdef" = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.fileapi = true;
    winapi_0_3_4.handleapi = true;
    winapi_0_3_4.ioapiset = true;
    winapi_0_3_4.minwindef = true;
    winapi_0_3_4.namedpipeapi = true;
    winapi_0_3_4.ntdef = true;
    winapi_0_3_4.std = true;
    winapi_0_3_4.winerror = true;
  }) [ socket2_0_3_5_features winapi_0_3_4_features ];
  num_traits_0_2_4 = { features?(num_traits_0_2_4_features {}) }: num_traits_0_2_4_ {
    features = mkFeatures (features.num_traits_0_2_4 or {});
  };
  num_traits_0_2_4_features = f: updateFeatures f (rec {
    num_traits_0_2_4.default = (f.num_traits_0_2_4.default or true);
    num_traits_0_2_4.std =
      (f.num_traits_0_2_4.std or false) ||
      (f.num_traits_0_2_4.default or false) ||
      (num_traits_0_2_4.default or false);
  }) [];
  num_cpus_1_8_0 = { features?(num_cpus_1_8_0_features {}) }: num_cpus_1_8_0_ {
    dependencies = mapFeatures features ([ libc_0_2_40 ]);
  };
  num_cpus_1_8_0_features = f: updateFeatures f (rec {
    libc_0_2_40.default = true;
    num_cpus_1_8_0.default = (f.num_cpus_1_8_0.default or true);
  }) [ libc_0_2_40_features ];
  openssl_0_10_7 = { features?(openssl_0_10_7_features {}) }: openssl_0_10_7_ {
    dependencies = mapFeatures features ([ bitflags_1_0_3 foreign_types_0_3_2 lazy_static_1_0_0 libc_0_2_40 openssl_sys_0_9_30 ]);
    features = mkFeatures (features.openssl_0_10_7 or {});
  };
  openssl_0_10_7_features = f: updateFeatures f (rec {
    bitflags_1_0_3.default = true;
    foreign_types_0_3_2.default = true;
    lazy_static_1_0_0.default = true;
    libc_0_2_40.default = true;
    openssl_0_10_7.default = (f.openssl_0_10_7.default or true);
    openssl_sys_0_9_30.default = true;
  }) [ bitflags_1_0_3_features foreign_types_0_3_2_features lazy_static_1_0_0_features libc_0_2_40_features openssl_sys_0_9_30_features ];
  openssl_probe_0_1_2 = { features?(openssl_probe_0_1_2_features {}) }: openssl_probe_0_1_2_ {};
  openssl_probe_0_1_2_features = f: updateFeatures f (rec {
    openssl_probe_0_1_2.default = (f.openssl_probe_0_1_2.default or true);
  }) [];
  openssl_sys_0_9_30 = { features?(openssl_sys_0_9_30_features {}) }: openssl_sys_0_9_30_ {
    dependencies = mapFeatures features ([ libc_0_2_40 ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_15 pkg_config_0_3_11 ]);
  };
  openssl_sys_0_9_30_features = f: updateFeatures f (rec {
    cc_1_0_15.default = true;
    libc_0_2_40.default = true;
    openssl_sys_0_9_30.default = (f.openssl_sys_0_9_30.default or true);
    pkg_config_0_3_11.default = true;
  }) [ libc_0_2_40_features cc_1_0_15_features pkg_config_0_3_11_features ];
  percent_encoding_1_0_1 = { features?(percent_encoding_1_0_1_features {}) }: percent_encoding_1_0_1_ {};
  percent_encoding_1_0_1_features = f: updateFeatures f (rec {
    percent_encoding_1_0_1.default = (f.percent_encoding_1_0_1.default or true);
  }) [];
  pkg_config_0_3_11 = { features?(pkg_config_0_3_11_features {}) }: pkg_config_0_3_11_ {};
  pkg_config_0_3_11_features = f: updateFeatures f (rec {
    pkg_config_0_3_11.default = (f.pkg_config_0_3_11.default or true);
  }) [];
  proc_macro2_0_3_8 = { features?(proc_macro2_0_3_8_features {}) }: proc_macro2_0_3_8_ {
    dependencies = mapFeatures features ([ unicode_xid_0_1_0 ]);
    features = mkFeatures (features.proc_macro2_0_3_8 or {});
  };
  proc_macro2_0_3_8_features = f: updateFeatures f (rec {
    proc_macro2_0_3_8."proc-macro" =
      (f.proc_macro2_0_3_8."proc-macro" or false) ||
      (f.proc_macro2_0_3_8.default or false) ||
      (proc_macro2_0_3_8.default or false) ||
      (f.proc_macro2_0_3_8.nightly or false) ||
      (proc_macro2_0_3_8.nightly or false);
    proc_macro2_0_3_8.default = (f.proc_macro2_0_3_8.default or true);
    unicode_xid_0_1_0.default = true;
  }) [ unicode_xid_0_1_0_features ];
  quick_error_1_2_1 = { features?(quick_error_1_2_1_features {}) }: quick_error_1_2_1_ {};
  quick_error_1_2_1_features = f: updateFeatures f (rec {
    quick_error_1_2_1.default = (f.quick_error_1_2_1.default or true);
  }) [];
  quote_0_3_15 = { features?(quote_0_3_15_features {}) }: quote_0_3_15_ {};
  quote_0_3_15_features = f: updateFeatures f (rec {
    quote_0_3_15.default = (f.quote_0_3_15.default or true);
  }) [];
  quote_0_5_2 = { features?(quote_0_5_2_features {}) }: quote_0_5_2_ {
    dependencies = mapFeatures features ([ proc_macro2_0_3_8 ]);
    features = mkFeatures (features.quote_0_5_2 or {});
  };
  quote_0_5_2_features = f: updateFeatures f (rec {
    proc_macro2_0_3_8."proc-macro" =
      (f.proc_macro2_0_3_8."proc-macro" or false) ||
      (quote_0_5_2."proc-macro" or false) ||
      (f.quote_0_5_2."proc-macro" or false);
    proc_macro2_0_3_8.default = (f.proc_macro2_0_3_8.default or false);
    quote_0_5_2."proc-macro" =
      (f.quote_0_5_2."proc-macro" or false) ||
      (f.quote_0_5_2.default or false) ||
      (quote_0_5_2.default or false);
    quote_0_5_2.default = (f.quote_0_5_2.default or true);
  }) [ proc_macro2_0_3_8_features ];
  rand_0_4_2 = { features?(rand_0_4_2_features {}) }: rand_0_4_2_ {
    dependencies = (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_zircon_0_3_3 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.rand_0_4_2.libc or false then [ libc_0_2_40 ] else [])) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
    features = mkFeatures (features.rand_0_4_2 or {});
  };
  rand_0_4_2_features = f: updateFeatures f (rec {
    fuchsia_zircon_0_3_3.default = true;
    libc_0_2_40.default = true;
    rand_0_4_2."i128_support" =
      (f.rand_0_4_2."i128_support" or false) ||
      (f.rand_0_4_2.nightly or false) ||
      (rand_0_4_2.nightly or false);
    rand_0_4_2.default = (f.rand_0_4_2.default or true);
    rand_0_4_2.libc =
      (f.rand_0_4_2.libc or false) ||
      (f.rand_0_4_2.std or false) ||
      (rand_0_4_2.std or false);
    rand_0_4_2.std =
      (f.rand_0_4_2.std or false) ||
      (f.rand_0_4_2.default or false) ||
      (rand_0_4_2.default or false);
    winapi_0_3_4.default = true;
    winapi_0_3_4.minwindef = true;
    winapi_0_3_4.ntsecapi = true;
    winapi_0_3_4.profileapi = true;
    winapi_0_3_4.winnt = true;
  }) [ fuchsia_zircon_0_3_3_features libc_0_2_40_features winapi_0_3_4_features ];
  redox_syscall_0_1_37 = { features?(redox_syscall_0_1_37_features {}) }: redox_syscall_0_1_37_ {};
  redox_syscall_0_1_37_features = f: updateFeatures f (rec {
    redox_syscall_0_1_37.default = (f.redox_syscall_0_1_37.default or true);
  }) [];
  redox_termios_0_1_1 = { features?(redox_termios_0_1_1_features {}) }: redox_termios_0_1_1_ {
    dependencies = mapFeatures features ([ redox_syscall_0_1_37 ]);
  };
  redox_termios_0_1_1_features = f: updateFeatures f (rec {
    redox_syscall_0_1_37.default = true;
    redox_termios_0_1_1.default = (f.redox_termios_0_1_1.default or true);
  }) [ redox_syscall_0_1_37_features ];
  regex_0_2_11 = { features?(regex_0_2_11_features {}) }: regex_0_2_11_ {
    dependencies = mapFeatures features ([ aho_corasick_0_6_4 memchr_2_0_1 regex_syntax_0_5_6 thread_local_0_3_5 utf8_ranges_1_0_0 ]);
    features = mkFeatures (features.regex_0_2_11 or {});
  };
  regex_0_2_11_features = f: updateFeatures f (rec {
    aho_corasick_0_6_4.default = true;
    memchr_2_0_1.default = true;
    regex_0_2_11.default = (f.regex_0_2_11.default or true);
    regex_0_2_11.pattern =
      (f.regex_0_2_11.pattern or false) ||
      (f.regex_0_2_11.unstable or false) ||
      (regex_0_2_11.unstable or false);
    regex_syntax_0_5_6.default = true;
    thread_local_0_3_5.default = true;
    utf8_ranges_1_0_0.default = true;
  }) [ aho_corasick_0_6_4_features memchr_2_0_1_features regex_syntax_0_5_6_features thread_local_0_3_5_features utf8_ranges_1_0_0_features ];
  regex_1_0_0 = { features?(regex_1_0_0_features {}) }: regex_1_0_0_ {
    dependencies = mapFeatures features ([ aho_corasick_0_6_4 memchr_2_0_1 regex_syntax_0_6_0 thread_local_0_3_5 utf8_ranges_1_0_0 ]);
    features = mkFeatures (features.regex_1_0_0 or {});
  };
  regex_1_0_0_features = f: updateFeatures f (rec {
    aho_corasick_0_6_4.default = true;
    memchr_2_0_1.default = true;
    regex_1_0_0.default = (f.regex_1_0_0.default or true);
    regex_1_0_0.pattern =
      (f.regex_1_0_0.pattern or false) ||
      (f.regex_1_0_0.unstable or false) ||
      (regex_1_0_0.unstable or false);
    regex_1_0_0.use_std =
      (f.regex_1_0_0.use_std or false) ||
      (f.regex_1_0_0.default or false) ||
      (regex_1_0_0.default or false);
    regex_syntax_0_6_0.default = true;
    thread_local_0_3_5.default = true;
    utf8_ranges_1_0_0.default = true;
  }) [ aho_corasick_0_6_4_features memchr_2_0_1_features regex_syntax_0_6_0_features thread_local_0_3_5_features utf8_ranges_1_0_0_features ];
  regex_syntax_0_5_6 = { features?(regex_syntax_0_5_6_features {}) }: regex_syntax_0_5_6_ {
    dependencies = mapFeatures features ([ ucd_util_0_1_1 ]);
  };
  regex_syntax_0_5_6_features = f: updateFeatures f (rec {
    regex_syntax_0_5_6.default = (f.regex_syntax_0_5_6.default or true);
    ucd_util_0_1_1.default = true;
  }) [ ucd_util_0_1_1_features ];
  regex_syntax_0_6_0 = { features?(regex_syntax_0_6_0_features {}) }: regex_syntax_0_6_0_ {
    dependencies = mapFeatures features ([ ucd_util_0_1_1 ]);
  };
  regex_syntax_0_6_0_features = f: updateFeatures f (rec {
    regex_syntax_0_6_0.default = (f.regex_syntax_0_6_0.default or true);
    ucd_util_0_1_1.default = true;
  }) [ ucd_util_0_1_1_features ];
  remove_dir_all_0_5_1 = { features?(remove_dir_all_0_5_1_features {}) }: remove_dir_all_0_5_1_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
  };
  remove_dir_all_0_5_1_features = f: updateFeatures f (rec {
    remove_dir_all_0_5_1.default = (f.remove_dir_all_0_5_1.default or true);
    winapi_0_3_4.default = true;
    winapi_0_3_4.errhandlingapi = true;
    winapi_0_3_4.fileapi = true;
    winapi_0_3_4.std = true;
    winapi_0_3_4.winbase = true;
    winapi_0_3_4.winerror = true;
  }) [ winapi_0_3_4_features ];
  rustc_demangle_0_1_8 = { features?(rustc_demangle_0_1_8_features {}) }: rustc_demangle_0_1_8_ {};
  rustc_demangle_0_1_8_features = f: updateFeatures f (rec {
    rustc_demangle_0_1_8.default = (f.rustc_demangle_0_1_8.default or true);
  }) [];
  same_file_1_0_2 = { features?(same_file_1_0_2_features {}) }: same_file_1_0_2_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
  };
  same_file_1_0_2_features = f: updateFeatures f (rec {
    same_file_1_0_2.default = (f.same_file_1_0_2.default or true);
    winapi_0_3_4.default = true;
    winapi_0_3_4.fileapi = true;
    winapi_0_3_4.minwindef = true;
    winapi_0_3_4.processenv = true;
    winapi_0_3_4.std = true;
    winapi_0_3_4.winbase = true;
  }) [ winapi_0_3_4_features ];
  schannel_0_1_12 = { features?(schannel_0_1_12_features {}) }: schannel_0_1_12_ {
    dependencies = mapFeatures features ([ lazy_static_1_0_0 winapi_0_3_4 ]);
  };
  schannel_0_1_12_features = f: updateFeatures f (rec {
    lazy_static_1_0_0.default = true;
    schannel_0_1_12.default = (f.schannel_0_1_12.default or true);
    winapi_0_3_4.default = true;
    winapi_0_3_4.lmcons = true;
    winapi_0_3_4.minschannel = true;
    winapi_0_3_4.schannel = true;
    winapi_0_3_4.securitybaseapi = true;
    winapi_0_3_4.sysinfoapi = true;
    winapi_0_3_4.timezoneapi = true;
    winapi_0_3_4.winbase = true;
    winapi_0_3_4.wincrypt = true;
    winapi_0_3_4.winerror = true;
  }) [ lazy_static_1_0_0_features winapi_0_3_4_features ];
  scopeguard_0_3_3 = { features?(scopeguard_0_3_3_features {}) }: scopeguard_0_3_3_ {
    features = mkFeatures (features.scopeguard_0_3_3 or {});
  };
  scopeguard_0_3_3_features = f: updateFeatures f (rec {
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or true);
    scopeguard_0_3_3.use_std =
      (f.scopeguard_0_3_3.use_std or false) ||
      (f.scopeguard_0_3_3.default or false) ||
      (scopeguard_0_3_3.default or false);
  }) [];
  semver_0_9_0 = { features?(semver_0_9_0_features {}) }: semver_0_9_0_ {
    dependencies = mapFeatures features ([ semver_parser_0_7_0 ]
      ++ (if features.semver_0_9_0.serde or false then [ serde_1_0_56 ] else []));
    features = mkFeatures (features.semver_0_9_0 or {});
  };
  semver_0_9_0_features = f: updateFeatures f (rec {
    semver_0_9_0.default = (f.semver_0_9_0.default or true);
    semver_0_9_0.serde =
      (f.semver_0_9_0.serde or false) ||
      (f.semver_0_9_0.ci or false) ||
      (semver_0_9_0.ci or false);
    semver_parser_0_7_0.default = true;
    serde_1_0_56.default = true;
  }) [ semver_parser_0_7_0_features serde_1_0_56_features ];
  semver_parser_0_7_0 = { features?(semver_parser_0_7_0_features {}) }: semver_parser_0_7_0_ {};
  semver_parser_0_7_0_features = f: updateFeatures f (rec {
    semver_parser_0_7_0.default = (f.semver_parser_0_7_0.default or true);
  }) [];
  serde_1_0_56 = { features?(serde_1_0_56_features {}) }: serde_1_0_56_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.serde_1_0_56 or {});
  };
  serde_1_0_56_features = f: updateFeatures f (rec {
    serde_1_0_56.default = (f.serde_1_0_56.default or true);
    serde_1_0_56.serde_derive =
      (f.serde_1_0_56.serde_derive or false) ||
      (f.serde_1_0_56.derive or false) ||
      (serde_1_0_56.derive or false);
    serde_1_0_56.std =
      (f.serde_1_0_56.std or false) ||
      (f.serde_1_0_56.default or false) ||
      (serde_1_0_56.default or false);
    serde_1_0_56.unstable =
      (f.serde_1_0_56.unstable or false) ||
      (f.serde_1_0_56.alloc or false) ||
      (serde_1_0_56.alloc or false);
  }) [];
  serde_derive_1_0_56 = { features?(serde_derive_1_0_56_features {}) }: serde_derive_1_0_56_ {
    dependencies = mapFeatures features ([ proc_macro2_0_3_8 quote_0_5_2 syn_0_13_10 ]);
    features = mkFeatures (features.serde_derive_1_0_56 or {});
  };
  serde_derive_1_0_56_features = f: updateFeatures f (rec {
    proc_macro2_0_3_8.default = true;
    quote_0_5_2.default = true;
    serde_derive_1_0_56.default = (f.serde_derive_1_0_56.default or true);
    syn_0_13_10.default = true;
    syn_0_13_10.visit = true;
  }) [ proc_macro2_0_3_8_features quote_0_5_2_features syn_0_13_10_features ];
  serde_ignored_0_0_4 = { features?(serde_ignored_0_0_4_features {}) }: serde_ignored_0_0_4_ {
    dependencies = mapFeatures features ([ serde_1_0_56 ]);
  };
  serde_ignored_0_0_4_features = f: updateFeatures f (rec {
    serde_1_0_56.default = true;
    serde_ignored_0_0_4.default = (f.serde_ignored_0_0_4.default or true);
  }) [ serde_1_0_56_features ];
  serde_json_1_0_17 = { features?(serde_json_1_0_17_features {}) }: serde_json_1_0_17_ {
    dependencies = mapFeatures features ([ dtoa_0_4_2 itoa_0_4_1 serde_1_0_56 ]);
    features = mkFeatures (features.serde_json_1_0_17 or {});
  };
  serde_json_1_0_17_features = f: updateFeatures f (rec {
    dtoa_0_4_2.default = true;
    itoa_0_4_1.default = true;
    serde_1_0_56.default = true;
    serde_json_1_0_17."linked-hash-map" =
      (f.serde_json_1_0_17."linked-hash-map" or false) ||
      (f.serde_json_1_0_17.preserve_order or false) ||
      (serde_json_1_0_17.preserve_order or false);
    serde_json_1_0_17.default = (f.serde_json_1_0_17.default or true);
  }) [ dtoa_0_4_2_features itoa_0_4_1_features serde_1_0_56_features ];
  shell_escape_0_1_4 = { features?(shell_escape_0_1_4_features {}) }: shell_escape_0_1_4_ {};
  shell_escape_0_1_4_features = f: updateFeatures f (rec {
    shell_escape_0_1_4.default = (f.shell_escape_0_1_4.default or true);
  }) [];
  socket2_0_3_5 = { features?(socket2_0_3_5_features {}) }: socket2_0_3_5_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ cfg_if_0_1_3 libc_0_2_40 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
    features = mkFeatures (features.socket2_0_3_5 or {});
  };
  socket2_0_3_5_features = f: updateFeatures f (rec {
    cfg_if_0_1_3.default = true;
    libc_0_2_40.default = true;
    socket2_0_3_5.default = (f.socket2_0_3_5.default or true);
    winapi_0_3_4."ws2def" = true;
    winapi_0_3_4."ws2ipdef" = true;
    winapi_0_3_4."ws2tcpip" = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.handleapi = true;
    winapi_0_3_4.minwindef = true;
  }) [ cfg_if_0_1_3_features libc_0_2_40_features winapi_0_3_4_features ];
  strsim_0_7_0 = { features?(strsim_0_7_0_features {}) }: strsim_0_7_0_ {};
  strsim_0_7_0_features = f: updateFeatures f (rec {
    strsim_0_7_0.default = (f.strsim_0_7_0.default or true);
  }) [];
  syn_0_11_11 = { features?(syn_0_11_11_features {}) }: syn_0_11_11_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.syn_0_11_11.quote or false then [ quote_0_3_15 ] else [])
      ++ (if features.syn_0_11_11.synom or false then [ synom_0_11_3 ] else [])
      ++ (if features.syn_0_11_11."unicode-xid" or false then [ unicode_xid_0_0_4 ] else []));
    features = mkFeatures (features.syn_0_11_11 or {});
  };
  syn_0_11_11_features = f: updateFeatures f (rec {
    quote_0_3_15.default = true;
    syn_0_11_11."unicode-xid" =
      (f.syn_0_11_11."unicode-xid" or false) ||
      (f.syn_0_11_11.parsing or false) ||
      (syn_0_11_11.parsing or false);
    syn_0_11_11.default = (f.syn_0_11_11.default or true);
    syn_0_11_11.parsing =
      (f.syn_0_11_11.parsing or false) ||
      (f.syn_0_11_11.default or false) ||
      (syn_0_11_11.default or false);
    syn_0_11_11.printing =
      (f.syn_0_11_11.printing or false) ||
      (f.syn_0_11_11.default or false) ||
      (syn_0_11_11.default or false);
    syn_0_11_11.quote =
      (f.syn_0_11_11.quote or false) ||
      (f.syn_0_11_11.printing or false) ||
      (syn_0_11_11.printing or false);
    syn_0_11_11.synom =
      (f.syn_0_11_11.synom or false) ||
      (f.syn_0_11_11.parsing or false) ||
      (syn_0_11_11.parsing or false);
    synom_0_11_3.default = true;
    unicode_xid_0_0_4.default = true;
  }) [ quote_0_3_15_features synom_0_11_3_features unicode_xid_0_0_4_features ];
  syn_0_13_10 = { features?(syn_0_13_10_features {}) }: syn_0_13_10_ {
    dependencies = mapFeatures features ([ proc_macro2_0_3_8 unicode_xid_0_1_0 ]
      ++ (if features.syn_0_13_10.quote or false then [ quote_0_5_2 ] else []));
    features = mkFeatures (features.syn_0_13_10 or {});
  };
  syn_0_13_10_features = f: updateFeatures f (rec {
    proc_macro2_0_3_8."proc-macro" =
      (f.proc_macro2_0_3_8."proc-macro" or false) ||
      (syn_0_13_10."proc-macro" or false) ||
      (f.syn_0_13_10."proc-macro" or false);
    proc_macro2_0_3_8.default = (f.proc_macro2_0_3_8.default or false);
    quote_0_5_2."proc-macro" =
      (f.quote_0_5_2."proc-macro" or false) ||
      (syn_0_13_10."proc-macro" or false) ||
      (f.syn_0_13_10."proc-macro" or false);
    quote_0_5_2.default = (f.quote_0_5_2.default or false);
    syn_0_13_10."clone-impls" =
      (f.syn_0_13_10."clone-impls" or false) ||
      (f.syn_0_13_10.default or false) ||
      (syn_0_13_10.default or false);
    syn_0_13_10."proc-macro" =
      (f.syn_0_13_10."proc-macro" or false) ||
      (f.syn_0_13_10.default or false) ||
      (syn_0_13_10.default or false);
    syn_0_13_10.default = (f.syn_0_13_10.default or true);
    syn_0_13_10.derive =
      (f.syn_0_13_10.derive or false) ||
      (f.syn_0_13_10.default or false) ||
      (syn_0_13_10.default or false);
    syn_0_13_10.parsing =
      (f.syn_0_13_10.parsing or false) ||
      (f.syn_0_13_10.default or false) ||
      (syn_0_13_10.default or false);
    syn_0_13_10.printing =
      (f.syn_0_13_10.printing or false) ||
      (f.syn_0_13_10.default or false) ||
      (syn_0_13_10.default or false);
    syn_0_13_10.quote =
      (f.syn_0_13_10.quote or false) ||
      (f.syn_0_13_10.printing or false) ||
      (syn_0_13_10.printing or false);
    unicode_xid_0_1_0.default = true;
  }) [ proc_macro2_0_3_8_features quote_0_5_2_features unicode_xid_0_1_0_features ];
  synom_0_11_3 = { features?(synom_0_11_3_features {}) }: synom_0_11_3_ {
    dependencies = mapFeatures features ([ unicode_xid_0_0_4 ]);
  };
  synom_0_11_3_features = f: updateFeatures f (rec {
    synom_0_11_3.default = (f.synom_0_11_3.default or true);
    unicode_xid_0_0_4.default = true;
  }) [ unicode_xid_0_0_4_features ];
  synstructure_0_6_1 = { features?(synstructure_0_6_1_features {}) }: synstructure_0_6_1_ {
    dependencies = mapFeatures features ([ quote_0_3_15 syn_0_11_11 ]);
    features = mkFeatures (features.synstructure_0_6_1 or {});
  };
  synstructure_0_6_1_features = f: updateFeatures f (rec {
    quote_0_3_15.default = true;
    syn_0_11_11.default = true;
    syn_0_11_11.visit = true;
    synstructure_0_6_1.default = (f.synstructure_0_6_1.default or true);
  }) [ quote_0_3_15_features syn_0_11_11_features ];
  tar_0_4_15 = { features?(tar_0_4_15_features {}) }: tar_0_4_15_ {
    dependencies = mapFeatures features ([ filetime_0_2_1 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_37 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_40 ]) else []);
  };
  tar_0_4_15_features = f: updateFeatures f (rec {
    filetime_0_2_1.default = true;
    libc_0_2_40.default = true;
    redox_syscall_0_1_37.default = true;
    tar_0_4_15.default = (f.tar_0_4_15.default or true);
    tar_0_4_15.xattr =
      (f.tar_0_4_15.xattr or false) ||
      (f.tar_0_4_15.default or false) ||
      (tar_0_4_15.default or false);
  }) [ filetime_0_2_1_features redox_syscall_0_1_37_features libc_0_2_40_features ];
  tempfile_3_0_2 = { features?(tempfile_3_0_2_features {}) }: tempfile_3_0_2_ {
    dependencies = mapFeatures features ([ rand_0_4_2 remove_dir_all_0_5_1 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_37 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_40 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
  };
  tempfile_3_0_2_features = f: updateFeatures f (rec {
    libc_0_2_40.default = true;
    rand_0_4_2.default = true;
    redox_syscall_0_1_37.default = true;
    remove_dir_all_0_5_1.default = true;
    tempfile_3_0_2.default = (f.tempfile_3_0_2.default or true);
    winapi_0_3_4.default = true;
    winapi_0_3_4.fileapi = true;
    winapi_0_3_4.handleapi = true;
    winapi_0_3_4.winbase = true;
  }) [ rand_0_4_2_features remove_dir_all_0_5_1_features redox_syscall_0_1_37_features libc_0_2_40_features winapi_0_3_4_features ];
  termcolor_0_3_6 = { features?(termcolor_0_3_6_features {}) }: termcolor_0_3_6_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ wincolor_0_1_6 ]) else []);
  };
  termcolor_0_3_6_features = f: updateFeatures f (rec {
    termcolor_0_3_6.default = (f.termcolor_0_3_6.default or true);
    wincolor_0_1_6.default = true;
  }) [ wincolor_0_1_6_features ];
  termion_1_5_1 = { features?(termion_1_5_1_features {}) }: termion_1_5_1_ {
    dependencies = (if !(kernel == "redox") then mapFeatures features ([ libc_0_2_40 ]) else [])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_37 redox_termios_0_1_1 ]) else []);
  };
  termion_1_5_1_features = f: updateFeatures f (rec {
    libc_0_2_40.default = true;
    redox_syscall_0_1_37.default = true;
    redox_termios_0_1_1.default = true;
    termion_1_5_1.default = (f.termion_1_5_1.default or true);
  }) [ libc_0_2_40_features redox_syscall_0_1_37_features redox_termios_0_1_1_features ];
  textwrap_0_9_0 = { features?(textwrap_0_9_0_features {}) }: textwrap_0_9_0_ {
    dependencies = mapFeatures features ([ unicode_width_0_1_4 ]);
  };
  textwrap_0_9_0_features = f: updateFeatures f (rec {
    textwrap_0_9_0.default = (f.textwrap_0_9_0.default or true);
    unicode_width_0_1_4.default = true;
  }) [ unicode_width_0_1_4_features ];
  thread_local_0_3_5 = { features?(thread_local_0_3_5_features {}) }: thread_local_0_3_5_ {
    dependencies = mapFeatures features ([ lazy_static_1_0_0 unreachable_1_0_0 ]);
  };
  thread_local_0_3_5_features = f: updateFeatures f (rec {
    lazy_static_1_0_0.default = true;
    thread_local_0_3_5.default = (f.thread_local_0_3_5.default or true);
    unreachable_1_0_0.default = true;
  }) [ lazy_static_1_0_0_features unreachable_1_0_0_features ];
  toml_0_4_6 = { features?(toml_0_4_6_features {}) }: toml_0_4_6_ {
    dependencies = mapFeatures features ([ serde_1_0_56 ]);
  };
  toml_0_4_6_features = f: updateFeatures f (rec {
    serde_1_0_56.default = true;
    toml_0_4_6.default = (f.toml_0_4_6.default or true);
  }) [ serde_1_0_56_features ];
  ucd_util_0_1_1 = { features?(ucd_util_0_1_1_features {}) }: ucd_util_0_1_1_ {};
  ucd_util_0_1_1_features = f: updateFeatures f (rec {
    ucd_util_0_1_1.default = (f.ucd_util_0_1_1.default or true);
  }) [];
  unicode_bidi_0_3_4 = { features?(unicode_bidi_0_3_4_features {}) }: unicode_bidi_0_3_4_ {
    dependencies = mapFeatures features ([ matches_0_1_6 ]);
    features = mkFeatures (features.unicode_bidi_0_3_4 or {});
  };
  unicode_bidi_0_3_4_features = f: updateFeatures f (rec {
    matches_0_1_6.default = true;
    unicode_bidi_0_3_4.default = (f.unicode_bidi_0_3_4.default or true);
    unicode_bidi_0_3_4.flame =
      (f.unicode_bidi_0_3_4.flame or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.flamer =
      (f.unicode_bidi_0_3_4.flamer or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.serde =
      (f.unicode_bidi_0_3_4.serde or false) ||
      (f.unicode_bidi_0_3_4.with_serde or false) ||
      (unicode_bidi_0_3_4.with_serde or false);
  }) [ matches_0_1_6_features ];
  unicode_normalization_0_1_7 = { features?(unicode_normalization_0_1_7_features {}) }: unicode_normalization_0_1_7_ {};
  unicode_normalization_0_1_7_features = f: updateFeatures f (rec {
    unicode_normalization_0_1_7.default = (f.unicode_normalization_0_1_7.default or true);
  }) [];
  unicode_width_0_1_4 = { features?(unicode_width_0_1_4_features {}) }: unicode_width_0_1_4_ {
    features = mkFeatures (features.unicode_width_0_1_4 or {});
  };
  unicode_width_0_1_4_features = f: updateFeatures f (rec {
    unicode_width_0_1_4.default = (f.unicode_width_0_1_4.default or true);
  }) [];
  unicode_xid_0_0_4 = { features?(unicode_xid_0_0_4_features {}) }: unicode_xid_0_0_4_ {
    features = mkFeatures (features.unicode_xid_0_0_4 or {});
  };
  unicode_xid_0_0_4_features = f: updateFeatures f (rec {
    unicode_xid_0_0_4.default = (f.unicode_xid_0_0_4.default or true);
  }) [];
  unicode_xid_0_1_0 = { features?(unicode_xid_0_1_0_features {}) }: unicode_xid_0_1_0_ {
    features = mkFeatures (features.unicode_xid_0_1_0 or {});
  };
  unicode_xid_0_1_0_features = f: updateFeatures f (rec {
    unicode_xid_0_1_0.default = (f.unicode_xid_0_1_0.default or true);
  }) [];
  unreachable_1_0_0 = { features?(unreachable_1_0_0_features {}) }: unreachable_1_0_0_ {
    dependencies = mapFeatures features ([ void_1_0_2 ]);
  };
  unreachable_1_0_0_features = f: updateFeatures f (rec {
    unreachable_1_0_0.default = (f.unreachable_1_0_0.default or true);
    void_1_0_2.default = (f.void_1_0_2.default or false);
  }) [ void_1_0_2_features ];
  url_1_7_0 = { features?(url_1_7_0_features {}) }: url_1_7_0_ {
    dependencies = mapFeatures features ([ idna_0_1_4 matches_0_1_6 percent_encoding_1_0_1 ]);
    features = mkFeatures (features.url_1_7_0 or {});
  };
  url_1_7_0_features = f: updateFeatures f (rec {
    idna_0_1_4.default = true;
    matches_0_1_6.default = true;
    percent_encoding_1_0_1.default = true;
    url_1_7_0.default = (f.url_1_7_0.default or true);
    url_1_7_0.encoding =
      (f.url_1_7_0.encoding or false) ||
      (f.url_1_7_0.query_encoding or false) ||
      (url_1_7_0.query_encoding or false);
    url_1_7_0.heapsize =
      (f.url_1_7_0.heapsize or false) ||
      (f.url_1_7_0.heap_size or false) ||
      (url_1_7_0.heap_size or false);
  }) [ idna_0_1_4_features matches_0_1_6_features percent_encoding_1_0_1_features ];
  utf8_ranges_1_0_0 = { features?(utf8_ranges_1_0_0_features {}) }: utf8_ranges_1_0_0_ {};
  utf8_ranges_1_0_0_features = f: updateFeatures f (rec {
    utf8_ranges_1_0_0.default = (f.utf8_ranges_1_0_0.default or true);
  }) [];
  vcpkg_0_2_3 = { features?(vcpkg_0_2_3_features {}) }: vcpkg_0_2_3_ {};
  vcpkg_0_2_3_features = f: updateFeatures f (rec {
    vcpkg_0_2_3.default = (f.vcpkg_0_2_3.default or true);
  }) [];
  vec_map_0_8_1 = { features?(vec_map_0_8_1_features {}) }: vec_map_0_8_1_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.vec_map_0_8_1 or {});
  };
  vec_map_0_8_1_features = f: updateFeatures f (rec {
    vec_map_0_8_1.default = (f.vec_map_0_8_1.default or true);
    vec_map_0_8_1.serde =
      (f.vec_map_0_8_1.serde or false) ||
      (f.vec_map_0_8_1.eders or false) ||
      (vec_map_0_8_1.eders or false);
  }) [];
  void_1_0_2 = { features?(void_1_0_2_features {}) }: void_1_0_2_ {
    features = mkFeatures (features.void_1_0_2 or {});
  };
  void_1_0_2_features = f: updateFeatures f (rec {
    void_1_0_2.default = (f.void_1_0_2.default or true);
    void_1_0_2.std =
      (f.void_1_0_2.std or false) ||
      (f.void_1_0_2.default or false) ||
      (void_1_0_2.default or false);
  }) [];
  walkdir_2_1_4 = { features?(walkdir_2_1_4_features {}) }: walkdir_2_1_4_ {
    dependencies = mapFeatures features ([ same_file_1_0_2 ])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_4 ]) else []);
  };
  walkdir_2_1_4_features = f: updateFeatures f (rec {
    same_file_1_0_2.default = true;
    walkdir_2_1_4.default = (f.walkdir_2_1_4.default or true);
    winapi_0_3_4.default = true;
    winapi_0_3_4.std = true;
    winapi_0_3_4.winnt = true;
  }) [ same_file_1_0_2_features winapi_0_3_4_features ];
  winapi_0_2_8 = { features?(winapi_0_2_8_features {}) }: winapi_0_2_8_ {};
  winapi_0_2_8_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = (f.winapi_0_2_8.default or true);
  }) [];
  winapi_0_3_4 = { features?(winapi_0_3_4_features {}) }: winapi_0_3_4_ {
    dependencies = (if kernel == "i686-pc-windows-gnu" then mapFeatures features ([ winapi_i686_pc_windows_gnu_0_4_0 ]) else [])
      ++ (if kernel == "x86_64-pc-windows-gnu" then mapFeatures features ([ winapi_x86_64_pc_windows_gnu_0_4_0 ]) else []);
    features = mkFeatures (features.winapi_0_3_4 or {});
  };
  winapi_0_3_4_features = f: updateFeatures f (rec {
    winapi_0_3_4.default = (f.winapi_0_3_4.default or true);
    winapi_i686_pc_windows_gnu_0_4_0.default = true;
    winapi_x86_64_pc_windows_gnu_0_4_0.default = true;
  }) [ winapi_i686_pc_windows_gnu_0_4_0_features winapi_x86_64_pc_windows_gnu_0_4_0_features ];
  winapi_build_0_1_1 = { features?(winapi_build_0_1_1_features {}) }: winapi_build_0_1_1_ {};
  winapi_build_0_1_1_features = f: updateFeatures f (rec {
    winapi_build_0_1_1.default = (f.winapi_build_0_1_1.default or true);
  }) [];
  winapi_i686_pc_windows_gnu_0_4_0 = { features?(winapi_i686_pc_windows_gnu_0_4_0_features {}) }: winapi_i686_pc_windows_gnu_0_4_0_ {};
  winapi_i686_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_i686_pc_windows_gnu_0_4_0.default = (f.winapi_i686_pc_windows_gnu_0_4_0.default or true);
  }) [];
  winapi_x86_64_pc_windows_gnu_0_4_0 = { features?(winapi_x86_64_pc_windows_gnu_0_4_0_features {}) }: winapi_x86_64_pc_windows_gnu_0_4_0_ {};
  winapi_x86_64_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_x86_64_pc_windows_gnu_0_4_0.default = (f.winapi_x86_64_pc_windows_gnu_0_4_0.default or true);
  }) [];
  wincolor_0_1_6 = { features?(wincolor_0_1_6_features {}) }: wincolor_0_1_6_ {
    dependencies = mapFeatures features ([ winapi_0_3_4 ]);
  };
  wincolor_0_1_6_features = f: updateFeatures f (rec {
    winapi_0_3_4.consoleapi = true;
    winapi_0_3_4.default = true;
    winapi_0_3_4.minwindef = true;
    winapi_0_3_4.processenv = true;
    winapi_0_3_4.winbase = true;
    winapi_0_3_4.wincon = true;
    wincolor_0_1_6.default = (f.wincolor_0_1_6.default or true);
  }) [ winapi_0_3_4_features ];
}
