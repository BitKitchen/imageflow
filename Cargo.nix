# Generated by carnix 0.7.2: /home/rin/Code/carnix2/target/debug/carnix nix --src .
{ lib, buildPlatform, buildRustCrate, fetchgit, buildRustCrateHelpers }:
with buildRustCrateHelpers;
let inherit (lib.lists) fold;
    inherit (lib.attrsets) recursiveUpdate;
in
let cratesIO = rec {
  crates.adler32."1.0.2" = deps: { features?(features_.adler32."1.0.2" deps {}) }: buildRustCrate {
    crateName = "adler32";
    version = "1.0.2";
    authors = [ "Remi Rampin <remirampin@gmail.com>" ];
    sha256 = "1974q3nysai026zhz24df506cxwi09jdzqksll4h7ibpb5n9g1d4";
  };
  features_.adler32."1.0.2" = deps: f: updateFeatures f (rec {
    adler32 = { "1.0.2".default = (f.adler32."1.0.2".default or true); };
  }) [];


  crates.aho_corasick."0.6.4" = deps: { features?(features_.aho_corasick."0.6.4" deps {}) }: buildRustCrate {
    crateName = "aho-corasick";
    version = "0.6.4";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "189v919mp6rzzgjp1khpn4zlq8ls81gh43x1lmc8kbkagdlpq888";
    libName = "aho_corasick";
    crateBin = [ {  name = "aho-corasick-dot"; } ];
    dependencies = mapFeatures features ([ (crates."memchr"."${deps."aho_corasick"."0.6.4"."memchr"}" deps) ]);
  };
  features_.aho_corasick."0.6.4" = deps: f: updateFeatures f (rec {
    aho_corasick = { "0.6.4".default = (f.aho_corasick."0.6.4".default or true); };
    memchr = { "${deps.aho_corasick."0.6.4".memchr}".default = true; };
  }) [ (features_.memchr."${deps."aho_corasick"."0.6.4"."memchr"}" deps) ];


  crates.ansi_term."0.11.0" = deps: { features?(features_.ansi_term."0.11.0" deps {}) }: buildRustCrate {
    crateName = "ansi_term";
    version = "0.11.0";
    authors = [ "ogham@bsago.me" "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>" "Josh Triplett <josh@joshtriplett.org>" ];
    sha256 = "08fk0p2xvkqpmz3zlrwnf6l8sj2vngw464rvzspzp31sbgxbwm4v";
    dependencies = (if kernel == "windows" then mapFeatures features ([ (crates."winapi"."${deps."ansi_term"."0.11.0"."winapi"}" deps) ]) else []);
  };
  features_.ansi_term."0.11.0" = deps: f: updateFeatures f (rec {
    ansi_term = { "0.11.0".default = (f.ansi_term."0.11.0".default or true); };
    winapi = fold recursiveUpdate {} [
      { "${deps.ansi_term."0.11.0".winapi}"."consoleapi" = true; }
      { "${deps.ansi_term."0.11.0".winapi}"."errhandlingapi" = true; }
      { "${deps.ansi_term."0.11.0".winapi}"."processenv" = true; }
      { "${deps.ansi_term."0.11.0".winapi}".default = true; }
    ];
  }) [ (features_.winapi."${deps."ansi_term"."0.11.0"."winapi"}" deps) ];


  crates.antidote."1.0.0" = deps: { features?(features_.antidote."1.0.0" deps {}) }: buildRustCrate {
    crateName = "antidote";
    version = "1.0.0";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1x2wgaw603jcjwsfvc8s2rpaqjv0aqj8mvws2ahhkvfnwkdf7icw";
  };
  features_.antidote."1.0.0" = deps: f: updateFeatures f (rec {
    antidote = { "1.0.0".default = (f.antidote."1.0.0".default or true); };
  }) [];


  crates.app_dirs."1.2.1" = deps: { features?(features_.app_dirs."1.2.1" deps {}) }: buildRustCrate {
    crateName = "app_dirs";
    version = "1.2.1";
    authors = [ "Andy Barron <AndrewLBarron@gmail.com>" ];
    sha256 = "0hmbrnkj94zgzrk016i42a5wz13dd2hnf499jx0fw922s8acc40a";
    dependencies = (if (kernel == "linux" || kernel == "darwin") && !(kernel == "darwin") then mapFeatures features ([ (crates."xdg"."${deps."app_dirs"."1.2.1"."xdg"}" deps) ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ (crates."ole32_sys"."${deps."app_dirs"."1.2.1"."ole32_sys"}" deps) (crates."shell32_sys"."${deps."app_dirs"."1.2.1"."shell32_sys"}" deps) (crates."winapi"."${deps."app_dirs"."1.2.1"."winapi"}" deps) ]) else []);
  };
  features_.app_dirs."1.2.1" = deps: f: updateFeatures f (rec {
    app_dirs = { "1.2.1".default = (f.app_dirs."1.2.1".default or true); };
    ole32_sys = { "${deps.app_dirs."1.2.1".ole32_sys}".default = true; };
    shell32_sys = { "${deps.app_dirs."1.2.1".shell32_sys}".default = true; };
    winapi = { "${deps.app_dirs."1.2.1".winapi}".default = true; };
    xdg = { "${deps.app_dirs."1.2.1".xdg}".default = true; };
  }) [ (features_.xdg."${deps."app_dirs"."1.2.1"."xdg"}" deps)
       (features_.ole32_sys."${deps."app_dirs"."1.2.1"."ole32_sys"}" deps)
       (features_.shell32_sys."${deps."app_dirs"."1.2.1"."shell32_sys"}" deps)
       (features_.winapi."${deps."app_dirs"."1.2.1"."winapi"}" deps) ];


  crates.arrayref."0.3.4" = deps: { features?(features_.arrayref."0.3.4" deps {}) }: buildRustCrate {
    crateName = "arrayref";
    version = "0.3.4";
    authors = [ "David Roundy <roundyd@physics.oregonstate.edu>" ];
    sha256 = "1sy70y5kg4j0r2kqv25nwvlcpgjyziznsa4kq89vjsy51blv57gj";
  };
  features_.arrayref."0.3.4" = deps: f: updateFeatures f (rec {
    arrayref = { "0.3.4".default = (f.arrayref."0.3.4".default or true); };
  }) [];


  crates.arrayvec."0.4.7" = deps: { features?(features_.arrayvec."0.4.7" deps {}) }: buildRustCrate {
    crateName = "arrayvec";
    version = "0.4.7";
    authors = [ "bluss" ];
    sha256 = "0fzgv7z1x1qnyd7j32vdcadk4k9wfx897y06mr3bw1yi52iqf4z4";
    dependencies = mapFeatures features ([ (crates."nodrop"."${deps."arrayvec"."0.4.7"."nodrop"}" deps) ]);
    features = mkFeatures (features.arrayvec."0.4.7" or {});
  };
  features_.arrayvec."0.4.7" = deps: f: updateFeatures f (rec {
    arrayvec = fold recursiveUpdate {} [
      { "0.4.7".default = (f.arrayvec."0.4.7".default or true); }
      { "0.4.7".serde =
        (f.arrayvec."0.4.7".serde or false) ||
        (f.arrayvec."0.4.7".serde-1 or false) ||
        (arrayvec."0.4.7"."serde-1" or false); }
      { "0.4.7".std =
        (f.arrayvec."0.4.7".std or false) ||
        (f.arrayvec."0.4.7".default or false) ||
        (arrayvec."0.4.7"."default" or false); }
    ];
    nodrop = { "${deps.arrayvec."0.4.7".nodrop}".default = (f.nodrop."${deps.arrayvec."0.4.7".nodrop}".default or false); };
  }) [ (features_.nodrop."${deps."arrayvec"."0.4.7"."nodrop"}" deps) ];


  crates.atty."0.2.10" = deps: { features?(features_.atty."0.2.10" deps {}) }: buildRustCrate {
    crateName = "atty";
    version = "0.2.10";
    authors = [ "softprops <d.tangren@gmail.com>" ];
    sha256 = "1h26lssj8rwaz0xhwwm5a645r49yly211amfmd243m3m0jl49i2c";
    dependencies = (if kernel == "redox" then mapFeatures features ([ (crates."termion"."${deps."atty"."0.2.10"."termion"}" deps) ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ (crates."libc"."${deps."atty"."0.2.10"."libc"}" deps) ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ (crates."winapi"."${deps."atty"."0.2.10"."winapi"}" deps) ]) else []);
  };
  features_.atty."0.2.10" = deps: f: updateFeatures f (rec {
    atty = { "0.2.10".default = (f.atty."0.2.10".default or true); };
    libc = { "${deps.atty."0.2.10".libc}".default = (f.libc."${deps.atty."0.2.10".libc}".default or false); };
    termion = { "${deps.atty."0.2.10".termion}".default = true; };
    winapi = fold recursiveUpdate {} [
      { "${deps.atty."0.2.10".winapi}"."consoleapi" = true; }
      { "${deps.atty."0.2.10".winapi}"."minwinbase" = true; }
      { "${deps.atty."0.2.10".winapi}"."minwindef" = true; }
      { "${deps.atty."0.2.10".winapi}"."processenv" = true; }
      { "${deps.atty."0.2.10".winapi}"."winbase" = true; }
      { "${deps.atty."0.2.10".winapi}".default = true; }
    ];
  }) [ (features_.termion."${deps."atty"."0.2.10"."termion"}" deps)
       (features_.libc."${deps."atty"."0.2.10"."libc"}" deps)
       (features_.winapi."${deps."atty"."0.2.10"."winapi"}" deps) ];


  crates.backtrace."0.3.8" = deps: { features?(features_.backtrace."0.3.8" deps {}) }: buildRustCrate {
    crateName = "backtrace";
    version = "0.3.8";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "The Rust Project Developers" ];
    sha256 = "0qyb9af8zx29qf24rb0m08lf7dgz2vm2sc039npwvkwm717cy3mq";
    dependencies = mapFeatures features ([ (crates."cfg_if"."${deps."backtrace"."0.3.8"."cfg_if"}" deps) (crates."rustc_demangle"."${deps."backtrace"."0.3.8"."rustc_demangle"}" deps) ])
      ++ (if (kernel == "linux" || kernel == "darwin") && !(kernel == "fuchsia") && !(kernel == "emscripten") && !(kernel == "darwin") && !(kernel == "ios") then mapFeatures features ([ ]
      ++ (if features.backtrace."0.3.8".backtrace-sys or false then [ (crates.backtrace_sys."0.1.23" deps) ] else [])) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ (crates."libc"."${deps."backtrace"."0.3.8"."libc"}" deps) ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ ]
      ++ (if features.backtrace."0.3.8".winapi or false then [ (crates.winapi."0.3.5" deps) ] else [])) else []);
    features = mkFeatures (features.backtrace."0.3.8" or {});
  };
  features_.backtrace."0.3.8" = deps: f: updateFeatures f (rec {
    backtrace = fold recursiveUpdate {} [
      { "0.3.8".addr2line =
        (f.backtrace."0.3.8".addr2line or false) ||
        (f.backtrace."0.3.8".gimli-symbolize or false) ||
        (backtrace."0.3.8"."gimli-symbolize" or false); }
      { "0.3.8".backtrace-sys =
        (f.backtrace."0.3.8".backtrace-sys or false) ||
        (f.backtrace."0.3.8".libbacktrace or false) ||
        (backtrace."0.3.8"."libbacktrace" or false); }
      { "0.3.8".coresymbolication =
        (f.backtrace."0.3.8".coresymbolication or false) ||
        (f.backtrace."0.3.8".default or false) ||
        (backtrace."0.3.8"."default" or false); }
      { "0.3.8".dbghelp =
        (f.backtrace."0.3.8".dbghelp or false) ||
        (f.backtrace."0.3.8".default or false) ||
        (backtrace."0.3.8"."default" or false); }
      { "0.3.8".default = (f.backtrace."0.3.8".default or true); }
      { "0.3.8".dladdr =
        (f.backtrace."0.3.8".dladdr or false) ||
        (f.backtrace."0.3.8".default or false) ||
        (backtrace."0.3.8"."default" or false); }
      { "0.3.8".findshlibs =
        (f.backtrace."0.3.8".findshlibs or false) ||
        (f.backtrace."0.3.8".gimli-symbolize or false) ||
        (backtrace."0.3.8"."gimli-symbolize" or false); }
      { "0.3.8".gimli =
        (f.backtrace."0.3.8".gimli or false) ||
        (f.backtrace."0.3.8".gimli-symbolize or false) ||
        (backtrace."0.3.8"."gimli-symbolize" or false); }
      { "0.3.8".libbacktrace =
        (f.backtrace."0.3.8".libbacktrace or false) ||
        (f.backtrace."0.3.8".default or false) ||
        (backtrace."0.3.8"."default" or false); }
      { "0.3.8".libunwind =
        (f.backtrace."0.3.8".libunwind or false) ||
        (f.backtrace."0.3.8".default or false) ||
        (backtrace."0.3.8"."default" or false); }
      { "0.3.8".memmap =
        (f.backtrace."0.3.8".memmap or false) ||
        (f.backtrace."0.3.8".gimli-symbolize or false) ||
        (backtrace."0.3.8"."gimli-symbolize" or false); }
      { "0.3.8".object =
        (f.backtrace."0.3.8".object or false) ||
        (f.backtrace."0.3.8".gimli-symbolize or false) ||
        (backtrace."0.3.8"."gimli-symbolize" or false); }
      { "0.3.8".rustc-serialize =
        (f.backtrace."0.3.8".rustc-serialize or false) ||
        (f.backtrace."0.3.8".serialize-rustc or false) ||
        (backtrace."0.3.8"."serialize-rustc" or false); }
      { "0.3.8".serde =
        (f.backtrace."0.3.8".serde or false) ||
        (f.backtrace."0.3.8".serialize-serde or false) ||
        (backtrace."0.3.8"."serialize-serde" or false); }
      { "0.3.8".serde_derive =
        (f.backtrace."0.3.8".serde_derive or false) ||
        (f.backtrace."0.3.8".serialize-serde or false) ||
        (backtrace."0.3.8"."serialize-serde" or false); }
      { "0.3.8".winapi =
        (f.backtrace."0.3.8".winapi or false) ||
        (f.backtrace."0.3.8".dbghelp or false) ||
        (backtrace."0.3.8"."dbghelp" or false); }
    ];
    backtrace_sys = { "${deps.backtrace."0.3.8".backtrace_sys}".default = true; };
    cfg_if = { "${deps.backtrace."0.3.8".cfg_if}".default = true; };
    libc = { "${deps.backtrace."0.3.8".libc}".default = true; };
    rustc_demangle = { "${deps.backtrace."0.3.8".rustc_demangle}".default = true; };
    winapi = fold recursiveUpdate {} [
      { "${deps.backtrace."0.3.8".winapi}"."dbghelp" = true; }
      { "${deps.backtrace."0.3.8".winapi}"."minwindef" = true; }
      { "${deps.backtrace."0.3.8".winapi}"."processthreadsapi" = true; }
      { "${deps.backtrace."0.3.8".winapi}"."std" = true; }
      { "${deps.backtrace."0.3.8".winapi}"."winnt" = true; }
      { "${deps.backtrace."0.3.8".winapi}".default = true; }
    ];
  }) [ (features_.cfg_if."${deps."backtrace"."0.3.8"."cfg_if"}" deps)
       (features_.rustc_demangle."${deps."backtrace"."0.3.8"."rustc_demangle"}" deps)
       (features_.backtrace_sys."${deps."backtrace"."0.3.8"."backtrace_sys"}" deps)
       (features_.libc."${deps."backtrace"."0.3.8"."libc"}" deps)
       (features_.winapi."${deps."backtrace"."0.3.8"."winapi"}" deps) ];


  crates.backtrace_sys."0.1.23" = deps: { features?(features_.backtrace_sys."0.1.23" deps {}) }: buildRustCrate {
    crateName = "backtrace-sys";
    version = "0.1.23";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0sx7h7bl5j5dj4hlk7bcf8fwbhrxrvq2hfpy70vw2140gnlrl9dw";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."backtrace_sys"."0.1.23"."libc"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."cc"."${deps."backtrace_sys"."0.1.23"."cc"}" deps) ]);
  };
  features_.backtrace_sys."0.1.23" = deps: f: updateFeatures f (rec {
    backtrace_sys = { "0.1.23".default = (f.backtrace_sys."0.1.23".default or true); };
    cc = { "${deps.backtrace_sys."0.1.23".cc}".default = true; };
    libc = { "${deps.backtrace_sys."0.1.23".libc}".default = true; };
  }) [ (features_.libc."${deps."backtrace_sys"."0.1.23"."libc"}" deps)
       (features_.cc."${deps."backtrace_sys"."0.1.23"."cc"}" deps) ];


  crates.base64."0.5.2" = deps: { features?(features_.base64."0.5.2" deps {}) }: buildRustCrate {
    crateName = "base64";
    version = "0.5.2";
    authors = [ "Alice Maz <alice@alicemaz.com>" "Marshall Pierce <marshall@mpierce.org>" ];
    sha256 = "1xl4zf9y9mk8syl1bg8hnf99g2zxlr7xj1xii3b2j88a07c1c6f7";
    dependencies = mapFeatures features ([ (crates."byteorder"."${deps."base64"."0.5.2"."byteorder"}" deps) ]);
  };
  features_.base64."0.5.2" = deps: f: updateFeatures f (rec {
    base64 = { "0.5.2".default = (f.base64."0.5.2".default or true); };
    byteorder = { "${deps.base64."0.5.2".byteorder}".default = true; };
  }) [ (features_.byteorder."${deps."base64"."0.5.2"."byteorder"}" deps) ];


  crates.base64."0.6.0" = deps: { features?(features_.base64."0.6.0" deps {}) }: buildRustCrate {
    crateName = "base64";
    version = "0.6.0";
    authors = [ "Alice Maz <alice@alicemaz.com>" "Marshall Pierce <marshall@mpierce.org>" ];
    sha256 = "0ql1rmczbnww3iszc0pfc6mqa47ravpsdf525vp6s8r32nyzspl5";
    dependencies = mapFeatures features ([ (crates."byteorder"."${deps."base64"."0.6.0"."byteorder"}" deps) (crates."safemem"."${deps."base64"."0.6.0"."safemem"}" deps) ]);
  };
  features_.base64."0.6.0" = deps: f: updateFeatures f (rec {
    base64 = { "0.6.0".default = (f.base64."0.6.0".default or true); };
    byteorder = { "${deps.base64."0.6.0".byteorder}".default = true; };
    safemem = { "${deps.base64."0.6.0".safemem}".default = true; };
  }) [ (features_.byteorder."${deps."base64"."0.6.0"."byteorder"}" deps)
       (features_.safemem."${deps."base64"."0.6.0"."safemem"}" deps) ];


  crates.bitflags."0.8.2" = deps: { features?(features_.bitflags."0.8.2" deps {}) }: buildRustCrate {
    crateName = "bitflags";
    version = "0.8.2";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0whaj3969ysqxzk620sk1isvq6vh85516f2fplvqjrw3syz44sb2";
    features = mkFeatures (features.bitflags."0.8.2" or {});
  };
  features_.bitflags."0.8.2" = deps: f: updateFeatures f (rec {
    bitflags = fold recursiveUpdate {} [
      { "0.8.2".default = (f.bitflags."0.8.2".default or true); }
      { "0.8.2".i128 =
        (f.bitflags."0.8.2".i128 or false) ||
        (f.bitflags."0.8.2".unstable or false) ||
        (bitflags."0.8.2"."unstable" or false); }
    ];
  }) [];


  crates.bitflags."0.9.1" = deps: { features?(features_.bitflags."0.9.1" deps {}) }: buildRustCrate {
    crateName = "bitflags";
    version = "0.9.1";
    authors = [ "The Rust Project Developers" ];
    sha256 = "18h073l5jd88rx4qdr95fjddr9rk79pb1aqnshzdnw16cfmb9rws";
    features = mkFeatures (features.bitflags."0.9.1" or {});
  };
  features_.bitflags."0.9.1" = deps: f: updateFeatures f (rec {
    bitflags = fold recursiveUpdate {} [
      { "0.9.1".default = (f.bitflags."0.9.1".default or true); }
      { "0.9.1".example_generated =
        (f.bitflags."0.9.1".example_generated or false) ||
        (f.bitflags."0.9.1".default or false) ||
        (bitflags."0.9.1"."default" or false); }
    ];
  }) [];


  crates.bitflags."1.0.3" = deps: { features?(features_.bitflags."1.0.3" deps {}) }: buildRustCrate {
    crateName = "bitflags";
    version = "1.0.3";
    authors = [ "The Rust Project Developers" ];
    sha256 = "162p4w4h1ad76awq6b5yivmls3d50m9cl27d8g588lsps6g8s5rw";
    features = mkFeatures (features.bitflags."1.0.3" or {});
  };
  features_.bitflags."1.0.3" = deps: f: updateFeatures f (rec {
    bitflags = { "1.0.3".default = (f.bitflags."1.0.3".default or true); };
  }) [];


  crates.blake2_rfc."0.2.18" = deps: { features?(features_.blake2_rfc."0.2.18" deps {}) }: buildRustCrate {
    crateName = "blake2-rfc";
    version = "0.2.18";
    authors = [ "Cesar Eduardo Barros <cesarb@cesarb.eti.br>" ];
    sha256 = "0pyqrik4471ljk16prs0iwb2sam39z0z6axyyjxlqxdmf4wprf0l";
    dependencies = mapFeatures features ([ (crates."arrayvec"."${deps."blake2_rfc"."0.2.18"."arrayvec"}" deps) (crates."constant_time_eq"."${deps."blake2_rfc"."0.2.18"."constant_time_eq"}" deps) ]);
    features = mkFeatures (features.blake2_rfc."0.2.18" or {});
  };
  features_.blake2_rfc."0.2.18" = deps: f: updateFeatures f (rec {
    arrayvec = { "${deps.blake2_rfc."0.2.18".arrayvec}".default = (f.arrayvec."${deps.blake2_rfc."0.2.18".arrayvec}".default or false); };
    blake2_rfc = fold recursiveUpdate {} [
      { "0.2.18".default = (f.blake2_rfc."0.2.18".default or true); }
      { "0.2.18".simd =
        (f.blake2_rfc."0.2.18".simd or false) ||
        (f.blake2_rfc."0.2.18".simd_opt or false) ||
        (blake2_rfc."0.2.18"."simd_opt" or false); }
      { "0.2.18".simd_opt =
        (f.blake2_rfc."0.2.18".simd_opt or false) ||
        (f.blake2_rfc."0.2.18".simd_asm or false) ||
        (blake2_rfc."0.2.18"."simd_asm" or false); }
      { "0.2.18".std =
        (f.blake2_rfc."0.2.18".std or false) ||
        (f.blake2_rfc."0.2.18".default or false) ||
        (blake2_rfc."0.2.18"."default" or false); }
    ];
    constant_time_eq = { "${deps.blake2_rfc."0.2.18".constant_time_eq}".default = true; };
  }) [ (features_.arrayvec."${deps."blake2_rfc"."0.2.18"."arrayvec"}" deps)
       (features_.constant_time_eq."${deps."blake2_rfc"."0.2.18"."constant_time_eq"}" deps) ];


  crates.block_buffer."0.3.3" = deps: { features?(features_.block_buffer."0.3.3" deps {}) }: buildRustCrate {
    crateName = "block-buffer";
    version = "0.3.3";
    authors = [ "RustCrypto Developers" ];
    sha256 = "0ka14535hlndyig1dqxqvdv60mgmnnhfi6x87npha3x3yg5sx201";
    dependencies = mapFeatures features ([ (crates."arrayref"."${deps."block_buffer"."0.3.3"."arrayref"}" deps) (crates."byte_tools"."${deps."block_buffer"."0.3.3"."byte_tools"}" deps) ]);
  };
  features_.block_buffer."0.3.3" = deps: f: updateFeatures f (rec {
    arrayref = { "${deps.block_buffer."0.3.3".arrayref}".default = true; };
    block_buffer = { "0.3.3".default = (f.block_buffer."0.3.3".default or true); };
    byte_tools = { "${deps.block_buffer."0.3.3".byte_tools}".default = true; };
  }) [ (features_.arrayref."${deps."block_buffer"."0.3.3"."arrayref"}" deps)
       (features_.byte_tools."${deps."block_buffer"."0.3.3"."byte_tools"}" deps) ];


  crates.build_const."0.2.1" = deps: { features?(features_.build_const."0.2.1" deps {}) }: buildRustCrate {
    crateName = "build_const";
    version = "0.2.1";
    authors = [ "Garrett Berg <vitiral@gmail.com>" ];
    sha256 = "15249xzi3qlm72p4glxgavwyq70fx2sp4df6ii0sdlrixrrp77pl";
    features = mkFeatures (features.build_const."0.2.1" or {});
  };
  features_.build_const."0.2.1" = deps: f: updateFeatures f (rec {
    build_const = fold recursiveUpdate {} [
      { "0.2.1".default = (f.build_const."0.2.1".default or true); }
      { "0.2.1".std =
        (f.build_const."0.2.1".std or false) ||
        (f.build_const."0.2.1".default or false) ||
        (build_const."0.2.1"."default" or false); }
    ];
  }) [];


  crates.byte_tools."0.2.0" = deps: { features?(features_.byte_tools."0.2.0" deps {}) }: buildRustCrate {
    crateName = "byte-tools";
    version = "0.2.0";
    authors = [ "The Rust-Crypto Project Developers" ];
    sha256 = "15cm6sxkk2ikrz8sxld3hv9g419j4kjzwdjp4fn53gjq07awq6il";
  };
  features_.byte_tools."0.2.0" = deps: f: updateFeatures f (rec {
    byte_tools = { "0.2.0".default = (f.byte_tools."0.2.0".default or true); };
  }) [];


  crates.byteorder."1.2.3" = deps: { features?(features_.byteorder."1.2.3" deps {}) }: buildRustCrate {
    crateName = "byteorder";
    version = "1.2.3";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1xghv5f5rydzsam8lnfqhfk090i8a1knb77ikbs0ik44bvrw2ij3";
    features = mkFeatures (features.byteorder."1.2.3" or {});
  };
  features_.byteorder."1.2.3" = deps: f: updateFeatures f (rec {
    byteorder = fold recursiveUpdate {} [
      { "1.2.3".default = (f.byteorder."1.2.3".default or true); }
      { "1.2.3".std =
        (f.byteorder."1.2.3".std or false) ||
        (f.byteorder."1.2.3".default or false) ||
        (byteorder."1.2.3"."default" or false); }
    ];
  }) [];


  crates.cc."1.0.17" = deps: { features?(features_.cc."1.0.17" deps {}) }: buildRustCrate {
    crateName = "cc";
    version = "1.0.17";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0jb8rw68iy9fj3is5gimzwyr5nwj5ip6fmi04zm9flhml0wxzf44";
    dependencies = mapFeatures features ([ ]
      ++ (if features.cc."1.0.17".rayon or false then [ (crates.rayon."1.0.1" deps) ] else []));
    features = mkFeatures (features.cc."1.0.17" or {});
  };
  features_.cc."1.0.17" = deps: f: updateFeatures f (rec {
    cc = fold recursiveUpdate {} [
      { "1.0.17".default = (f.cc."1.0.17".default or true); }
      { "1.0.17".rayon =
        (f.cc."1.0.17".rayon or false) ||
        (f.cc."1.0.17".parallel or false) ||
        (cc."1.0.17"."parallel" or false); }
    ];
    rayon = { "${deps.cc."1.0.17".rayon}".default = true; };
  }) [ (features_.rayon."${deps."cc"."1.0.17"."rayon"}" deps) ];


  crates.cfg_if."0.1.3" = deps: { features?(features_.cfg_if."0.1.3" deps {}) }: buildRustCrate {
    crateName = "cfg-if";
    version = "0.1.3";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0hphfz5qg40gr5p18gmgy2rzkqj019lii3n0dy3s0a6lnl9106k6";
  };
  features_.cfg_if."0.1.3" = deps: f: updateFeatures f (rec {
    cfg_if = { "0.1.3".default = (f.cfg_if."0.1.3".default or true); };
  }) [];


  crates.chashmap."2.2.0" = deps: { features?(features_.chashmap."2.2.0" deps {}) }: buildRustCrate {
    crateName = "chashmap";
    version = "2.2.0";
    authors = [ "ticki <Ticki@users.noreply.github.com>" ];
    sha256 = "137qln0qvw0nnvv8wgnnd2y44vh7qalfj11gd24l5dd4gcmd713m";
    dependencies = mapFeatures features ([ (crates."owning_ref"."${deps."chashmap"."2.2.0"."owning_ref"}" deps) (crates."parking_lot"."${deps."chashmap"."2.2.0"."parking_lot"}" deps) ]);
  };
  features_.chashmap."2.2.0" = deps: f: updateFeatures f (rec {
    chashmap = { "2.2.0".default = (f.chashmap."2.2.0".default or true); };
    owning_ref = { "${deps.chashmap."2.2.0".owning_ref}".default = true; };
    parking_lot = { "${deps.chashmap."2.2.0".parking_lot}".default = true; };
  }) [ (features_.owning_ref."${deps."chashmap"."2.2.0"."owning_ref"}" deps)
       (features_.parking_lot."${deps."chashmap"."2.2.0"."parking_lot"}" deps) ];


  crates.chrono."0.4.2" = deps: { features?(features_.chrono."0.4.2" deps {}) }: buildRustCrate {
    crateName = "chrono";
    version = "0.4.2";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" "Brandon W Maister <quodlibetor@gmail.com>" ];
    sha256 = "1zp63v1g56kfjnazmqg8s4gb66l0ra8ggn3gzqbf9sr8d5lnfzak";
    dependencies = mapFeatures features ([ (crates."num_integer"."${deps."chrono"."0.4.2"."num_integer"}" deps) (crates."num_traits"."${deps."chrono"."0.4.2"."num_traits"}" deps) ]
      ++ (if features.chrono."0.4.2".time or false then [ (crates.time."0.1.40" deps) ] else []));
    features = mkFeatures (features.chrono."0.4.2" or {});
  };
  features_.chrono."0.4.2" = deps: f: updateFeatures f (rec {
    chrono = fold recursiveUpdate {} [
      { "0.4.2".clock =
        (f.chrono."0.4.2".clock or false) ||
        (f.chrono."0.4.2".default or false) ||
        (chrono."0.4.2"."default" or false); }
      { "0.4.2".default = (f.chrono."0.4.2".default or true); }
      { "0.4.2".time =
        (f.chrono."0.4.2".time or false) ||
        (f.chrono."0.4.2".clock or false) ||
        (chrono."0.4.2"."clock" or false); }
    ];
    num_integer = { "${deps.chrono."0.4.2".num_integer}".default = (f.num_integer."${deps.chrono."0.4.2".num_integer}".default or false); };
    num_traits = { "${deps.chrono."0.4.2".num_traits}".default = (f.num_traits."${deps.chrono."0.4.2".num_traits}".default or false); };
    time = { "${deps.chrono."0.4.2".time}".default = true; };
  }) [ (features_.num_integer."${deps."chrono"."0.4.2"."num_integer"}" deps)
       (features_.num_traits."${deps."chrono"."0.4.2"."num_traits"}" deps)
       (features_.time."${deps."chrono"."0.4.2"."time"}" deps) ];


  crates.clap."2.31.2" = deps: { features?(features_.clap."2.31.2" deps {}) }: buildRustCrate {
    crateName = "clap";
    version = "2.31.2";
    authors = [ "Kevin K. <kbknapp@gmail.com>" ];
    sha256 = "0r24ziw85a8y1sf2l21y4mvv5qan3rjafcshpyfsjfadqfxsij72";
    dependencies = mapFeatures features ([ (crates."bitflags"."${deps."clap"."2.31.2"."bitflags"}" deps) (crates."textwrap"."${deps."clap"."2.31.2"."textwrap"}" deps) (crates."unicode_width"."${deps."clap"."2.31.2"."unicode_width"}" deps) ]
      ++ (if features.clap."2.31.2".atty or false then [ (crates.atty."0.2.10" deps) ] else [])
      ++ (if features.clap."2.31.2".strsim or false then [ (crates.strsim."0.7.0" deps) ] else [])
      ++ (if features.clap."2.31.2".vec_map or false then [ (crates.vec_map."0.8.1" deps) ] else []))
      ++ (if !(kernel == "windows") then mapFeatures features ([ ]
      ++ (if features.clap."2.31.2".ansi_term or false then [ (crates.ansi_term."0.11.0" deps) ] else [])) else []);
    features = mkFeatures (features.clap."2.31.2" or {});
  };
  features_.clap."2.31.2" = deps: f: updateFeatures f (rec {
    ansi_term = { "${deps.clap."2.31.2".ansi_term}".default = true; };
    atty = { "${deps.clap."2.31.2".atty}".default = true; };
    bitflags = { "${deps.clap."2.31.2".bitflags}".default = true; };
    clap = fold recursiveUpdate {} [
      { "2.31.2".ansi_term =
        (f.clap."2.31.2".ansi_term or false) ||
        (f.clap."2.31.2".color or false) ||
        (clap."2.31.2"."color" or false); }
      { "2.31.2".atty =
        (f.clap."2.31.2".atty or false) ||
        (f.clap."2.31.2".color or false) ||
        (clap."2.31.2"."color" or false); }
      { "2.31.2".clippy =
        (f.clap."2.31.2".clippy or false) ||
        (f.clap."2.31.2".lints or false) ||
        (clap."2.31.2"."lints" or false); }
      { "2.31.2".color =
        (f.clap."2.31.2".color or false) ||
        (f.clap."2.31.2".default or false) ||
        (clap."2.31.2"."default" or false); }
      { "2.31.2".default = (f.clap."2.31.2".default or true); }
      { "2.31.2".strsim =
        (f.clap."2.31.2".strsim or false) ||
        (f.clap."2.31.2".suggestions or false) ||
        (clap."2.31.2"."suggestions" or false); }
      { "2.31.2".suggestions =
        (f.clap."2.31.2".suggestions or false) ||
        (f.clap."2.31.2".default or false) ||
        (clap."2.31.2"."default" or false); }
      { "2.31.2".term_size =
        (f.clap."2.31.2".term_size or false) ||
        (f.clap."2.31.2".wrap_help or false) ||
        (clap."2.31.2"."wrap_help" or false); }
      { "2.31.2".vec_map =
        (f.clap."2.31.2".vec_map or false) ||
        (f.clap."2.31.2".default or false) ||
        (clap."2.31.2"."default" or false); }
      { "2.31.2".yaml =
        (f.clap."2.31.2".yaml or false) ||
        (f.clap."2.31.2".doc or false) ||
        (clap."2.31.2"."doc" or false); }
      { "2.31.2".yaml-rust =
        (f.clap."2.31.2".yaml-rust or false) ||
        (f.clap."2.31.2".yaml or false) ||
        (clap."2.31.2"."yaml" or false); }
    ];
    strsim = { "${deps.clap."2.31.2".strsim}".default = true; };
    textwrap = fold recursiveUpdate {} [
      { "${deps.clap."2.31.2".textwrap}".default = true; }
      { "0.9.0".term_size =
        (f.textwrap."0.9.0".term_size or false) ||
        (clap."2.31.2"."wrap_help" or false) ||
        (f."clap"."2.31.2"."wrap_help" or false); }
    ];
    unicode_width = { "${deps.clap."2.31.2".unicode_width}".default = true; };
    vec_map = { "${deps.clap."2.31.2".vec_map}".default = true; };
  }) [ (features_.atty."${deps."clap"."2.31.2"."atty"}" deps)
       (features_.bitflags."${deps."clap"."2.31.2"."bitflags"}" deps)
       (features_.strsim."${deps."clap"."2.31.2"."strsim"}" deps)
       (features_.textwrap."${deps."clap"."2.31.2"."textwrap"}" deps)
       (features_.unicode_width."${deps."clap"."2.31.2"."unicode_width"}" deps)
       (features_.vec_map."${deps."clap"."2.31.2"."vec_map"}" deps)
       (features_.ansi_term."${deps."clap"."2.31.2"."ansi_term"}" deps) ];


  crates.cloudabi."0.0.3" = deps: { features?(features_.cloudabi."0.0.3" deps {}) }: buildRustCrate {
    crateName = "cloudabi";
    version = "0.0.3";
    authors = [ "Nuxi (https://nuxi.nl/) and contributors" ];
    sha256 = "1z9lby5sr6vslfd14d6igk03s7awf91mxpsfmsp3prxbxlk0x7h5";
    libPath = "cloudabi.rs";
    dependencies = mapFeatures features ([ ]
      ++ (if features.cloudabi."0.0.3".bitflags or false then [ (crates.bitflags."1.0.3" deps) ] else []));
    features = mkFeatures (features.cloudabi."0.0.3" or {});
  };
  features_.cloudabi."0.0.3" = deps: f: updateFeatures f (rec {
    bitflags = { "${deps.cloudabi."0.0.3".bitflags}".default = true; };
    cloudabi = fold recursiveUpdate {} [
      { "0.0.3".bitflags =
        (f.cloudabi."0.0.3".bitflags or false) ||
        (f.cloudabi."0.0.3".default or false) ||
        (cloudabi."0.0.3"."default" or false); }
      { "0.0.3".default = (f.cloudabi."0.0.3".default or true); }
    ];
  }) [ (features_.bitflags."${deps."cloudabi"."0.0.3"."bitflags"}" deps) ];


  crates.color_quant."1.0.0" = deps: { features?(features_.color_quant."1.0.0" deps {}) }: buildRustCrate {
    crateName = "color_quant";
    version = "1.0.0";
    authors = [ "nwin <nwin@users.noreply.github.com>" ];
    sha256 = "0jwr40lr115zm2bydk1wja12gcxrmgsx0n1z1pipq00sab71maaj";
  };
  features_.color_quant."1.0.0" = deps: f: updateFeatures f (rec {
    color_quant = { "1.0.0".default = (f.color_quant."1.0.0".default or true); };
  }) [];


  crates.conduit_mime_types."0.7.3" = deps: { features?(features_.conduit_mime_types."0.7.3" deps {}) }: buildRustCrate {
    crateName = "conduit-mime-types";
    version = "0.7.3";
    authors = [ "wycats@gmail.com" ];
    sha256 = "0r49ncskqr5977br7hl1mabjf8zyqqfxmyd6s4gp93h6yvhc3hd8";
    dependencies = mapFeatures features ([ (crates."rustc_serialize"."${deps."conduit_mime_types"."0.7.3"."rustc_serialize"}" deps) ]);
  };
  features_.conduit_mime_types."0.7.3" = deps: f: updateFeatures f (rec {
    conduit_mime_types = { "0.7.3".default = (f.conduit_mime_types."0.7.3".default or true); };
    rustc_serialize = { "${deps.conduit_mime_types."0.7.3".rustc_serialize}".default = true; };
  }) [ (features_.rustc_serialize."${deps."conduit_mime_types"."0.7.3"."rustc_serialize"}" deps) ];


  crates.constant_time_eq."0.1.3" = deps: { features?(features_.constant_time_eq."0.1.3" deps {}) }: buildRustCrate {
    crateName = "constant_time_eq";
    version = "0.1.3";
    authors = [ "Cesar Eduardo Barros <cesarb@cesarb.eti.br>" ];
    sha256 = "03qri9hjf049gwqg9q527lybpg918q6y5q4g9a5lma753nff49wd";
  };
  features_.constant_time_eq."0.1.3" = deps: f: updateFeatures f (rec {
    constant_time_eq = { "0.1.3".default = (f.constant_time_eq."0.1.3".default or true); };
  }) [];


  crates.core_foundation."0.2.3" = deps: { features?(features_.core_foundation."0.2.3" deps {}) }: buildRustCrate {
    crateName = "core-foundation";
    version = "0.2.3";
    authors = [ "The Servo Project Developers" ];
    sha256 = "1g0vpya5h2wa0nlz4a74jar6y8z09f0p76zbzfqrm3dbfsrld1pm";
    dependencies = mapFeatures features ([ (crates."core_foundation_sys"."${deps."core_foundation"."0.2.3"."core_foundation_sys"}" deps) (crates."libc"."${deps."core_foundation"."0.2.3"."libc"}" deps) ]);
  };
  features_.core_foundation."0.2.3" = deps: f: updateFeatures f (rec {
    core_foundation = { "0.2.3".default = (f.core_foundation."0.2.3".default or true); };
    core_foundation_sys = { "${deps.core_foundation."0.2.3".core_foundation_sys}".default = true; };
    libc = { "${deps.core_foundation."0.2.3".libc}".default = true; };
  }) [ (features_.core_foundation_sys."${deps."core_foundation"."0.2.3"."core_foundation_sys"}" deps)
       (features_.libc."${deps."core_foundation"."0.2.3"."libc"}" deps) ];


  crates.core_foundation_sys."0.2.3" = deps: { features?(features_.core_foundation_sys."0.2.3" deps {}) }: buildRustCrate {
    crateName = "core-foundation-sys";
    version = "0.2.3";
    authors = [ "The Servo Project Developers" ];
    sha256 = "19s0d03294m9s5j8cvy345db3gkhs2y02j5268ap0c6ky5apl53s";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."core_foundation_sys"."0.2.3"."libc"}" deps) ]);
  };
  features_.core_foundation_sys."0.2.3" = deps: f: updateFeatures f (rec {
    core_foundation_sys = { "0.2.3".default = (f.core_foundation_sys."0.2.3".default or true); };
    libc = { "${deps.core_foundation_sys."0.2.3".libc}".default = true; };
  }) [ (features_.libc."${deps."core_foundation_sys"."0.2.3"."libc"}" deps) ];


  crates.crc."1.8.1" = deps: { features?(features_.crc."1.8.1" deps {}) }: buildRustCrate {
    crateName = "crc";
    version = "1.8.1";
    authors = [ "Rui Hu <code@mrhooray.com>" ];
    sha256 = "00m9jjqrddp3bqyanvyxv0hf6s56bx1wy51vcdcxg4n2jdhg109s";

    buildDependencies = mapFeatures features ([ (crates."build_const"."${deps."crc"."1.8.1"."build_const"}" deps) ]);
    features = mkFeatures (features.crc."1.8.1" or {});
  };
  features_.crc."1.8.1" = deps: f: updateFeatures f (rec {
    build_const = { "${deps.crc."1.8.1".build_const}".default = true; };
    crc = fold recursiveUpdate {} [
      { "1.8.1".default = (f.crc."1.8.1".default or true); }
      { "1.8.1".std =
        (f.crc."1.8.1".std or false) ||
        (f.crc."1.8.1".default or false) ||
        (crc."1.8.1"."default" or false); }
    ];
  }) [ (features_.build_const."${deps."crc"."1.8.1"."build_const"}" deps) ];


  crates.crossbeam_deque."0.2.0" = deps: { features?(features_.crossbeam_deque."0.2.0" deps {}) }: buildRustCrate {
    crateName = "crossbeam-deque";
    version = "0.2.0";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "1h3n1p1qy45b6388j3svfy1m72xlcx9j9a5y0mww6jz8fmknipnb";
    dependencies = mapFeatures features ([ (crates."crossbeam_epoch"."${deps."crossbeam_deque"."0.2.0"."crossbeam_epoch"}" deps) (crates."crossbeam_utils"."${deps."crossbeam_deque"."0.2.0"."crossbeam_utils"}" deps) ]);
  };
  features_.crossbeam_deque."0.2.0" = deps: f: updateFeatures f (rec {
    crossbeam_deque = { "0.2.0".default = (f.crossbeam_deque."0.2.0".default or true); };
    crossbeam_epoch = { "${deps.crossbeam_deque."0.2.0".crossbeam_epoch}".default = true; };
    crossbeam_utils = { "${deps.crossbeam_deque."0.2.0".crossbeam_utils}".default = true; };
  }) [ (features_.crossbeam_epoch."${deps."crossbeam_deque"."0.2.0"."crossbeam_epoch"}" deps)
       (features_.crossbeam_utils."${deps."crossbeam_deque"."0.2.0"."crossbeam_utils"}" deps) ];


  crates.crossbeam_epoch."0.3.1" = deps: { features?(features_.crossbeam_epoch."0.3.1" deps {}) }: buildRustCrate {
    crateName = "crossbeam-epoch";
    version = "0.3.1";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "1ljrrpvalabi3r2nnpcz7rqkbl2ydmd0mrrr2fv335f7d46xgfxa";
    dependencies = mapFeatures features ([ (crates."arrayvec"."${deps."crossbeam_epoch"."0.3.1"."arrayvec"}" deps) (crates."cfg_if"."${deps."crossbeam_epoch"."0.3.1"."cfg_if"}" deps) (crates."crossbeam_utils"."${deps."crossbeam_epoch"."0.3.1"."crossbeam_utils"}" deps) (crates."memoffset"."${deps."crossbeam_epoch"."0.3.1"."memoffset"}" deps) (crates."nodrop"."${deps."crossbeam_epoch"."0.3.1"."nodrop"}" deps) (crates."scopeguard"."${deps."crossbeam_epoch"."0.3.1"."scopeguard"}" deps) ]
      ++ (if features.crossbeam_epoch."0.3.1".lazy_static or false then [ (crates.lazy_static."1.0.1" deps) ] else []));
    features = mkFeatures (features.crossbeam_epoch."0.3.1" or {});
  };
  features_.crossbeam_epoch."0.3.1" = deps: f: updateFeatures f (rec {
    arrayvec = fold recursiveUpdate {} [
      { "${deps.crossbeam_epoch."0.3.1".arrayvec}".default = (f.arrayvec."${deps.crossbeam_epoch."0.3.1".arrayvec}".default or false); }
      { "0.4.7".use_union =
        (f.arrayvec."0.4.7".use_union or false) ||
        (crossbeam_epoch."0.3.1"."nightly" or false) ||
        (f."crossbeam_epoch"."0.3.1"."nightly" or false); }
    ];
    cfg_if = { "${deps.crossbeam_epoch."0.3.1".cfg_if}".default = true; };
    crossbeam_epoch = fold recursiveUpdate {} [
      { "0.3.1".default = (f.crossbeam_epoch."0.3.1".default or true); }
      { "0.3.1".lazy_static =
        (f.crossbeam_epoch."0.3.1".lazy_static or false) ||
        (f.crossbeam_epoch."0.3.1".use_std or false) ||
        (crossbeam_epoch."0.3.1"."use_std" or false); }
      { "0.3.1".use_std =
        (f.crossbeam_epoch."0.3.1".use_std or false) ||
        (f.crossbeam_epoch."0.3.1".default or false) ||
        (crossbeam_epoch."0.3.1"."default" or false); }
    ];
    crossbeam_utils = fold recursiveUpdate {} [
      { "${deps.crossbeam_epoch."0.3.1".crossbeam_utils}".default = (f.crossbeam_utils."${deps.crossbeam_epoch."0.3.1".crossbeam_utils}".default or false); }
      { "0.2.2".use_std =
        (f.crossbeam_utils."0.2.2".use_std or false) ||
        (crossbeam_epoch."0.3.1"."use_std" or false) ||
        (f."crossbeam_epoch"."0.3.1"."use_std" or false); }
    ];
    lazy_static = { "${deps.crossbeam_epoch."0.3.1".lazy_static}".default = true; };
    memoffset = { "${deps.crossbeam_epoch."0.3.1".memoffset}".default = true; };
    nodrop = { "${deps.crossbeam_epoch."0.3.1".nodrop}".default = (f.nodrop."${deps.crossbeam_epoch."0.3.1".nodrop}".default or false); };
    scopeguard = { "${deps.crossbeam_epoch."0.3.1".scopeguard}".default = (f.scopeguard."${deps.crossbeam_epoch."0.3.1".scopeguard}".default or false); };
  }) [ (features_.arrayvec."${deps."crossbeam_epoch"."0.3.1"."arrayvec"}" deps)
       (features_.cfg_if."${deps."crossbeam_epoch"."0.3.1"."cfg_if"}" deps)
       (features_.crossbeam_utils."${deps."crossbeam_epoch"."0.3.1"."crossbeam_utils"}" deps)
       (features_.lazy_static."${deps."crossbeam_epoch"."0.3.1"."lazy_static"}" deps)
       (features_.memoffset."${deps."crossbeam_epoch"."0.3.1"."memoffset"}" deps)
       (features_.nodrop."${deps."crossbeam_epoch"."0.3.1"."nodrop"}" deps)
       (features_.scopeguard."${deps."crossbeam_epoch"."0.3.1"."scopeguard"}" deps) ];


  crates.crossbeam_utils."0.2.2" = deps: { features?(features_.crossbeam_utils."0.2.2" deps {}) }: buildRustCrate {
    crateName = "crossbeam-utils";
    version = "0.2.2";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "0jiwzxv0lysjq68yk4bzkygrf69zhdidyw55nxlmimxlm6xv0j4m";
    dependencies = mapFeatures features ([ (crates."cfg_if"."${deps."crossbeam_utils"."0.2.2"."cfg_if"}" deps) ]);
    features = mkFeatures (features.crossbeam_utils."0.2.2" or {});
  };
  features_.crossbeam_utils."0.2.2" = deps: f: updateFeatures f (rec {
    cfg_if = { "${deps.crossbeam_utils."0.2.2".cfg_if}".default = true; };
    crossbeam_utils = fold recursiveUpdate {} [
      { "0.2.2".default = (f.crossbeam_utils."0.2.2".default or true); }
      { "0.2.2".use_std =
        (f.crossbeam_utils."0.2.2".use_std or false) ||
        (f.crossbeam_utils."0.2.2".default or false) ||
        (crossbeam_utils."0.2.2"."default" or false); }
    ];
  }) [ (features_.cfg_if."${deps."crossbeam_utils"."0.2.2"."cfg_if"}" deps) ];


  crates.daggy."0.5.0" = deps: { features?(features_.daggy."0.5.0" deps {}) }: buildRustCrate {
    crateName = "daggy";
    version = "0.5.0";
    authors = [ "mitchmindtree <mitchell.nordine@gmail.com>" ];
    sha256 = "0z3646ddb6v9snjvd25rjy6hrx77bf74iwgb2am06icqirixrd51";
    dependencies = mapFeatures features ([ (crates."petgraph"."${deps."daggy"."0.5.0"."petgraph"}" deps) ]);
  };
  features_.daggy."0.5.0" = deps: f: updateFeatures f (rec {
    daggy = { "0.5.0".default = (f.daggy."0.5.0".default or true); };
    petgraph = { "${deps.daggy."0.5.0".petgraph}".default = (f.petgraph."${deps.daggy."0.5.0".petgraph}".default or false); };
  }) [ (features_.petgraph."${deps."daggy"."0.5.0"."petgraph"}" deps) ];


  crates.difference."1.0.0" = deps: { features?(features_.difference."1.0.0" deps {}) }: buildRustCrate {
    crateName = "difference";
    version = "1.0.0";
    authors = [ "Johann Hofmann <mail@johann-hofmann.com>" ];
    sha256 = "0r1p2diin8zykfiifv6v9i3ajimdb1rg6qzxkrfw2n2iy57846qn";
    crateBin = [ {  name = "difference"; } ];
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.difference."1.0.0" or {});
  };
  features_.difference."1.0.0" = deps: f: updateFeatures f (rec {
    difference = fold recursiveUpdate {} [
      { "1.0.0".default = (f.difference."1.0.0".default or true); }
      { "1.0.0".getopts =
        (f.difference."1.0.0".getopts or false) ||
        (f.difference."1.0.0".bin or false) ||
        (difference."1.0.0"."bin" or false); }
    ];
  }) [];


  crates.digest."0.7.2" = deps: { features?(features_.digest."0.7.2" deps {}) }: buildRustCrate {
    crateName = "digest";
    version = "0.7.2";
    authors = [ "RustCrypto Developers" ];
    sha256 = "1aqrvkyiymgf12nnn6ivfdry479czcv69z35szgr8jiiymrmp0v4";
    dependencies = mapFeatures features ([ (crates."generic_array"."${deps."digest"."0.7.2"."generic_array"}" deps) ]);
    features = mkFeatures (features.digest."0.7.2" or {});
  };
  features_.digest."0.7.2" = deps: f: updateFeatures f (rec {
    digest = { "0.7.2".default = (f.digest."0.7.2".default or true); };
    generic_array = { "${deps.digest."0.7.2".generic_array}".default = true; };
  }) [ (features_.generic_array."${deps."digest"."0.7.2"."generic_array"}" deps) ];


  crates.dssim."2.9.9" = deps: { features?(features_.dssim."2.9.9" deps {}) }: buildRustCrate {
    crateName = "dssim";
    version = "2.9.9";
    authors = [ "Kornel <pornel@pornel.net>" ];
    sha256 = "1z59d802ga839qhh99c1n8j4z6ggy9yly9cs0gzs9k3m6l88ahpc";
    crateBin = [ {  name = "dssim";  path = "src/main.rs"; } ];
    dependencies = mapFeatures features ([ (crates."getopts"."${deps."dssim"."2.9.9"."getopts"}" deps) (crates."imgref"."${deps."dssim"."2.9.9"."imgref"}" deps) (crates."itertools"."${deps."dssim"."2.9.9"."itertools"}" deps) (crates."lodepng"."${deps."dssim"."2.9.9"."lodepng"}" deps) (crates."rayon"."${deps."dssim"."2.9.9"."rayon"}" deps) (crates."rgb"."${deps."dssim"."2.9.9"."rgb"}" deps) ]);
  };
  features_.dssim."2.9.9" = deps: f: updateFeatures f (rec {
    dssim = { "2.9.9".default = (f.dssim."2.9.9".default or true); };
    getopts = { "${deps.dssim."2.9.9".getopts}".default = true; };
    imgref = { "${deps.dssim."2.9.9".imgref}".default = true; };
    itertools = { "${deps.dssim."2.9.9".itertools}".default = true; };
    lodepng = { "${deps.dssim."2.9.9".lodepng}".default = true; };
    rayon = { "${deps.dssim."2.9.9".rayon}".default = true; };
    rgb = { "${deps.dssim."2.9.9".rgb}".default = true; };
  }) [ (features_.getopts."${deps."dssim"."2.9.9"."getopts"}" deps)
       (features_.imgref."${deps."dssim"."2.9.9"."imgref"}" deps)
       (features_.itertools."${deps."dssim"."2.9.9"."itertools"}" deps)
       (features_.lodepng."${deps."dssim"."2.9.9"."lodepng"}" deps)
       (features_.rayon."${deps."dssim"."2.9.9"."rayon"}" deps)
       (features_.rgb."${deps."dssim"."2.9.9"."rgb"}" deps) ];


  crates.dtoa."0.4.2" = deps: { features?(features_.dtoa."0.4.2" deps {}) }: buildRustCrate {
    crateName = "dtoa";
    version = "0.4.2";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1bxsh6fags7nr36vlz07ik2a1rzyipc8x1y30kjk832hf2pzadmw";
  };
  features_.dtoa."0.4.2" = deps: f: updateFeatures f (rec {
    dtoa = { "0.4.2".default = (f.dtoa."0.4.2".default or true); };
  }) [];


  crates.dunce."0.1.1" = deps: { features?(features_.dunce."0.1.1" deps {}) }: buildRustCrate {
    crateName = "dunce";
    version = "0.1.1";
    authors = [ "Kornel <kornel@geekhood.net>" ];
    sha256 = "127f4is0g4p1nqgd26wfd7vjb4gya96syj8ylqj1zsmnh5g65jbl";
  };
  features_.dunce."0.1.1" = deps: f: updateFeatures f (rec {
    dunce = { "0.1.1".default = (f.dunce."0.1.1".default or true); };
  }) [];


  crates.either."1.5.0" = deps: { features?(features_.either."1.5.0" deps {}) }: buildRustCrate {
    crateName = "either";
    version = "1.5.0";
    authors = [ "bluss" ];
    sha256 = "1f7kl2ln01y02m8fpd2zrdjiwqmgfvl9nxxrfry3k19d1gd2bsvz";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.either."1.5.0" or {});
  };
  features_.either."1.5.0" = deps: f: updateFeatures f (rec {
    either = fold recursiveUpdate {} [
      { "1.5.0".default = (f.either."1.5.0".default or true); }
      { "1.5.0".use_std =
        (f.either."1.5.0".use_std or false) ||
        (f.either."1.5.0".default or false) ||
        (either."1.5.0"."default" or false); }
    ];
  }) [];


  crates.env_logger."0.4.3" = deps: { features?(features_.env_logger."0.4.3" deps {}) }: buildRustCrate {
    crateName = "env_logger";
    version = "0.4.3";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0nrx04p4xa86d5kc7aq4fwvipbqji9cmgy449h47nc9f1chafhgg";
    dependencies = mapFeatures features ([ (crates."log"."${deps."env_logger"."0.4.3"."log"}" deps) ]
      ++ (if features.env_logger."0.4.3".regex or false then [ (crates.regex."0.2.11" deps) ] else []));
    features = mkFeatures (features.env_logger."0.4.3" or {});
  };
  features_.env_logger."0.4.3" = deps: f: updateFeatures f (rec {
    env_logger = fold recursiveUpdate {} [
      { "0.4.3".default = (f.env_logger."0.4.3".default or true); }
      { "0.4.3".regex =
        (f.env_logger."0.4.3".regex or false) ||
        (f.env_logger."0.4.3".default or false) ||
        (env_logger."0.4.3"."default" or false); }
    ];
    log = { "${deps.env_logger."0.4.3".log}".default = true; };
    regex = { "${deps.env_logger."0.4.3".regex}".default = true; };
  }) [ (features_.log."${deps."env_logger"."0.4.3"."log"}" deps)
       (features_.regex."${deps."env_logger"."0.4.3"."regex"}" deps) ];


  crates.error."0.1.9" = deps: { features?(features_.error."0.1.9" deps {}) }: buildRustCrate {
    crateName = "error";
    version = "0.1.9";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "15nczsfw869jn7f2q225b3xh097442j8ahcy1ayj7az2k1k6j3jm";
    dependencies = mapFeatures features ([ (crates."traitobject"."${deps."error"."0.1.9"."traitobject"}" deps) (crates."typeable"."${deps."error"."0.1.9"."typeable"}" deps) ]);
  };
  features_.error."0.1.9" = deps: f: updateFeatures f (rec {
    error = { "0.1.9".default = (f.error."0.1.9".default or true); };
    traitobject = { "${deps.error."0.1.9".traitobject}".default = true; };
    typeable = { "${deps.error."0.1.9".typeable}".default = true; };
  }) [ (features_.traitobject."${deps."error"."0.1.9"."traitobject"}" deps)
       (features_.typeable."${deps."error"."0.1.9"."typeable"}" deps) ];


  crates.error_chain."0.11.0" = deps: { features?(features_.error_chain."0.11.0" deps {}) }: buildRustCrate {
    crateName = "error-chain";
    version = "0.11.0";
    authors = [ "Brian Anderson <banderson@mozilla.com>" "Paul Colomiets <paul@colomiets.name>" "Colin Kiegel <kiegel@gmx.de>" "Yamakaky <yamakaky@yamaworld.fr>" ];
    sha256 = "19nz17q6dzp0mx2jhh9qbj45gkvvgcl7zq9z2ai5a8ihbisfj6d7";
    dependencies = mapFeatures features ([ ]
      ++ (if features.error_chain."0.11.0".backtrace or false then [ (crates.backtrace."0.3.8" deps) ] else []));
    features = mkFeatures (features.error_chain."0.11.0" or {});
  };
  features_.error_chain."0.11.0" = deps: f: updateFeatures f (rec {
    backtrace = { "${deps.error_chain."0.11.0".backtrace}".default = true; };
    error_chain = fold recursiveUpdate {} [
      { "0.11.0".backtrace =
        (f.error_chain."0.11.0".backtrace or false) ||
        (f.error_chain."0.11.0".default or false) ||
        (error_chain."0.11.0"."default" or false); }
      { "0.11.0".default = (f.error_chain."0.11.0".default or true); }
      { "0.11.0".example_generated =
        (f.error_chain."0.11.0".example_generated or false) ||
        (f.error_chain."0.11.0".default or false) ||
        (error_chain."0.11.0"."default" or false); }
    ];
  }) [ (features_.backtrace."${deps."error_chain"."0.11.0"."backtrace"}" deps) ];


  crates.fake_simd."0.1.2" = deps: { features?(features_.fake_simd."0.1.2" deps {}) }: buildRustCrate {
    crateName = "fake-simd";
    version = "0.1.2";
    authors = [ "The Rust-Crypto Project Developers" ];
    sha256 = "1a0f1j66nkwfy17s06vm2bn9vh8vy8llcijfhh9m10p58v08661a";
  };
  features_.fake_simd."0.1.2" = deps: f: updateFeatures f (rec {
    fake_simd = { "0.1.2".default = (f.fake_simd."0.1.2".default or true); };
  }) [];


  crates.fixedbitset."0.1.9" = deps: { features?(features_.fixedbitset."0.1.9" deps {}) }: buildRustCrate {
    crateName = "fixedbitset";
    version = "0.1.9";
    authors = [ "bluss" ];
    sha256 = "1bkb5aq7h9p4rzlgxagnda1f0dd11q0qz41bmdy11z18q1p8igy1";
  };
  features_.fixedbitset."0.1.9" = deps: f: updateFeatures f (rec {
    fixedbitset = { "0.1.9".default = (f.fixedbitset."0.1.9".default or true); };
  }) [];


  crates.flate2."1.0.1" = deps: { features?(features_.flate2."1.0.1" deps {}) }: buildRustCrate {
    crateName = "flate2";
    version = "1.0.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0hi1r0sz8ca750hq9ym6d3n99g6rmmm8m8hadz2v49pfh6jd6svc";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."flate2"."1.0.1"."libc"}" deps) ]
      ++ (if features.flate2."1.0.1".miniz_oxide_c_api or false then [ (crates.miniz_oxide_c_api."0.1.2" deps) ] else []));
    features = mkFeatures (features.flate2."1.0.1" or {});
  };
  features_.flate2."1.0.1" = deps: f: updateFeatures f (rec {
    flate2 = fold recursiveUpdate {} [
      { "1.0.1".default = (f.flate2."1.0.1".default or true); }
      { "1.0.1".futures =
        (f.flate2."1.0.1".futures or false) ||
        (f.flate2."1.0.1".tokio or false) ||
        (flate2."1.0.1"."tokio" or false); }
      { "1.0.1".libz-sys =
        (f.flate2."1.0.1".libz-sys or false) ||
        (f.flate2."1.0.1".zlib or false) ||
        (flate2."1.0.1"."zlib" or false); }
      { "1.0.1".miniz-sys =
        (f.flate2."1.0.1".miniz-sys or false) ||
        (f.flate2."1.0.1".default or false) ||
        (flate2."1.0.1"."default" or false); }
      { "1.0.1".miniz_oxide_c_api =
        (f.flate2."1.0.1".miniz_oxide_c_api or false) ||
        (f.flate2."1.0.1".rust_backend or false) ||
        (flate2."1.0.1"."rust_backend" or false); }
      { "1.0.1".tokio-io =
        (f.flate2."1.0.1".tokio-io or false) ||
        (f.flate2."1.0.1".tokio or false) ||
        (flate2."1.0.1"."tokio" or false); }
    ];
    libc = { "${deps.flate2."1.0.1".libc}".default = true; };
    miniz_oxide_c_api = { "${deps.flate2."1.0.1".miniz_oxide_c_api}".default = true; };
  }) [ (features_.libc."${deps."flate2"."1.0.1"."libc"}" deps)
       (features_.miniz_oxide_c_api."${deps."flate2"."1.0.1"."miniz_oxide_c_api"}" deps) ];


  crates.fnv."1.0.6" = deps: { features?(features_.fnv."1.0.6" deps {}) }: buildRustCrate {
    crateName = "fnv";
    version = "1.0.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "128mlh23y3gg6ag5h8iiqlcbl59smisdzraqy88ldrf75kbw27ip";
    libPath = "lib.rs";
  };
  features_.fnv."1.0.6" = deps: f: updateFeatures f (rec {
    fnv = { "1.0.6".default = (f.fnv."1.0.6".default or true); };
  }) [];


  crates.foreign_types."0.3.2" = deps: { features?(features_.foreign_types."0.3.2" deps {}) }: buildRustCrate {
    crateName = "foreign-types";
    version = "0.3.2";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "105n8sp2djb1s5lzrw04p7ss3dchr5qa3canmynx396nh3vwm2p8";
    dependencies = mapFeatures features ([ (crates."foreign_types_shared"."${deps."foreign_types"."0.3.2"."foreign_types_shared"}" deps) ]);
  };
  features_.foreign_types."0.3.2" = deps: f: updateFeatures f (rec {
    foreign_types = { "0.3.2".default = (f.foreign_types."0.3.2".default or true); };
    foreign_types_shared = { "${deps.foreign_types."0.3.2".foreign_types_shared}".default = true; };
  }) [ (features_.foreign_types_shared."${deps."foreign_types"."0.3.2"."foreign_types_shared"}" deps) ];


  crates.foreign_types_shared."0.1.1" = deps: { features?(features_.foreign_types_shared."0.1.1" deps {}) }: buildRustCrate {
    crateName = "foreign-types-shared";
    version = "0.1.1";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0b6cnvqbflws8dxywk4589vgbz80049lz4x1g9dfy4s1ppd3g4z5";
  };
  features_.foreign_types_shared."0.1.1" = deps: f: updateFeatures f (rec {
    foreign_types_shared = { "0.1.1".default = (f.foreign_types_shared."0.1.1".default or true); };
  }) [];


  crates.fuchsia_zircon."0.3.3" = deps: { features?(features_.fuchsia_zircon."0.3.3" deps {}) }: buildRustCrate {
    crateName = "fuchsia-zircon";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "0jrf4shb1699r4la8z358vri8318w4mdi6qzfqy30p2ymjlca4gk";
    dependencies = mapFeatures features ([ (crates."bitflags"."${deps."fuchsia_zircon"."0.3.3"."bitflags"}" deps) (crates."fuchsia_zircon_sys"."${deps."fuchsia_zircon"."0.3.3"."fuchsia_zircon_sys"}" deps) ]);
  };
  features_.fuchsia_zircon."0.3.3" = deps: f: updateFeatures f (rec {
    bitflags = { "${deps.fuchsia_zircon."0.3.3".bitflags}".default = true; };
    fuchsia_zircon = { "0.3.3".default = (f.fuchsia_zircon."0.3.3".default or true); };
    fuchsia_zircon_sys = { "${deps.fuchsia_zircon."0.3.3".fuchsia_zircon_sys}".default = true; };
  }) [ (features_.bitflags."${deps."fuchsia_zircon"."0.3.3"."bitflags"}" deps)
       (features_.fuchsia_zircon_sys."${deps."fuchsia_zircon"."0.3.3"."fuchsia_zircon_sys"}" deps) ];


  crates.fuchsia_zircon_sys."0.3.3" = deps: { features?(features_.fuchsia_zircon_sys."0.3.3" deps {}) }: buildRustCrate {
    crateName = "fuchsia-zircon-sys";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "08jp1zxrm9jbrr6l26bjal4dbm8bxfy57ickdgibsqxr1n9j3hf5";
  };
  features_.fuchsia_zircon_sys."0.3.3" = deps: f: updateFeatures f (rec {
    fuchsia_zircon_sys = { "0.3.3".default = (f.fuchsia_zircon_sys."0.3.3".default or true); };
  }) [];


  crates.futures."0.1.21" = deps: { features?(features_.futures."0.1.21" deps {}) }: buildRustCrate {
    crateName = "futures";
    version = "0.1.21";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0v4xrgkqx189b3b4lad2z5l9ay261p9412bzcdh1z6agxwhldr40";
    features = mkFeatures (features.futures."0.1.21" or {});
  };
  features_.futures."0.1.21" = deps: f: updateFeatures f (rec {
    futures = fold recursiveUpdate {} [
      { "0.1.21".default = (f.futures."0.1.21".default or true); }
      { "0.1.21".use_std =
        (f.futures."0.1.21".use_std or false) ||
        (f.futures."0.1.21".default or false) ||
        (futures."0.1.21"."default" or false); }
      { "0.1.21".with-deprecated =
        (f.futures."0.1.21".with-deprecated or false) ||
        (f.futures."0.1.21".default or false) ||
        (futures."0.1.21"."default" or false); }
    ];
  }) [];


  crates.generic_array."0.9.0" = deps: { features?(features_.generic_array."0.9.0" deps {}) }: buildRustCrate {
    crateName = "generic-array";
    version = "0.9.0";
    authors = [ "Bartłomiej Kamiński <fizyk20@gmail.com>" ];
    sha256 = "1gk3g5yxvh361syfz38nlf6vg7d0qx7crpa83mnqzaf9dymz19g7";
    libName = "generic_array";
    dependencies = mapFeatures features ([ (crates."typenum"."${deps."generic_array"."0.9.0"."typenum"}" deps) ]);
  };
  features_.generic_array."0.9.0" = deps: f: updateFeatures f (rec {
    generic_array = { "0.9.0".default = (f.generic_array."0.9.0".default or true); };
    typenum = { "${deps.generic_array."0.9.0".typenum}".default = true; };
  }) [ (features_.typenum."${deps."generic_array"."0.9.0"."typenum"}" deps) ];


  crates.getopts."0.2.17" = deps: { features?(features_.getopts."0.2.17" deps {}) }: buildRustCrate {
    crateName = "getopts";
    version = "0.2.17";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1rifkxn7njr2w1dsa29hrm26ywgcg8gv1ms00g3vs5mjiabxk0jv";
  };
  features_.getopts."0.2.17" = deps: f: updateFeatures f (rec {
    getopts = { "0.2.17".default = (f.getopts."0.2.17".default or true); };
  }) [];


  crates.gif."0.10.0" = deps: { features?(features_.gif."0.10.0" deps {}) }: buildRustCrate {
    crateName = "gif";
    version = "0.10.0";
    authors = [ "nwin <nwin@users.noreply.github.com>" ];
    sha256 = "0xb4ny3b56ghb917nj1wifglvfnm9ghn10icl6m4g556c73k70mx";
    dependencies = mapFeatures features ([ (crates."color_quant"."${deps."gif"."0.10.0"."color_quant"}" deps) (crates."lzw"."${deps."gif"."0.10.0"."lzw"}" deps) ]);
    features = mkFeatures (features.gif."0.10.0" or {});
  };
  features_.gif."0.10.0" = deps: f: updateFeatures f (rec {
    color_quant = { "${deps.gif."0.10.0".color_quant}".default = true; };
    gif = fold recursiveUpdate {} [
      { "0.10.0".default = (f.gif."0.10.0".default or true); }
      { "0.10.0".libc =
        (f.gif."0.10.0".libc or false) ||
        (f.gif."0.10.0".c_api or false) ||
        (gif."0.10.0"."c_api" or false); }
      { "0.10.0".raii_no_panic =
        (f.gif."0.10.0".raii_no_panic or false) ||
        (f.gif."0.10.0".default or false) ||
        (gif."0.10.0"."default" or false); }
    ];
    lzw = { "${deps.gif."0.10.0".lzw}".default = true; };
  }) [ (features_.color_quant."${deps."gif"."0.10.0"."color_quant"}" deps)
       (features_.lzw."${deps."gif"."0.10.0"."lzw"}" deps) ];


  crates.glob."0.2.11" = deps: { features?(features_.glob."0.2.11" deps {}) }: buildRustCrate {
    crateName = "glob";
    version = "0.2.11";
    authors = [ "The Rust Project Developers" ];
    sha256 = "104389jjxs8r2f5cc9p0axhjmndgln60ih5x4f00ccgg9d3zarlf";
  };
  features_.glob."0.2.11" = deps: f: updateFeatures f (rec {
    glob = { "0.2.11".default = (f.glob."0.2.11".default or true); };
  }) [];


  crates.http_muncher."0.3.2" = deps: { features?(features_.http_muncher."0.3.2" deps {}) }: buildRustCrate {
    crateName = "http-muncher";
    version = "0.3.2";
    authors = [ "Nikita Baksalyar <nikita.baksalyar@gmail.com>" ];
    sha256 = "17ivwahqhn29x5pzn6c7gbxig2kxzjxbic64hn9wygq61h2rnvn5";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."http_muncher"."0.3.2"."libc"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."cc"."${deps."http_muncher"."0.3.2"."cc"}" deps) ]);
  };
  features_.http_muncher."0.3.2" = deps: f: updateFeatures f (rec {
    cc = { "${deps.http_muncher."0.3.2".cc}".default = true; };
    http_muncher = { "0.3.2".default = (f.http_muncher."0.3.2".default or true); };
    libc = { "${deps.http_muncher."0.3.2".libc}".default = true; };
  }) [ (features_.libc."${deps."http_muncher"."0.3.2"."libc"}" deps)
       (features_.cc."${deps."http_muncher"."0.3.2"."cc"}" deps) ];


  crates.httparse."1.2.4" = deps: { features?(features_.httparse."1.2.4" deps {}) }: buildRustCrate {
    crateName = "httparse";
    version = "1.2.4";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "169grgxpsq0jaa2fk913z692a6qi8c2n1kypsay124b37720d8ll";
    features = mkFeatures (features.httparse."1.2.4" or {});
  };
  features_.httparse."1.2.4" = deps: f: updateFeatures f (rec {
    httparse = fold recursiveUpdate {} [
      { "1.2.4".default = (f.httparse."1.2.4".default or true); }
      { "1.2.4".std =
        (f.httparse."1.2.4".std or false) ||
        (f.httparse."1.2.4".default or false) ||
        (httparse."1.2.4"."default" or false); }
    ];
  }) [];


  crates.hyper."0.10.12" = deps: { features?(features_.hyper."0.10.12" deps {}) }: buildRustCrate {
    crateName = "hyper";
    version = "0.10.12";
    authors = [ "Sean McArthur <sean.monstar@gmail.com>" "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "074a6cpz1nznndj933jwyi9f2h7zwwgi0cnra7d1c7qldbfx95ig";
    dependencies = mapFeatures features ([ (crates."base64"."${deps."hyper"."0.10.12"."base64"}" deps) (crates."httparse"."${deps."hyper"."0.10.12"."httparse"}" deps) (crates."language_tags"."${deps."hyper"."0.10.12"."language_tags"}" deps) (crates."log"."${deps."hyper"."0.10.12"."log"}" deps) (crates."mime"."${deps."hyper"."0.10.12"."mime"}" deps) (crates."num_cpus"."${deps."hyper"."0.10.12"."num_cpus"}" deps) (crates."time"."${deps."hyper"."0.10.12"."time"}" deps) (crates."traitobject"."${deps."hyper"."0.10.12"."traitobject"}" deps) (crates."typeable"."${deps."hyper"."0.10.12"."typeable"}" deps) (crates."unicase"."${deps."hyper"."0.10.12"."unicase"}" deps) (crates."url"."${deps."hyper"."0.10.12"."url"}" deps) ]);
    features = mkFeatures (features.hyper."0.10.12" or {});
  };
  features_.hyper."0.10.12" = deps: f: updateFeatures f (rec {
    base64 = { "${deps.hyper."0.10.12".base64}".default = true; };
    httparse = { "${deps.hyper."0.10.12".httparse}".default = true; };
    hyper = { "0.10.12".default = (f.hyper."0.10.12".default or true); };
    language_tags = { "${deps.hyper."0.10.12".language_tags}".default = true; };
    log = { "${deps.hyper."0.10.12".log}".default = true; };
    mime = { "${deps.hyper."0.10.12".mime}".default = true; };
    num_cpus = { "${deps.hyper."0.10.12".num_cpus}".default = true; };
    time = { "${deps.hyper."0.10.12".time}".default = true; };
    traitobject = { "${deps.hyper."0.10.12".traitobject}".default = true; };
    typeable = { "${deps.hyper."0.10.12".typeable}".default = true; };
    unicase = { "${deps.hyper."0.10.12".unicase}".default = true; };
    url = { "${deps.hyper."0.10.12".url}".default = true; };
  }) [ (features_.base64."${deps."hyper"."0.10.12"."base64"}" deps)
       (features_.httparse."${deps."hyper"."0.10.12"."httparse"}" deps)
       (features_.language_tags."${deps."hyper"."0.10.12"."language_tags"}" deps)
       (features_.log."${deps."hyper"."0.10.12"."log"}" deps)
       (features_.mime."${deps."hyper"."0.10.12"."mime"}" deps)
       (features_.num_cpus."${deps."hyper"."0.10.12"."num_cpus"}" deps)
       (features_.time."${deps."hyper"."0.10.12"."time"}" deps)
       (features_.traitobject."${deps."hyper"."0.10.12"."traitobject"}" deps)
       (features_.typeable."${deps."hyper"."0.10.12"."typeable"}" deps)
       (features_.unicase."${deps."hyper"."0.10.12"."unicase"}" deps)
       (features_.url."${deps."hyper"."0.10.12"."url"}" deps) ];


  crates.hyper_native_tls."0.2.4" = deps: { features?(features_.hyper_native_tls."0.2.4" deps {}) }: buildRustCrate {
    crateName = "hyper-native-tls";
    version = "0.2.4";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1niqi1z1a3xfb9qaawy3fzrgaf8qwr925fqjswlrdjczq176f1iy";
    dependencies = mapFeatures features ([ (crates."antidote"."${deps."hyper_native_tls"."0.2.4"."antidote"}" deps) (crates."hyper"."${deps."hyper_native_tls"."0.2.4"."hyper"}" deps) (crates."native_tls"."${deps."hyper_native_tls"."0.2.4"."native_tls"}" deps) ]);
  };
  features_.hyper_native_tls."0.2.4" = deps: f: updateFeatures f (rec {
    antidote = { "${deps.hyper_native_tls."0.2.4".antidote}".default = true; };
    hyper = { "${deps.hyper_native_tls."0.2.4".hyper}".default = true; };
    hyper_native_tls = { "0.2.4".default = (f.hyper_native_tls."0.2.4".default or true); };
    native_tls = { "${deps.hyper_native_tls."0.2.4".native_tls}".default = true; };
  }) [ (features_.antidote."${deps."hyper_native_tls"."0.2.4"."antidote"}" deps)
       (features_.hyper."${deps."hyper_native_tls"."0.2.4"."hyper"}" deps)
       (features_.native_tls."${deps."hyper_native_tls"."0.2.4"."native_tls"}" deps) ];


  crates.hyper_openssl."0.2.7" = deps: { features?(features_.hyper_openssl."0.2.7" deps {}) }: buildRustCrate {
    crateName = "hyper-openssl";
    version = "0.2.7";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0xfc64m15lx1l9nn3ad7713kvaiir1l8vrpmymhp7qclwi4197sj";
    dependencies = mapFeatures features ([ (crates."antidote"."${deps."hyper_openssl"."0.2.7"."antidote"}" deps) (crates."hyper"."${deps."hyper_openssl"."0.2.7"."hyper"}" deps) (crates."openssl"."${deps."hyper_openssl"."0.2.7"."openssl"}" deps) ]);
  };
  features_.hyper_openssl."0.2.7" = deps: f: updateFeatures f (rec {
    antidote = { "${deps.hyper_openssl."0.2.7".antidote}".default = true; };
    hyper = { "${deps.hyper_openssl."0.2.7".hyper}".default = true; };
    hyper_openssl = { "0.2.7".default = (f.hyper_openssl."0.2.7".default or true); };
    openssl = { "${deps.hyper_openssl."0.2.7".openssl}".default = true; };
  }) [ (features_.antidote."${deps."hyper_openssl"."0.2.7"."antidote"}" deps)
       (features_.hyper."${deps."hyper_openssl"."0.2.7"."hyper"}" deps)
       (features_.openssl."${deps."hyper_openssl"."0.2.7"."openssl"}" deps) ];


  crates.idna."0.1.4" = deps: { features?(features_.idna."0.1.4" deps {}) }: buildRustCrate {
    crateName = "idna";
    version = "0.1.4";
    authors = [ "The rust-url developers" ];
    sha256 = "15j44qgjx1skwg9i7f4cm36ni4n99b1ayx23yxx7axxcw8vjf336";
    dependencies = mapFeatures features ([ (crates."matches"."${deps."idna"."0.1.4"."matches"}" deps) (crates."unicode_bidi"."${deps."idna"."0.1.4"."unicode_bidi"}" deps) (crates."unicode_normalization"."${deps."idna"."0.1.4"."unicode_normalization"}" deps) ]);
  };
  features_.idna."0.1.4" = deps: f: updateFeatures f (rec {
    idna = { "0.1.4".default = (f.idna."0.1.4".default or true); };
    matches = { "${deps.idna."0.1.4".matches}".default = true; };
    unicode_bidi = { "${deps.idna."0.1.4".unicode_bidi}".default = true; };
    unicode_normalization = { "${deps.idna."0.1.4".unicode_normalization}".default = true; };
  }) [ (features_.matches."${deps."idna"."0.1.4"."matches"}" deps)
       (features_.unicode_bidi."${deps."idna"."0.1.4"."unicode_bidi"}" deps)
       (features_.unicode_normalization."${deps."idna"."0.1.4"."unicode_normalization"}" deps) ];


  crates.ieee754."0.2.2" = deps: { features?(features_.ieee754."0.2.2" deps {}) }: buildRustCrate {
    crateName = "ieee754";
    version = "0.2.2";
    authors = [ "Huon Wilson <dbau.pp@gmail.com>" ];
    sha256 = "1x69p42vg3aahcp2pjd36nq0i8bbs0a715lb155vgyrrp7nvpvyd";
    features = mkFeatures (features.ieee754."0.2.2" or {});
  };
  features_.ieee754."0.2.2" = deps: f: updateFeatures f (rec {
    ieee754 = { "0.2.2".default = (f.ieee754."0.2.2".default or true); };
  }) [];


  crates.imagequant."2.11.9" = deps: { features?(features_.imagequant."2.11.9" deps {}) }: buildRustCrate {
    crateName = "imagequant";
    version = "2.11.9";
    authors = [ "Kornel <kornel@pngquant.org>" ];
    sha256 = "14c3399mk6jivqjv50g87vmpv5jp5xkhf8hnq3kva55jzxfrcsqa";
    dependencies = mapFeatures features ([ (crates."imagequant_sys"."${deps."imagequant"."2.11.9"."imagequant_sys"}" deps) (crates."libc"."${deps."imagequant"."2.11.9"."libc"}" deps) ]);
    features = mkFeatures (features.imagequant."2.11.9" or {});
  };
  features_.imagequant."2.11.9" = deps: f: updateFeatures f (rec {
    imagequant = fold recursiveUpdate {} [
      { "2.11.9".default = (f.imagequant."2.11.9".default or true); }
      { "2.11.9".openmp =
        (f.imagequant."2.11.9".openmp or false) ||
        (f.imagequant."2.11.9".openmp-static or false) ||
        (imagequant."2.11.9"."openmp-static" or false); }
      { "2.11.9".sse =
        (f.imagequant."2.11.9".sse or false) ||
        (f.imagequant."2.11.9".default or false) ||
        (imagequant."2.11.9"."default" or false); }
    ];
    imagequant_sys = fold recursiveUpdate {} [
      { "${deps.imagequant."2.11.9".imagequant_sys}".default = true; }
      { "2.12.0".openmp =
        (f.imagequant_sys."2.12.0".openmp or false) ||
        (imagequant."2.11.9"."openmp" or false) ||
        (f."imagequant"."2.11.9"."openmp" or false); }
      { "2.12.0".openmp-static =
        (f.imagequant_sys."2.12.0".openmp-static or false) ||
        (imagequant."2.11.9"."openmp-static" or false) ||
        (f."imagequant"."2.11.9"."openmp-static" or false); }
      { "2.12.0".sse =
        (f.imagequant_sys."2.12.0".sse or false) ||
        (imagequant."2.11.9"."sse" or false) ||
        (f."imagequant"."2.11.9"."sse" or false); }
    ];
    libc = { "${deps.imagequant."2.11.9".libc}".default = true; };
  }) [ (features_.imagequant_sys."${deps."imagequant"."2.11.9"."imagequant_sys"}" deps)
       (features_.libc."${deps."imagequant"."2.11.9"."libc"}" deps) ];


  crates.imagequant_sys."2.12.0" = deps: { features?(features_.imagequant_sys."2.12.0" deps {}) }: buildRustCrate {
    crateName = "imagequant-sys";
    version = "2.12.0";
    authors = [ "Kornel Lesiński <kornel@pngquant.org>" ];
    sha256 = "17m0sdxl42k2blf0z4nz941xdni1glw5dvs3sd7vny2179z8xbqm";
    libPath = "rust/libimagequant.rs";
    libName = "imagequant_sys";
    type = ["cdylib" "staticlib" "lib"];
    build = "rust/build.rs";
    dependencies = mapFeatures features ([ (crates."rgb"."${deps."imagequant_sys"."2.12.0"."rgb"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."cc"."${deps."imagequant_sys"."2.12.0"."cc"}" deps) ]);
    features = mkFeatures (features.imagequant_sys."2.12.0" or {});
  };
  features_.imagequant_sys."2.12.0" = deps: f: updateFeatures f (rec {
    cc = { "${deps.imagequant_sys."2.12.0".cc}".default = true; };
    imagequant_sys = fold recursiveUpdate {} [
      { "2.12.0".default = (f.imagequant_sys."2.12.0".default or true); }
      { "2.12.0".openmp =
        (f.imagequant_sys."2.12.0".openmp or false) ||
        (f.imagequant_sys."2.12.0".openmp-static or false) ||
        (imagequant_sys."2.12.0"."openmp-static" or false); }
      { "2.12.0".openmp-sys =
        (f.imagequant_sys."2.12.0".openmp-sys or false) ||
        (f.imagequant_sys."2.12.0".openmp or false) ||
        (imagequant_sys."2.12.0"."openmp" or false); }
      { "2.12.0".sse =
        (f.imagequant_sys."2.12.0".sse or false) ||
        (f.imagequant_sys."2.12.0".default or false) ||
        (imagequant_sys."2.12.0"."default" or false); }
    ];
    rgb = { "${deps.imagequant_sys."2.12.0".rgb}".default = true; };
  }) [ (features_.rgb."${deps."imagequant_sys"."2.12.0"."rgb"}" deps)
       (features_.cc."${deps."imagequant_sys"."2.12.0"."cc"}" deps) ];


  crates.imgref."1.3.4" = deps: { features?(features_.imgref."1.3.4" deps {}) }: buildRustCrate {
    crateName = "imgref";
    version = "1.3.4";
    authors = [ "Kornel Lesiński <kornel@geekhood.net>" ];
    sha256 = "0fzjyvlwc2d4vnpj579msa00qi34nnxb5slb4ivmgssb8f1xjj48";
  };
  features_.imgref."1.3.4" = deps: f: updateFeatures f (rec {
    imgref = { "1.3.4".default = (f.imgref."1.3.4".default or true); };
  }) [];


  crates.iron."0.5.1" = deps: { features?(features_.iron."0.5.1" deps {}) }: buildRustCrate {
    crateName = "iron";
    version = "0.5.1";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" "Zach Pomerantz <zmp@umich.edu>" "Michael Sproul <micsproul@gmail.com>" "Patrick Tran <patrick.tran06@gmail.com>" ];
    sha256 = "0wzl521jvbckspjgmlhgx1cx4fr9kr64iff1bdxbd9f28w49sbdx";
    libPath = "src/lib.rs";
    dependencies = mapFeatures features ([ (crates."conduit_mime_types"."${deps."iron"."0.5.1"."conduit_mime_types"}" deps) (crates."error"."${deps."iron"."0.5.1"."error"}" deps) (crates."hyper"."${deps."iron"."0.5.1"."hyper"}" deps) (crates."lazy_static"."${deps."iron"."0.5.1"."lazy_static"}" deps) (crates."log"."${deps."iron"."0.5.1"."log"}" deps) (crates."modifier"."${deps."iron"."0.5.1"."modifier"}" deps) (crates."num_cpus"."${deps."iron"."0.5.1"."num_cpus"}" deps) (crates."plugin"."${deps."iron"."0.5.1"."plugin"}" deps) (crates."typemap"."${deps."iron"."0.5.1"."typemap"}" deps) (crates."url"."${deps."iron"."0.5.1"."url"}" deps) ]);
    features = mkFeatures (features.iron."0.5.1" or {});
  };
  features_.iron."0.5.1" = deps: f: updateFeatures f (rec {
    conduit_mime_types = { "${deps.iron."0.5.1".conduit_mime_types}".default = true; };
    error = { "${deps.iron."0.5.1".error}".default = true; };
    hyper = { "${deps.iron."0.5.1".hyper}".default = true; };
    iron = fold recursiveUpdate {} [
      { "0.5.1".default = (f.iron."0.5.1".default or true); }
      { "0.5.1".hyper-native-tls =
        (f.iron."0.5.1".hyper-native-tls or false) ||
        (f.iron."0.5.1".native-tls-example or false) ||
        (iron."0.5.1"."native-tls-example" or false); }
    ];
    lazy_static = { "${deps.iron."0.5.1".lazy_static}".default = true; };
    log = { "${deps.iron."0.5.1".log}".default = true; };
    modifier = { "${deps.iron."0.5.1".modifier}".default = true; };
    num_cpus = { "${deps.iron."0.5.1".num_cpus}".default = true; };
    plugin = { "${deps.iron."0.5.1".plugin}".default = true; };
    typemap = { "${deps.iron."0.5.1".typemap}".default = true; };
    url = { "${deps.iron."0.5.1".url}".default = true; };
  }) [ (features_.conduit_mime_types."${deps."iron"."0.5.1"."conduit_mime_types"}" deps)
       (features_.error."${deps."iron"."0.5.1"."error"}" deps)
       (features_.hyper."${deps."iron"."0.5.1"."hyper"}" deps)
       (features_.lazy_static."${deps."iron"."0.5.1"."lazy_static"}" deps)
       (features_.log."${deps."iron"."0.5.1"."log"}" deps)
       (features_.modifier."${deps."iron"."0.5.1"."modifier"}" deps)
       (features_.num_cpus."${deps."iron"."0.5.1"."num_cpus"}" deps)
       (features_.plugin."${deps."iron"."0.5.1"."plugin"}" deps)
       (features_.typemap."${deps."iron"."0.5.1"."typemap"}" deps)
       (features_.url."${deps."iron"."0.5.1"."url"}" deps) ];


  crates.itertools."0.7.8" = deps: { features?(features_.itertools."0.7.8" deps {}) }: buildRustCrate {
    crateName = "itertools";
    version = "0.7.8";
    authors = [ "bluss" ];
    sha256 = "0ib30cd7d1icjxsa13mji1gry3grp72kx8p33yd84mphdbc3d357";
    dependencies = mapFeatures features ([ (crates."either"."${deps."itertools"."0.7.8"."either"}" deps) ]);
    features = mkFeatures (features.itertools."0.7.8" or {});
  };
  features_.itertools."0.7.8" = deps: f: updateFeatures f (rec {
    either = { "${deps.itertools."0.7.8".either}".default = (f.either."${deps.itertools."0.7.8".either}".default or false); };
    itertools = fold recursiveUpdate {} [
      { "0.7.8".default = (f.itertools."0.7.8".default or true); }
      { "0.7.8".use_std =
        (f.itertools."0.7.8".use_std or false) ||
        (f.itertools."0.7.8".default or false) ||
        (itertools."0.7.8"."default" or false); }
    ];
  }) [ (features_.either."${deps."itertools"."0.7.8"."either"}" deps) ];


  crates.itoa."0.4.1" = deps: { features?(features_.itoa."0.4.1" deps {}) }: buildRustCrate {
    crateName = "itoa";
    version = "0.4.1";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1jyrsmrm5q4r2ipmq5hvvkqg0mgnlbk44lm7gr0v9ymvbrh2gbij";
    features = mkFeatures (features.itoa."0.4.1" or {});
  };
  features_.itoa."0.4.1" = deps: f: updateFeatures f (rec {
    itoa = fold recursiveUpdate {} [
      { "0.4.1".default = (f.itoa."0.4.1".default or true); }
      { "0.4.1".std =
        (f.itoa."0.4.1".std or false) ||
        (f.itoa."0.4.1".default or false) ||
        (itoa."0.4.1"."default" or false); }
    ];
  }) [];


  crates.kernel32_sys."0.2.2" = deps: { features?(features_.kernel32_sys."0.2.2" deps {}) }: buildRustCrate {
    crateName = "kernel32-sys";
    version = "0.2.2";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
    libName = "kernel32";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."winapi"."${deps."kernel32_sys"."0.2.2"."winapi"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."winapi_build"."${deps."kernel32_sys"."0.2.2"."winapi_build"}" deps) ]);
  };
  features_.kernel32_sys."0.2.2" = deps: f: updateFeatures f (rec {
    kernel32_sys = { "0.2.2".default = (f.kernel32_sys."0.2.2".default or true); };
    winapi = { "${deps.kernel32_sys."0.2.2".winapi}".default = true; };
    winapi_build = { "${deps.kernel32_sys."0.2.2".winapi_build}".default = true; };
  }) [ (features_.winapi."${deps."kernel32_sys"."0.2.2"."winapi"}" deps)
       (features_.winapi_build."${deps."kernel32_sys"."0.2.2"."winapi_build"}" deps) ];


  crates.language_tags."0.2.2" = deps: { features?(features_.language_tags."0.2.2" deps {}) }: buildRustCrate {
    crateName = "language-tags";
    version = "0.2.2";
    authors = [ "Pyfisch <pyfisch@gmail.com>" ];
    sha256 = "1zkrdzsqzzc7509kd7nngdwrp461glm2g09kqpzaqksp82frjdvy";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.language_tags."0.2.2" or {});
  };
  features_.language_tags."0.2.2" = deps: f: updateFeatures f (rec {
    language_tags = fold recursiveUpdate {} [
      { "0.2.2".default = (f.language_tags."0.2.2".default or true); }
      { "0.2.2".heapsize =
        (f.language_tags."0.2.2".heapsize or false) ||
        (f.language_tags."0.2.2".heap_size or false) ||
        (language_tags."0.2.2"."heap_size" or false); }
      { "0.2.2".heapsize_plugin =
        (f.language_tags."0.2.2".heapsize_plugin or false) ||
        (f.language_tags."0.2.2".heap_size or false) ||
        (language_tags."0.2.2"."heap_size" or false); }
    ];
  }) [];


  crates.lazy_static."0.2.11" = deps: { features?(features_.lazy_static."0.2.11" deps {}) }: buildRustCrate {
    crateName = "lazy_static";
    version = "0.2.11";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "1x6871cvpy5b96yv4c7jvpq316fp5d4609s9py7qk6cd6x9k34vm";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazy_static."0.2.11" or {});
  };
  features_.lazy_static."0.2.11" = deps: f: updateFeatures f (rec {
    lazy_static = fold recursiveUpdate {} [
      { "0.2.11".compiletest_rs =
        (f.lazy_static."0.2.11".compiletest_rs or false) ||
        (f.lazy_static."0.2.11".compiletest or false) ||
        (lazy_static."0.2.11"."compiletest" or false); }
      { "0.2.11".default = (f.lazy_static."0.2.11".default or true); }
      { "0.2.11".nightly =
        (f.lazy_static."0.2.11".nightly or false) ||
        (f.lazy_static."0.2.11".spin_no_std or false) ||
        (lazy_static."0.2.11"."spin_no_std" or false); }
      { "0.2.11".spin =
        (f.lazy_static."0.2.11".spin or false) ||
        (f.lazy_static."0.2.11".spin_no_std or false) ||
        (lazy_static."0.2.11"."spin_no_std" or false); }
    ];
  }) [];


  crates.lazy_static."1.0.1" = deps: { features?(features_.lazy_static."1.0.1" deps {}) }: buildRustCrate {
    crateName = "lazy_static";
    version = "1.0.1";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "0c9f86fk0z18fzmjzkbx23wsah2lxpy09wcld5x4p6s9rkys3cj4";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazy_static."1.0.1" or {});
  };
  features_.lazy_static."1.0.1" = deps: f: updateFeatures f (rec {
    lazy_static = fold recursiveUpdate {} [
      { "1.0.1".default = (f.lazy_static."1.0.1".default or true); }
      { "1.0.1".nightly =
        (f.lazy_static."1.0.1".nightly or false) ||
        (f.lazy_static."1.0.1".spin_no_std or false) ||
        (lazy_static."1.0.1"."spin_no_std" or false); }
      { "1.0.1".spin =
        (f.lazy_static."1.0.1".spin or false) ||
        (f.lazy_static."1.0.1".spin_no_std or false) ||
        (lazy_static."1.0.1"."spin_no_std" or false); }
    ];
  }) [];


  crates.lcms2."5.0.1" = deps: { features?(features_.lcms2."5.0.1" deps {}) }: buildRustCrate {
    crateName = "lcms2";
    version = "5.0.1";
    authors = [ "Kornel Lesiński <kornel@geekhood.net>" ];
    sha256 = "1x14yqvpm4q1wln31cn3wqa907lsyqgjg7czkg8shbarv4i8857i";
    dependencies = mapFeatures features ([ (crates."foreign_types"."${deps."lcms2"."5.0.1"."foreign_types"}" deps) (crates."lcms2_sys"."${deps."lcms2"."5.0.1"."lcms2_sys"}" deps) ]);
    features = mkFeatures (features.lcms2."5.0.1" or {});
  };
  features_.lcms2."5.0.1" = deps: f: updateFeatures f (rec {
    foreign_types = { "${deps.lcms2."5.0.1".foreign_types}".default = true; };
    lcms2 = { "5.0.1".default = (f.lcms2."5.0.1".default or true); };
    lcms2_sys = fold recursiveUpdate {} [
      { "${deps.lcms2."5.0.1".lcms2_sys}".default = true; }
      { "2.4.8".static =
        (f.lcms2_sys."2.4.8".static or false) ||
        (lcms2."5.0.1"."static" or false) ||
        (f."lcms2"."5.0.1"."static" or false); }
    ];
  }) [ (features_.foreign_types."${deps."lcms2"."5.0.1"."foreign_types"}" deps)
       (features_.lcms2_sys."${deps."lcms2"."5.0.1"."lcms2_sys"}" deps) ];


  crates.lcms2_sys."2.4.8" = deps: { features?(features_.lcms2_sys."2.4.8" deps {}) }: buildRustCrate {
    crateName = "lcms2-sys";
    version = "2.4.8";
    authors = [ "Kornel Lesiński <kornel@geekhood.net>" ];
    sha256 = "1zj0x3002k6p8rivj693kd87ng7by3qsp0cm36daf6bag9rkvsby";
    build = "src/build.rs";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."lcms2_sys"."2.4.8"."libc"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."dunce"."${deps."lcms2_sys"."2.4.8"."dunce"}" deps) ]
      ++ (if features.lcms2_sys."2.4.8".cc or false then [ (crates.cc."1.0.17" deps) ] else [])
      ++ (if features.lcms2_sys."2.4.8".pkg-config or false then [ (crates.pkg_config."0.3.11" deps) ] else []));
    features = mkFeatures (features.lcms2_sys."2.4.8" or {});
  };
  features_.lcms2_sys."2.4.8" = deps: f: updateFeatures f (rec {
    cc = fold recursiveUpdate {} [
      { "${deps.lcms2_sys."2.4.8".cc}"."parallel" = true; }
      { "${deps.lcms2_sys."2.4.8".cc}".default = true; }
    ];
    dunce = { "${deps.lcms2_sys."2.4.8".dunce}".default = true; };
    lcms2_sys = fold recursiveUpdate {} [
      { "2.4.8".cc =
        (f.lcms2_sys."2.4.8".cc or false) ||
        (f.lcms2_sys."2.4.8".static or false) ||
        (lcms2_sys."2.4.8"."static" or false) ||
        (f.lcms2_sys."2.4.8".static-fallback or false) ||
        (lcms2_sys."2.4.8"."static-fallback" or false); }
      { "2.4.8".default = (f.lcms2_sys."2.4.8".default or true); }
      { "2.4.8".dynamic =
        (f.lcms2_sys."2.4.8".dynamic or false) ||
        (f.lcms2_sys."2.4.8".default or false) ||
        (lcms2_sys."2.4.8"."default" or false); }
      { "2.4.8".pkg-config =
        (f.lcms2_sys."2.4.8".pkg-config or false) ||
        (f.lcms2_sys."2.4.8".dynamic or false) ||
        (lcms2_sys."2.4.8"."dynamic" or false); }
      { "2.4.8".static-fallback =
        (f.lcms2_sys."2.4.8".static-fallback or false) ||
        (f.lcms2_sys."2.4.8".default or false) ||
        (lcms2_sys."2.4.8"."default" or false); }
    ];
    libc = { "${deps.lcms2_sys."2.4.8".libc}".default = true; };
    pkg_config = { "${deps.lcms2_sys."2.4.8".pkg_config}".default = true; };
  }) [ (features_.libc."${deps."lcms2_sys"."2.4.8"."libc"}" deps)
       (features_.cc."${deps."lcms2_sys"."2.4.8"."cc"}" deps)
       (features_.dunce."${deps."lcms2_sys"."2.4.8"."dunce"}" deps)
       (features_.pkg_config."${deps."lcms2_sys"."2.4.8"."pkg_config"}" deps) ];


  crates.libc."0.2.42" = deps: { features?(features_.libc."0.2.42" deps {}) }: buildRustCrate {
    crateName = "libc";
    version = "0.2.42";
    authors = [ "The Rust Project Developers" ];
    sha256 = "064v49hz1zpl081w8c4vwikrkhaxp06y4i9l7x7wx6bjpwp19pjx";
    features = mkFeatures (features.libc."0.2.42" or {});
  };
  features_.libc."0.2.42" = deps: f: updateFeatures f (rec {
    libc = fold recursiveUpdate {} [
      { "0.2.42".default = (f.libc."0.2.42".default or true); }
      { "0.2.42".use_std =
        (f.libc."0.2.42".use_std or false) ||
        (f.libc."0.2.42".default or false) ||
        (libc."0.2.42"."default" or false); }
    ];
  }) [];


  crates.libflate."0.1.15" = deps: { features?(features_.libflate."0.1.15" deps {}) }: buildRustCrate {
    crateName = "libflate";
    version = "0.1.15";
    authors = [ "Takeru Ohta <phjgt308@gmail.com>" ];
    sha256 = "0qzsa4yy9crvkcqkh189pa02i32gw93v01n745nhkyw8vgkz08bm";
    dependencies = mapFeatures features ([ (crates."adler32"."${deps."libflate"."0.1.15"."adler32"}" deps) (crates."byteorder"."${deps."libflate"."0.1.15"."byteorder"}" deps) (crates."crc"."${deps."libflate"."0.1.15"."crc"}" deps) ]);
  };
  features_.libflate."0.1.15" = deps: f: updateFeatures f (rec {
    adler32 = { "${deps.libflate."0.1.15".adler32}".default = true; };
    byteorder = { "${deps.libflate."0.1.15".byteorder}".default = true; };
    crc = { "${deps.libflate."0.1.15".crc}".default = true; };
    libflate = { "0.1.15".default = (f.libflate."0.1.15".default or true); };
  }) [ (features_.adler32."${deps."libflate"."0.1.15"."adler32"}" deps)
       (features_.byteorder."${deps."libflate"."0.1.15"."byteorder"}" deps)
       (features_.crc."${deps."libflate"."0.1.15"."crc"}" deps) ];


  crates.libpng_sys."0.2.6" = deps: { features?(features_.libpng_sys."0.2.6" deps {}) }: buildRustCrate {
    crateName = "libpng-sys";
    version = "0.2.6";
    authors = [ "Kornel <kornel@geekhood.net>" ];
    sha256 = "1rakrqk4glpr6xch02bspbcz2fjlkqslr1mw15bxjcwjj72ncfw3";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."libpng_sys"."0.2.6"."libc"}" deps) ]
      ++ (if features.libpng_sys."0.2.6".libz-sys or false then [ (crates.libz_sys."1.0.18" deps) ] else []));

    buildDependencies = mapFeatures features ([ (crates."cc"."${deps."libpng_sys"."0.2.6"."cc"}" deps) (crates."dunce"."${deps."libpng_sys"."0.2.6"."dunce"}" deps) (crates."pkg_config"."${deps."libpng_sys"."0.2.6"."pkg_config"}" deps) ]);
    features = mkFeatures (features.libpng_sys."0.2.6" or {});
  };
  features_.libpng_sys."0.2.6" = deps: f: updateFeatures f (rec {
    cc = { "${deps.libpng_sys."0.2.6".cc}".default = true; };
    dunce = { "${deps.libpng_sys."0.2.6".dunce}".default = true; };
    libc = { "${deps.libpng_sys."0.2.6".libc}".default = true; };
    libpng_sys = fold recursiveUpdate {} [
      { "0.2.6".default = (f.libpng_sys."0.2.6".default or true); }
      { "0.2.6".libz-sys =
        (f.libpng_sys."0.2.6".libz-sys or false) ||
        (f.libpng_sys."0.2.6".default or false) ||
        (libpng_sys."0.2.6"."default" or false); }
    ];
    libz_sys = { "${deps.libpng_sys."0.2.6".libz_sys}".default = true; };
    pkg_config = { "${deps.libpng_sys."0.2.6".pkg_config}".default = true; };
  }) [ (features_.libc."${deps."libpng_sys"."0.2.6"."libc"}" deps)
       (features_.libz_sys."${deps."libpng_sys"."0.2.6"."libz_sys"}" deps)
       (features_.cc."${deps."libpng_sys"."0.2.6"."cc"}" deps)
       (features_.dunce."${deps."libpng_sys"."0.2.6"."dunce"}" deps)
       (features_.pkg_config."${deps."libpng_sys"."0.2.6"."pkg_config"}" deps) ];


  crates.libz_sys."1.0.18" = deps: { features?(features_.libz_sys."1.0.18" deps {}) }: buildRustCrate {
    crateName = "libz-sys";
    version = "1.0.18";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0lr0rvmmfbfa4g7mhi0l93i8jq86pfcssdv4d40kzfy45ajdcgim";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."libz_sys"."1.0.18"."libc"}" deps) ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else []);

    buildDependencies = mapFeatures features ([ (crates."cc"."${deps."libz_sys"."1.0.18"."cc"}" deps) (crates."pkg_config"."${deps."libz_sys"."1.0.18"."pkg_config"}" deps) ]);
  };
  features_.libz_sys."1.0.18" = deps: f: updateFeatures f (rec {
    cc = { "${deps.libz_sys."1.0.18".cc}".default = true; };
    libc = { "${deps.libz_sys."1.0.18".libc}".default = true; };
    libz_sys = { "1.0.18".default = (f.libz_sys."1.0.18".default or true); };
    pkg_config = { "${deps.libz_sys."1.0.18".pkg_config}".default = true; };
  }) [ (features_.libc."${deps."libz_sys"."1.0.18"."libc"}" deps)
       (features_.cc."${deps."libz_sys"."1.0.18"."cc"}" deps)
       (features_.pkg_config."${deps."libz_sys"."1.0.18"."pkg_config"}" deps) ];


  crates.linked_hash_map."0.4.2" = deps: { features?(features_.linked_hash_map."0.4.2" deps {}) }: buildRustCrate {
    crateName = "linked-hash-map";
    version = "0.4.2";
    authors = [ "Stepan Koltsov <stepan.koltsov@gmail.com>" "Andrew Paseltiner <apaseltiner@gmail.com>" ];
    sha256 = "04da208h6jb69f46j37jnvsw2i1wqplglp4d61csqcrhh83avbgl";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.linked_hash_map."0.4.2" or {});
  };
  features_.linked_hash_map."0.4.2" = deps: f: updateFeatures f (rec {
    linked_hash_map = fold recursiveUpdate {} [
      { "0.4.2".default = (f.linked_hash_map."0.4.2".default or true); }
      { "0.4.2".heapsize =
        (f.linked_hash_map."0.4.2".heapsize or false) ||
        (f.linked_hash_map."0.4.2".heapsize_impl or false) ||
        (linked_hash_map."0.4.2"."heapsize_impl" or false); }
      { "0.4.2".serde =
        (f.linked_hash_map."0.4.2".serde or false) ||
        (f.linked_hash_map."0.4.2".serde_impl or false) ||
        (linked_hash_map."0.4.2"."serde_impl" or false); }
      { "0.4.2".serde_test =
        (f.linked_hash_map."0.4.2".serde_test or false) ||
        (f.linked_hash_map."0.4.2".serde_impl or false) ||
        (linked_hash_map."0.4.2"."serde_impl" or false); }
    ];
  }) [];


  crates.lockless."0.2.0" = deps: { features?(features_.lockless."0.2.0" deps {}) }: buildRustCrate {
    crateName = "lockless";
    version = "0.2.0";
    authors = [ "Diggory Blake <diggsey@googlemail.com>" ];
    sha256 = "1d7c2fghhc0dgljfqni4y8w6pbhakbriavdmh3pv2hnn6rjg79yg";
    dependencies = mapFeatures features ([ (crates."futures"."${deps."lockless"."0.2.0"."futures"}" deps) (crates."parking_lot"."${deps."lockless"."0.2.0"."parking_lot"}" deps) ]);
  };
  features_.lockless."0.2.0" = deps: f: updateFeatures f (rec {
    futures = { "${deps.lockless."0.2.0".futures}".default = true; };
    lockless = { "0.2.0".default = (f.lockless."0.2.0".default or true); };
    parking_lot = { "${deps.lockless."0.2.0".parking_lot}".default = true; };
  }) [ (features_.futures."${deps."lockless"."0.2.0"."futures"}" deps)
       (features_.parking_lot."${deps."lockless"."0.2.0"."parking_lot"}" deps) ];


  crates.lodepng."2.1.5" = deps: { features?(features_.lodepng."2.1.5" deps {}) }: buildRustCrate {
    crateName = "lodepng";
    version = "2.1.5";
    authors = [ "Kornel <kornel@geekhood.net>" "Lode Vandevenne <lvandeve@gmail.com>" ];
    sha256 = "1p80cwcdgin3fjbgvbd1s3a9fagix4zqppdz3mn6kpr4njg2a9gi";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."lodepng"."2.1.5"."libc"}" deps) (crates."rgb"."${deps."lodepng"."2.1.5"."rgb"}" deps) ]);
  };
  features_.lodepng."2.1.5" = deps: f: updateFeatures f (rec {
    libc = { "${deps.lodepng."2.1.5".libc}".default = true; };
    lodepng = { "2.1.5".default = (f.lodepng."2.1.5".default or true); };
    rgb = { "${deps.lodepng."2.1.5".rgb}".default = true; };
  }) [ (features_.libc."${deps."lodepng"."2.1.5"."libc"}" deps)
       (features_.rgb."${deps."lodepng"."2.1.5"."rgb"}" deps) ];


  crates.log."0.3.9" = deps: { features?(features_.log."0.3.9" deps {}) }: buildRustCrate {
    crateName = "log";
    version = "0.3.9";
    authors = [ "The Rust Project Developers" ];
    sha256 = "19i9pwp7lhaqgzangcpw00kc3zsgcqcx84crv07xgz3v7d3kvfa2";
    dependencies = mapFeatures features ([ (crates."log"."${deps."log"."0.3.9"."log"}" deps) ]);
    features = mkFeatures (features.log."0.3.9" or {});
  };
  features_.log."0.3.9" = deps: f: updateFeatures f (rec {
    log = fold recursiveUpdate {} [
      { "${deps.log."0.3.9".log}".default = true; }
      { "0.3.9".default = (f.log."0.3.9".default or true); }
      { "0.3.9".use_std =
        (f.log."0.3.9".use_std or false) ||
        (f.log."0.3.9".default or false) ||
        (log."0.3.9"."default" or false); }
      { "0.4.2".max_level_debug =
        (f.log."0.4.2".max_level_debug or false) ||
        (log."0.3.9"."max_level_debug" or false) ||
        (f."log"."0.3.9"."max_level_debug" or false); }
      { "0.4.2".max_level_error =
        (f.log."0.4.2".max_level_error or false) ||
        (log."0.3.9"."max_level_error" or false) ||
        (f."log"."0.3.9"."max_level_error" or false); }
      { "0.4.2".max_level_info =
        (f.log."0.4.2".max_level_info or false) ||
        (log."0.3.9"."max_level_info" or false) ||
        (f."log"."0.3.9"."max_level_info" or false); }
      { "0.4.2".max_level_off =
        (f.log."0.4.2".max_level_off or false) ||
        (log."0.3.9"."max_level_off" or false) ||
        (f."log"."0.3.9"."max_level_off" or false); }
      { "0.4.2".max_level_trace =
        (f.log."0.4.2".max_level_trace or false) ||
        (log."0.3.9"."max_level_trace" or false) ||
        (f."log"."0.3.9"."max_level_trace" or false); }
      { "0.4.2".max_level_warn =
        (f.log."0.4.2".max_level_warn or false) ||
        (log."0.3.9"."max_level_warn" or false) ||
        (f."log"."0.3.9"."max_level_warn" or false); }
      { "0.4.2".release_max_level_debug =
        (f.log."0.4.2".release_max_level_debug or false) ||
        (log."0.3.9"."release_max_level_debug" or false) ||
        (f."log"."0.3.9"."release_max_level_debug" or false); }
      { "0.4.2".release_max_level_error =
        (f.log."0.4.2".release_max_level_error or false) ||
        (log."0.3.9"."release_max_level_error" or false) ||
        (f."log"."0.3.9"."release_max_level_error" or false); }
      { "0.4.2".release_max_level_info =
        (f.log."0.4.2".release_max_level_info or false) ||
        (log."0.3.9"."release_max_level_info" or false) ||
        (f."log"."0.3.9"."release_max_level_info" or false); }
      { "0.4.2".release_max_level_off =
        (f.log."0.4.2".release_max_level_off or false) ||
        (log."0.3.9"."release_max_level_off" or false) ||
        (f."log"."0.3.9"."release_max_level_off" or false); }
      { "0.4.2".release_max_level_trace =
        (f.log."0.4.2".release_max_level_trace or false) ||
        (log."0.3.9"."release_max_level_trace" or false) ||
        (f."log"."0.3.9"."release_max_level_trace" or false); }
      { "0.4.2".release_max_level_warn =
        (f.log."0.4.2".release_max_level_warn or false) ||
        (log."0.3.9"."release_max_level_warn" or false) ||
        (f."log"."0.3.9"."release_max_level_warn" or false); }
      { "0.4.2".std =
        (f.log."0.4.2".std or false) ||
        (log."0.3.9"."use_std" or false) ||
        (f."log"."0.3.9"."use_std" or false); }
    ];
  }) [ (features_.log."${deps."log"."0.3.9"."log"}" deps) ];


  crates.log."0.4.2" = deps: { features?(features_.log."0.4.2" deps {}) }: buildRustCrate {
    crateName = "log";
    version = "0.4.2";
    authors = [ "The Rust Project Developers" ];
    sha256 = "10f8wyygpff3i5j4v4bcmsy637vzsaah7qx615y74vibn3f8fbyd";
    dependencies = mapFeatures features ([ (crates."cfg_if"."${deps."log"."0.4.2"."cfg_if"}" deps) ]);
    features = mkFeatures (features.log."0.4.2" or {});
  };
  features_.log."0.4.2" = deps: f: updateFeatures f (rec {
    cfg_if = { "${deps.log."0.4.2".cfg_if}".default = true; };
    log = { "0.4.2".default = (f.log."0.4.2".default or true); };
  }) [ (features_.cfg_if."${deps."log"."0.4.2"."cfg_if"}" deps) ];


  crates.lru_cache."0.1.1" = deps: { features?(features_.lru_cache."0.1.1" deps {}) }: buildRustCrate {
    crateName = "lru-cache";
    version = "0.1.1";
    authors = [ "Stepan Koltsov <stepan.koltsov@gmail.com>" ];
    sha256 = "1hl6kii1g54sq649gnscv858mmw7a02xj081l4vcgvrswdi2z8fw";
    dependencies = mapFeatures features ([ (crates."linked_hash_map"."${deps."lru_cache"."0.1.1"."linked_hash_map"}" deps) ]);
    features = mkFeatures (features.lru_cache."0.1.1" or {});
  };
  features_.lru_cache."0.1.1" = deps: f: updateFeatures f (rec {
    linked_hash_map = fold recursiveUpdate {} [
      { "${deps.lru_cache."0.1.1".linked_hash_map}".default = true; }
      { "0.4.2".heapsize_impl =
        (f.linked_hash_map."0.4.2".heapsize_impl or false) ||
        (lru_cache."0.1.1"."heapsize_impl" or false) ||
        (f."lru_cache"."0.1.1"."heapsize_impl" or false); }
    ];
    lru_cache = fold recursiveUpdate {} [
      { "0.1.1".default = (f.lru_cache."0.1.1".default or true); }
      { "0.1.1".heapsize =
        (f.lru_cache."0.1.1".heapsize or false) ||
        (f.lru_cache."0.1.1".heapsize_impl or false) ||
        (lru_cache."0.1.1"."heapsize_impl" or false); }
    ];
  }) [ (features_.linked_hash_map."${deps."lru_cache"."0.1.1"."linked_hash_map"}" deps) ];


  crates.lzw."0.10.0" = deps: { features?(features_.lzw."0.10.0" deps {}) }: buildRustCrate {
    crateName = "lzw";
    version = "0.10.0";
    authors = [ "nwin <nwin@users.noreply.github.com>" ];
    sha256 = "1cfsy2w26kbz9bjaqp9dh1wyyh47rpmhwvj4jpc1rmffbf438fvb";
    features = mkFeatures (features.lzw."0.10.0" or {});
  };
  features_.lzw."0.10.0" = deps: f: updateFeatures f (rec {
    lzw = fold recursiveUpdate {} [
      { "0.10.0".default = (f.lzw."0.10.0".default or true); }
      { "0.10.0".raii_no_panic =
        (f.lzw."0.10.0".raii_no_panic or false) ||
        (f.lzw."0.10.0".default or false) ||
        (lzw."0.10.0"."default" or false); }
    ];
  }) [];


  crates.matches."0.1.6" = deps: { features?(features_.matches."0.1.6" deps {}) }: buildRustCrate {
    crateName = "matches";
    version = "0.1.6";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "1zlrqlbvzxdil8z8ial2ihvxjwvlvg3g8dr0lcdpsjclkclasjan";
    libPath = "lib.rs";
  };
  features_.matches."0.1.6" = deps: f: updateFeatures f (rec {
    matches = { "0.1.6".default = (f.matches."0.1.6".default or true); };
  }) [];


  crates.memchr."2.0.1" = deps: { features?(features_.memchr."2.0.1" deps {}) }: buildRustCrate {
    crateName = "memchr";
    version = "2.0.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" "bluss" ];
    sha256 = "0ls2y47rjwapjdax6bp974gdp06ggm1v8d1h69wyydmh1nhgm5gr";
    dependencies = mapFeatures features ([ ]
      ++ (if features.memchr."2.0.1".libc or false then [ (crates.libc."0.2.42" deps) ] else []));
    features = mkFeatures (features.memchr."2.0.1" or {});
  };
  features_.memchr."2.0.1" = deps: f: updateFeatures f (rec {
    libc = fold recursiveUpdate {} [
      { "${deps.memchr."2.0.1".libc}".default = (f.libc."${deps.memchr."2.0.1".libc}".default or false); }
      { "0.2.42".use_std =
        (f.libc."0.2.42".use_std or false) ||
        (memchr."2.0.1"."use_std" or false) ||
        (f."memchr"."2.0.1"."use_std" or false); }
    ];
    memchr = fold recursiveUpdate {} [
      { "2.0.1".default = (f.memchr."2.0.1".default or true); }
      { "2.0.1".libc =
        (f.memchr."2.0.1".libc or false) ||
        (f.memchr."2.0.1".default or false) ||
        (memchr."2.0.1"."default" or false) ||
        (f.memchr."2.0.1".use_std or false) ||
        (memchr."2.0.1"."use_std" or false); }
      { "2.0.1".use_std =
        (f.memchr."2.0.1".use_std or false) ||
        (f.memchr."2.0.1".default or false) ||
        (memchr."2.0.1"."default" or false); }
    ];
  }) [ (features_.libc."${deps."memchr"."2.0.1"."libc"}" deps) ];


  crates.memoffset."0.2.1" = deps: { features?(features_.memoffset."0.2.1" deps {}) }: buildRustCrate {
    crateName = "memoffset";
    version = "0.2.1";
    authors = [ "Gilad Naaman <gilad.naaman@gmail.com>" ];
    sha256 = "00vym01jk9slibq2nsiilgffp7n6k52a4q3n4dqp0xf5kzxvffcf";
  };
  features_.memoffset."0.2.1" = deps: f: updateFeatures f (rec {
    memoffset = { "0.2.1".default = (f.memoffset."0.2.1".default or true); };
  }) [];


  crates.mime."0.2.6" = deps: { features?(features_.mime."0.2.6" deps {}) }: buildRustCrate {
    crateName = "mime";
    version = "0.2.6";
    authors = [ "Sean McArthur <sean.monstar@gmail.com>" ];
    sha256 = "1skwwa0j3kqd8rm9387zgabjhp07zj99q71nzlhba4lrz9r911b3";
    dependencies = mapFeatures features ([ (crates."log"."${deps."mime"."0.2.6"."log"}" deps) ]);
    features = mkFeatures (features.mime."0.2.6" or {});
  };
  features_.mime."0.2.6" = deps: f: updateFeatures f (rec {
    log = { "${deps.mime."0.2.6".log}".default = true; };
    mime = fold recursiveUpdate {} [
      { "0.2.6".default = (f.mime."0.2.6".default or true); }
      { "0.2.6".heapsize =
        (f.mime."0.2.6".heapsize or false) ||
        (f.mime."0.2.6".heap_size or false) ||
        (mime."0.2.6"."heap_size" or false); }
    ];
  }) [ (features_.log."${deps."mime"."0.2.6"."log"}" deps) ];


  crates.miniz_oxide."0.1.2" = deps: { features?(features_.miniz_oxide."0.1.2" deps {}) }: buildRustCrate {
    crateName = "miniz_oxide";
    version = "0.1.2";
    authors = [ "Frommi <daniil.liferenko@gmail.com>" ];
    sha256 = "1qbrc85w8cyhyhrr4d5lv748cdn72l5i7h68n5w0bgq1jg2iby25";
    dependencies = mapFeatures features ([ (crates."adler32"."${deps."miniz_oxide"."0.1.2"."adler32"}" deps) (crates."libc"."${deps."miniz_oxide"."0.1.2"."libc"}" deps) ]);
  };
  features_.miniz_oxide."0.1.2" = deps: f: updateFeatures f (rec {
    adler32 = { "${deps.miniz_oxide."0.1.2".adler32}".default = true; };
    libc = { "${deps.miniz_oxide."0.1.2".libc}".default = true; };
    miniz_oxide = { "0.1.2".default = (f.miniz_oxide."0.1.2".default or true); };
  }) [ (features_.adler32."${deps."miniz_oxide"."0.1.2"."adler32"}" deps)
       (features_.libc."${deps."miniz_oxide"."0.1.2"."libc"}" deps) ];


  crates.miniz_oxide_c_api."0.1.2" = deps: { features?(features_.miniz_oxide_c_api."0.1.2" deps {}) }: buildRustCrate {
    crateName = "miniz_oxide_c_api";
    version = "0.1.2";
    authors = [ "Frommi <daniil.liferenko@gmail.com>" ];
    sha256 = "0j8jznyx6p8x1ankjmx3f7ndpgrwf4f31df84qckl1jj66vzz6fa";
    type = ["lib" "cdylib"];
    build = "src/build.rs";
    dependencies = mapFeatures features ([ (crates."crc"."${deps."miniz_oxide_c_api"."0.1.2"."crc"}" deps) (crates."libc"."${deps."miniz_oxide_c_api"."0.1.2"."libc"}" deps) (crates."miniz_oxide"."${deps."miniz_oxide_c_api"."0.1.2"."miniz_oxide"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."cc"."${deps."miniz_oxide_c_api"."0.1.2"."cc"}" deps) ]);
    features = mkFeatures (features.miniz_oxide_c_api."0.1.2" or {});
  };
  features_.miniz_oxide_c_api."0.1.2" = deps: f: updateFeatures f (rec {
    cc = { "${deps.miniz_oxide_c_api."0.1.2".cc}".default = true; };
    crc = { "${deps.miniz_oxide_c_api."0.1.2".crc}".default = true; };
    libc = { "${deps.miniz_oxide_c_api."0.1.2".libc}".default = true; };
    miniz_oxide = { "${deps.miniz_oxide_c_api."0.1.2".miniz_oxide}".default = true; };
    miniz_oxide_c_api = fold recursiveUpdate {} [
      { "0.1.2".build_orig_miniz =
        (f.miniz_oxide_c_api."0.1.2".build_orig_miniz or false) ||
        (f.miniz_oxide_c_api."0.1.2".benching or false) ||
        (miniz_oxide_c_api."0.1.2"."benching" or false) ||
        (f.miniz_oxide_c_api."0.1.2".fuzzing or false) ||
        (miniz_oxide_c_api."0.1.2"."fuzzing" or false); }
      { "0.1.2".build_stub_miniz =
        (f.miniz_oxide_c_api."0.1.2".build_stub_miniz or false) ||
        (f.miniz_oxide_c_api."0.1.2".miniz_zip or false) ||
        (miniz_oxide_c_api."0.1.2"."miniz_zip" or false); }
      { "0.1.2".default = (f.miniz_oxide_c_api."0.1.2".default or true); }
      { "0.1.2".no_c_export =
        (f.miniz_oxide_c_api."0.1.2".no_c_export or false) ||
        (f.miniz_oxide_c_api."0.1.2".benching or false) ||
        (miniz_oxide_c_api."0.1.2"."benching" or false) ||
        (f.miniz_oxide_c_api."0.1.2".fuzzing or false) ||
        (miniz_oxide_c_api."0.1.2"."fuzzing" or false); }
    ];
  }) [ (features_.crc."${deps."miniz_oxide_c_api"."0.1.2"."crc"}" deps)
       (features_.libc."${deps."miniz_oxide_c_api"."0.1.2"."libc"}" deps)
       (features_.miniz_oxide."${deps."miniz_oxide_c_api"."0.1.2"."miniz_oxide"}" deps)
       (features_.cc."${deps."miniz_oxide_c_api"."0.1.2"."cc"}" deps) ];


  crates.mockito."0.10.0" = deps: { features?(features_.mockito."0.10.0" deps {}) }: buildRustCrate {
    crateName = "mockito";
    version = "0.10.0";
    authors = [ "Florin Lipan <florinlipan@gmail.com>" ];
    sha256 = "0ib98a78wn15669jmic8n8qd6ax6jbkaz9126bjx8g56i3608b1k";
    crateBin = [ {  name = "mockito-server";  path = "src/main.rs"; } ];
    dependencies = mapFeatures features ([ (crates."http_muncher"."${deps."mockito"."0.10.0"."http_muncher"}" deps) (crates."lazy_static"."${deps."mockito"."0.10.0"."lazy_static"}" deps) (crates."rand"."${deps."mockito"."0.10.0"."rand"}" deps) (crates."regex"."${deps."mockito"."0.10.0"."regex"}" deps) (crates."serde_json"."${deps."mockito"."0.10.0"."serde_json"}" deps) ]);
  };
  features_.mockito."0.10.0" = deps: f: updateFeatures f (rec {
    http_muncher = { "${deps.mockito."0.10.0".http_muncher}".default = true; };
    lazy_static = { "${deps.mockito."0.10.0".lazy_static}".default = true; };
    mockito = { "0.10.0".default = (f.mockito."0.10.0".default or true); };
    rand = { "${deps.mockito."0.10.0".rand}".default = true; };
    regex = { "${deps.mockito."0.10.0".regex}".default = true; };
    serde_json = { "${deps.mockito."0.10.0".serde_json}".default = true; };
  }) [ (features_.http_muncher."${deps."mockito"."0.10.0"."http_muncher"}" deps)
       (features_.lazy_static."${deps."mockito"."0.10.0"."lazy_static"}" deps)
       (features_.rand."${deps."mockito"."0.10.0"."rand"}" deps)
       (features_.regex."${deps."mockito"."0.10.0"."regex"}" deps)
       (features_.serde_json."${deps."mockito"."0.10.0"."serde_json"}" deps) ];


  crates.modifier."0.1.0" = deps: { features?(features_.modifier."0.1.0" deps {}) }: buildRustCrate {
    crateName = "modifier";
    version = "0.1.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1zicszfn54wir5nf40jmpq55in2s7xcdqn496wpgj7ckxyh82gfd";
  };
  features_.modifier."0.1.0" = deps: f: updateFeatures f (rec {
    modifier = { "0.1.0".default = (f.modifier."0.1.0".default or true); };
  }) [];


  crates.mount."0.3.0" = deps: { features?(features_.mount."0.3.0" deps {}) }: buildRustCrate {
    crateName = "mount";
    version = "0.3.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "03k43dq8hilw6idfnafrsi404xa7mlh7v6avipl38fbsr9qn7qhs";
    dependencies = mapFeatures features ([ (crates."iron"."${deps."mount"."0.3.0"."iron"}" deps) (crates."sequence_trie"."${deps."mount"."0.3.0"."sequence_trie"}" deps) ]);
  };
  features_.mount."0.3.0" = deps: f: updateFeatures f (rec {
    iron = { "${deps.mount."0.3.0".iron}".default = true; };
    mount = { "0.3.0".default = (f.mount."0.3.0".default or true); };
    sequence_trie = { "${deps.mount."0.3.0".sequence_trie}".default = true; };
  }) [ (features_.iron."${deps."mount"."0.3.0"."iron"}" deps)
       (features_.sequence_trie."${deps."mount"."0.3.0"."sequence_trie"}" deps) ];


  crates.moz_cheddar."0.4.2" = deps: { features?(features_.moz_cheddar."0.4.2" deps {}) }: buildRustCrate {
    crateName = "moz-cheddar";
    version = "0.4.2";
    authors = [ "Sean Marshallsay <srm.1708@gmail.com>" "Matthew Gregan <kinetik@flim.org>" ];
    sha256 = "0qmcnxblp3hpwrr455vj541j7f5zp1qy8fyp2fwz12hs4yvj2vfw";
    libPath = "src/lib.rs";
    libName = "cheddar";
    crateBin = [ {  name = "cheddar";  path = "src/bin/cheddar.rs"; } ];
    dependencies = mapFeatures features ([ (crates."clap"."${deps."moz_cheddar"."0.4.2"."clap"}" deps) (crates."toml"."${deps."moz_cheddar"."0.4.2"."toml"}" deps) ]
      ++ (if features.moz_cheddar."0.4.2".syntex_errors or false then [ (crates.syntex_errors."0.58.1" deps) ] else [])
      ++ (if features.moz_cheddar."0.4.2".syntex_syntax or false then [ (crates.syntex_syntax."0.58.1" deps) ] else []));
    features = mkFeatures (features.moz_cheddar."0.4.2" or {});
  };
  features_.moz_cheddar."0.4.2" = deps: f: updateFeatures f (rec {
    clap = { "${deps.moz_cheddar."0.4.2".clap}".default = true; };
    moz_cheddar = fold recursiveUpdate {} [
      { "0.4.2".default = (f.moz_cheddar."0.4.2".default or true); }
      { "0.4.2".syntex_errors =
        (f.moz_cheddar."0.4.2".syntex_errors or false) ||
        (f.moz_cheddar."0.4.2".with-syntex or false) ||
        (moz_cheddar."0.4.2"."with-syntex" or false); }
      { "0.4.2".syntex_syntax =
        (f.moz_cheddar."0.4.2".syntex_syntax or false) ||
        (f.moz_cheddar."0.4.2".with-syntex or false) ||
        (moz_cheddar."0.4.2"."with-syntex" or false); }
      { "0.4.2".with-syntex =
        (f.moz_cheddar."0.4.2".with-syntex or false) ||
        (f.moz_cheddar."0.4.2".default or false) ||
        (moz_cheddar."0.4.2"."default" or false); }
    ];
    syntex_errors = { "${deps.moz_cheddar."0.4.2".syntex_errors}".default = true; };
    syntex_syntax = { "${deps.moz_cheddar."0.4.2".syntex_syntax}".default = true; };
    toml = { "${deps.moz_cheddar."0.4.2".toml}".default = true; };
  }) [ (features_.clap."${deps."moz_cheddar"."0.4.2"."clap"}" deps)
       (features_.syntex_errors."${deps."moz_cheddar"."0.4.2"."syntex_errors"}" deps)
       (features_.syntex_syntax."${deps."moz_cheddar"."0.4.2"."syntex_syntax"}" deps)
       (features_.toml."${deps."moz_cheddar"."0.4.2"."toml"}" deps) ];


  crates.mozjpeg."0.8.5" = deps: { features?(features_.mozjpeg."0.8.5" deps {}) }: buildRustCrate {
    crateName = "mozjpeg";
    version = "0.8.5";
    authors = [ "Kornel <kornel@geekhood.net>" ];
    sha256 = "1pj25dvhb1r5v09c34crpcrgrkb1lc5vvn8cx454xxiw9qhpvy54";
    dependencies = mapFeatures features ([ (crates."arrayvec"."${deps."mozjpeg"."0.8.5"."arrayvec"}" deps) (crates."libc"."${deps."mozjpeg"."0.8.5"."libc"}" deps) (crates."mozjpeg_sys"."${deps."mozjpeg"."0.8.5"."mozjpeg_sys"}" deps) (crates."rgb"."${deps."mozjpeg"."0.8.5"."rgb"}" deps) ]);
  };
  features_.mozjpeg."0.8.5" = deps: f: updateFeatures f (rec {
    arrayvec = fold recursiveUpdate {} [
      { "${deps.mozjpeg."0.8.5".arrayvec}"."use_union" = true; }
      { "${deps.mozjpeg."0.8.5".arrayvec}".default = true; }
    ];
    libc = { "${deps.mozjpeg."0.8.5".libc}".default = true; };
    mozjpeg = { "0.8.5".default = (f.mozjpeg."0.8.5".default or true); };
    mozjpeg_sys = { "${deps.mozjpeg."0.8.5".mozjpeg_sys}".default = true; };
    rgb = { "${deps.mozjpeg."0.8.5".rgb}".default = true; };
  }) [ (features_.arrayvec."${deps."mozjpeg"."0.8.5"."arrayvec"}" deps)
       (features_.libc."${deps."mozjpeg"."0.8.5"."libc"}" deps)
       (features_.mozjpeg_sys."${deps."mozjpeg"."0.8.5"."mozjpeg_sys"}" deps)
       (features_.rgb."${deps."mozjpeg"."0.8.5"."rgb"}" deps) ];


  crates.mozjpeg_sys."0.5.13" = deps: { features?(features_.mozjpeg_sys."0.5.13" deps {}) }: buildRustCrate {
    crateName = "mozjpeg-sys";
    version = "0.5.13";
    authors = [ "Kornel <pornel@pornel.net>" ];
    sha256 = "1qadl8bnx1zx9dzx2lbfdb3yc1ag0i8vzqnspdj9qqc975bqa1pp";
    libName = "mozjpeg_sys";
    type = ["lib" "staticlib" "dylib"];
    build = "src/build.rs";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."mozjpeg_sys"."0.5.13"."libc"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."cc"."${deps."mozjpeg_sys"."0.5.13"."cc"}" deps) (crates."dunce"."${deps."mozjpeg_sys"."0.5.13"."dunce"}" deps) ]
      ++ (if features.mozjpeg_sys."0.5.13".nasm-rs or false then [ (crates.nasm_rs."0.1.3" deps) ] else []));
    features = mkFeatures (features.mozjpeg_sys."0.5.13" or {});
  };
  features_.mozjpeg_sys."0.5.13" = deps: f: updateFeatures f (rec {
    cc = fold recursiveUpdate {} [
      { "${deps.mozjpeg_sys."0.5.13".cc}"."parallel" = true; }
      { "${deps.mozjpeg_sys."0.5.13".cc}".default = true; }
    ];
    dunce = { "${deps.mozjpeg_sys."0.5.13".dunce}".default = true; };
    libc = { "${deps.mozjpeg_sys."0.5.13".libc}".default = true; };
    mozjpeg_sys = fold recursiveUpdate {} [
      { "0.5.13".arith_dec =
        (f.mozjpeg_sys."0.5.13".arith_dec or false) ||
        (f.mozjpeg_sys."0.5.13".jpeg70_abi or false) ||
        (mozjpeg_sys."0.5.13"."jpeg70_abi" or false); }
      { "0.5.13".arith_enc =
        (f.mozjpeg_sys."0.5.13".arith_enc or false) ||
        (f.mozjpeg_sys."0.5.13".jpeg70_abi or false) ||
        (mozjpeg_sys."0.5.13"."jpeg70_abi" or false); }
      { "0.5.13".default = (f.mozjpeg_sys."0.5.13".default or true); }
      { "0.5.13".jpeg70_abi =
        (f.mozjpeg_sys."0.5.13".jpeg70_abi or false) ||
        (f.mozjpeg_sys."0.5.13".jpeg80_abi or false) ||
        (mozjpeg_sys."0.5.13"."jpeg80_abi" or false); }
      { "0.5.13".nasm-rs =
        (f.mozjpeg_sys."0.5.13".nasm-rs or false) ||
        (f.mozjpeg_sys."0.5.13".nasm_simd or false) ||
        (mozjpeg_sys."0.5.13"."nasm_simd" or false); }
      { "0.5.13".nasm_simd =
        (f.mozjpeg_sys."0.5.13".nasm_simd or false) ||
        (f.mozjpeg_sys."0.5.13".default or false) ||
        (mozjpeg_sys."0.5.13"."default" or false); }
    ];
    nasm_rs = { "${deps.mozjpeg_sys."0.5.13".nasm_rs}".default = true; };
  }) [ (features_.libc."${deps."mozjpeg_sys"."0.5.13"."libc"}" deps)
       (features_.cc."${deps."mozjpeg_sys"."0.5.13"."cc"}" deps)
       (features_.dunce."${deps."mozjpeg_sys"."0.5.13"."dunce"}" deps)
       (features_.nasm_rs."${deps."mozjpeg_sys"."0.5.13"."nasm_rs"}" deps) ];


  crates.msdos_time."0.1.6" = deps: { features?(features_.msdos_time."0.1.6" deps {}) }: buildRustCrate {
    crateName = "msdos_time";
    version = "0.1.6";
    authors = [ "Mathijs van de Nes <git@mathijs.vd-nes.nl>" ];
    sha256 = "15grwfydhbfv6g67q5gz4fdha9va97ylsavl4250wlg46h980hc0";
    dependencies = mapFeatures features ([ (crates."time"."${deps."msdos_time"."0.1.6"."time"}" deps) ])
      ++ (if kernel == "windows" then mapFeatures features ([ (crates."winapi"."${deps."msdos_time"."0.1.6"."winapi"}" deps) ]) else []);
  };
  features_.msdos_time."0.1.6" = deps: f: updateFeatures f (rec {
    msdos_time = { "0.1.6".default = (f.msdos_time."0.1.6".default or true); };
    time = { "${deps.msdos_time."0.1.6".time}".default = true; };
    winapi = fold recursiveUpdate {} [
      { "${deps.msdos_time."0.1.6".winapi}"."timezoneapi" = true; }
      { "${deps.msdos_time."0.1.6".winapi}"."winbase" = true; }
      { "${deps.msdos_time."0.1.6".winapi}".default = true; }
    ];
  }) [ (features_.time."${deps."msdos_time"."0.1.6"."time"}" deps)
       (features_.winapi."${deps."msdos_time"."0.1.6"."winapi"}" deps) ];


  crates.nasm_rs."0.1.3" = deps: { features?(features_.nasm_rs."0.1.3" deps {}) }: buildRustCrate {
    crateName = "nasm-rs";
    version = "0.1.3";
    authors = [ "Allen Goodman <allen@goodman.io>" "Gavin Massey <mdk@mystacktrace.org>" "Jerome Rasky <jyrome.112@gmail.com>" "Justinas Stankevičius <justinas@users.noreply.github.com>" "Kornel Lesinski <kornel@geekhood.net>" ];
    sha256 = "17qlaa53hffsh48n9f2s18jgy3xrdzp9iqyc726s470s0xpfky80";
    dependencies = mapFeatures features ([ ]
      ++ (if features.nasm_rs."0.1.3".rayon or false then [ (crates.rayon."1.0.1" deps) ] else []));
    features = mkFeatures (features.nasm_rs."0.1.3" or {});
  };
  features_.nasm_rs."0.1.3" = deps: f: updateFeatures f (rec {
    nasm_rs = fold recursiveUpdate {} [
      { "0.1.3".default = (f.nasm_rs."0.1.3".default or true); }
      { "0.1.3".rayon =
        (f.nasm_rs."0.1.3".rayon or false) ||
        (f.nasm_rs."0.1.3".parallel or false) ||
        (nasm_rs."0.1.3"."parallel" or false); }
    ];
    rayon = { "${deps.nasm_rs."0.1.3".rayon}".default = true; };
  }) [ (features_.rayon."${deps."nasm_rs"."0.1.3"."rayon"}" deps) ];


  crates.native_tls."0.1.5" = deps: { features?(features_.native_tls."0.1.5" deps {}) }: buildRustCrate {
    crateName = "native-tls";
    version = "0.1.5";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "11f75qmbny5pnn6zp0vlvadrvc9ph9qsxiyn4n6q02xyd93pxxlf";
    dependencies = mapFeatures features ([ (crates."lazy_static"."${deps."native_tls"."0.1.5"."lazy_static"}" deps) ])
      ++ (if kernel == "darwin" || kernel == "ios" then mapFeatures features ([ (crates."libc"."${deps."native_tls"."0.1.5"."libc"}" deps) (crates."security_framework"."${deps."native_tls"."0.1.5"."security_framework"}" deps) (crates."security_framework_sys"."${deps."native_tls"."0.1.5"."security_framework_sys"}" deps) (crates."tempdir"."${deps."native_tls"."0.1.5"."tempdir"}" deps) ]) else [])
      ++ (if !(kernel == "windows" || kernel == "darwin" || kernel == "ios") then mapFeatures features ([ (crates."openssl"."${deps."native_tls"."0.1.5"."openssl"}" deps) ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ (crates."schannel"."${deps."native_tls"."0.1.5"."schannel"}" deps) ]) else []);
  };
  features_.native_tls."0.1.5" = deps: f: updateFeatures f (rec {
    lazy_static = { "${deps.native_tls."0.1.5".lazy_static}".default = true; };
    libc = { "${deps.native_tls."0.1.5".libc}".default = true; };
    native_tls = { "0.1.5".default = (f.native_tls."0.1.5".default or true); };
    openssl = { "${deps.native_tls."0.1.5".openssl}".default = true; };
    schannel = { "${deps.native_tls."0.1.5".schannel}".default = true; };
    security_framework = fold recursiveUpdate {} [
      { "${deps.native_tls."0.1.5".security_framework}"."OSX_10_8" = true; }
      { "${deps.native_tls."0.1.5".security_framework}".default = true; }
    ];
    security_framework_sys = { "${deps.native_tls."0.1.5".security_framework_sys}".default = true; };
    tempdir = { "${deps.native_tls."0.1.5".tempdir}".default = true; };
  }) [ (features_.lazy_static."${deps."native_tls"."0.1.5"."lazy_static"}" deps)
       (features_.libc."${deps."native_tls"."0.1.5"."libc"}" deps)
       (features_.security_framework."${deps."native_tls"."0.1.5"."security_framework"}" deps)
       (features_.security_framework_sys."${deps."native_tls"."0.1.5"."security_framework_sys"}" deps)
       (features_.tempdir."${deps."native_tls"."0.1.5"."tempdir"}" deps)
       (features_.openssl."${deps."native_tls"."0.1.5"."openssl"}" deps)
       (features_.schannel."${deps."native_tls"."0.1.5"."schannel"}" deps) ];


  crates.nodrop."0.1.12" = deps: { features?(features_.nodrop."0.1.12" deps {}) }: buildRustCrate {
    crateName = "nodrop";
    version = "0.1.12";
    authors = [ "bluss" ];
    sha256 = "1b9rxvdg8061gxjc239l9slndf0ds3m6fy2sf3gs8f9kknqgl49d";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.nodrop."0.1.12" or {});
  };
  features_.nodrop."0.1.12" = deps: f: updateFeatures f (rec {
    nodrop = fold recursiveUpdate {} [
      { "0.1.12".default = (f.nodrop."0.1.12".default or true); }
      { "0.1.12".nodrop-union =
        (f.nodrop."0.1.12".nodrop-union or false) ||
        (f.nodrop."0.1.12".use_union or false) ||
        (nodrop."0.1.12"."use_union" or false); }
      { "0.1.12".std =
        (f.nodrop."0.1.12".std or false) ||
        (f.nodrop."0.1.12".default or false) ||
        (nodrop."0.1.12"."default" or false); }
    ];
  }) [];


  crates.num."0.1.42" = deps: { features?(features_.num."0.1.42" deps {}) }: buildRustCrate {
    crateName = "num";
    version = "0.1.42";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1632gczzrmmxdsj3jignwcr793jq8vxw3qkdzpdvbip3vaf1ljgq";
    dependencies = mapFeatures features ([ (crates."num_integer"."${deps."num"."0.1.42"."num_integer"}" deps) (crates."num_iter"."${deps."num"."0.1.42"."num_iter"}" deps) (crates."num_traits"."${deps."num"."0.1.42"."num_traits"}" deps) ]
      ++ (if features.num."0.1.42".num-bigint or false then [ (crates.num_bigint."0.1.44" deps) ] else [])
      ++ (if features.num."0.1.42".num-complex or false then [ (crates.num_complex."0.1.43" deps) ] else [])
      ++ (if features.num."0.1.42".num-rational or false then [ (crates.num_rational."0.1.42" deps) ] else []));
    features = mkFeatures (features.num."0.1.42" or {});
  };
  features_.num."0.1.42" = deps: f: updateFeatures f (rec {
    num = fold recursiveUpdate {} [
      { "0.1.42".bigint =
        (f.num."0.1.42".bigint or false) ||
        (f.num."0.1.42".default or false) ||
        (num."0.1.42"."default" or false); }
      { "0.1.42".complex =
        (f.num."0.1.42".complex or false) ||
        (f.num."0.1.42".default or false) ||
        (num."0.1.42"."default" or false); }
      { "0.1.42".default = (f.num."0.1.42".default or true); }
      { "0.1.42".num-bigint =
        (f.num."0.1.42".num-bigint or false) ||
        (f.num."0.1.42".bigint or false) ||
        (num."0.1.42"."bigint" or false); }
      { "0.1.42".num-complex =
        (f.num."0.1.42".num-complex or false) ||
        (f.num."0.1.42".complex or false) ||
        (num."0.1.42"."complex" or false); }
      { "0.1.42".num-rational =
        (f.num."0.1.42".num-rational or false) ||
        (f.num."0.1.42".rational or false) ||
        (num."0.1.42"."rational" or false); }
      { "0.1.42".rational =
        (f.num."0.1.42".rational or false) ||
        (f.num."0.1.42".default or false) ||
        (num."0.1.42"."default" or false); }
      { "0.1.42".rustc-serialize =
        (f.num."0.1.42".rustc-serialize or false) ||
        (f.num."0.1.42".default or false) ||
        (num."0.1.42"."default" or false); }
    ];
    num_bigint = fold recursiveUpdate {} [
      { "${deps.num."0.1.42".num_bigint}".default = true; }
      { "0.1.44".rustc-serialize =
        (f.num_bigint."0.1.44".rustc-serialize or false) ||
        (num."0.1.42"."rustc-serialize" or false) ||
        (f."num"."0.1.42"."rustc-serialize" or false); }
      { "0.1.44".serde =
        (f.num_bigint."0.1.44".serde or false) ||
        (num."0.1.42"."serde" or false) ||
        (f."num"."0.1.42"."serde" or false); }
    ];
    num_complex = fold recursiveUpdate {} [
      { "${deps.num."0.1.42".num_complex}".default = true; }
      { "0.1.43".rustc-serialize =
        (f.num_complex."0.1.43".rustc-serialize or false) ||
        (num."0.1.42"."rustc-serialize" or false) ||
        (f."num"."0.1.42"."rustc-serialize" or false); }
      { "0.1.43".serde =
        (f.num_complex."0.1.43".serde or false) ||
        (num."0.1.42"."serde" or false) ||
        (f."num"."0.1.42"."serde" or false); }
    ];
    num_integer = { "${deps.num."0.1.42".num_integer}".default = true; };
    num_iter = { "${deps.num."0.1.42".num_iter}".default = true; };
    num_rational = fold recursiveUpdate {} [
      { "${deps.num."0.1.42".num_rational}".default = true; }
      { "0.1.42".rustc-serialize =
        (f.num_rational."0.1.42".rustc-serialize or false) ||
        (num."0.1.42"."rustc-serialize" or false) ||
        (f."num"."0.1.42"."rustc-serialize" or false); }
      { "0.1.42".serde =
        (f.num_rational."0.1.42".serde or false) ||
        (num."0.1.42"."serde" or false) ||
        (f."num"."0.1.42"."serde" or false); }
    ];
    num_traits = { "${deps.num."0.1.42".num_traits}".default = true; };
  }) [ (features_.num_bigint."${deps."num"."0.1.42"."num_bigint"}" deps)
       (features_.num_complex."${deps."num"."0.1.42"."num_complex"}" deps)
       (features_.num_integer."${deps."num"."0.1.42"."num_integer"}" deps)
       (features_.num_iter."${deps."num"."0.1.42"."num_iter"}" deps)
       (features_.num_rational."${deps."num"."0.1.42"."num_rational"}" deps)
       (features_.num_traits."${deps."num"."0.1.42"."num_traits"}" deps) ];


  crates.num_bigint."0.1.44" = deps: { features?(features_.num_bigint."0.1.44" deps {}) }: buildRustCrate {
    crateName = "num-bigint";
    version = "0.1.44";
    authors = [ "The Rust Project Developers" ];
    sha256 = "13sf3jhjs6y7cnfrdxns0k8vmbxwjl038wm3yl08b3dbrla7hvx1";
    dependencies = mapFeatures features ([ (crates."num_integer"."${deps."num_bigint"."0.1.44"."num_integer"}" deps) (crates."num_traits"."${deps."num_bigint"."0.1.44"."num_traits"}" deps) ]
      ++ (if features.num_bigint."0.1.44".rand or false then [ (crates.rand."0.4.2" deps) ] else [])
      ++ (if features.num_bigint."0.1.44".rustc-serialize or false then [ (crates.rustc_serialize."0.3.24" deps) ] else []));
    features = mkFeatures (features.num_bigint."0.1.44" or {});
  };
  features_.num_bigint."0.1.44" = deps: f: updateFeatures f (rec {
    num_bigint = fold recursiveUpdate {} [
      { "0.1.44".default = (f.num_bigint."0.1.44".default or true); }
      { "0.1.44".rand =
        (f.num_bigint."0.1.44".rand or false) ||
        (f.num_bigint."0.1.44".default or false) ||
        (num_bigint."0.1.44"."default" or false); }
      { "0.1.44".rustc-serialize =
        (f.num_bigint."0.1.44".rustc-serialize or false) ||
        (f.num_bigint."0.1.44".default or false) ||
        (num_bigint."0.1.44"."default" or false); }
    ];
    num_integer = { "${deps.num_bigint."0.1.44".num_integer}".default = (f.num_integer."${deps.num_bigint."0.1.44".num_integer}".default or false); };
    num_traits = fold recursiveUpdate {} [
      { "${deps.num_bigint."0.1.44".num_traits}"."std" = true; }
      { "${deps.num_bigint."0.1.44".num_traits}".default = (f.num_traits."${deps.num_bigint."0.1.44".num_traits}".default or false); }
    ];
    rand = { "${deps.num_bigint."0.1.44".rand}".default = true; };
    rustc_serialize = { "${deps.num_bigint."0.1.44".rustc_serialize}".default = true; };
  }) [ (features_.num_integer."${deps."num_bigint"."0.1.44"."num_integer"}" deps)
       (features_.num_traits."${deps."num_bigint"."0.1.44"."num_traits"}" deps)
       (features_.rand."${deps."num_bigint"."0.1.44"."rand"}" deps)
       (features_.rustc_serialize."${deps."num_bigint"."0.1.44"."rustc_serialize"}" deps) ];


  crates.num_complex."0.1.43" = deps: { features?(features_.num_complex."0.1.43" deps {}) }: buildRustCrate {
    crateName = "num-complex";
    version = "0.1.43";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1rs1rhwcxsdamllz1p88ibi8g8s4hhx8rqvvp819x71zphgpqsa2";
    dependencies = mapFeatures features ([ (crates."num_traits"."${deps."num_complex"."0.1.43"."num_traits"}" deps) ]
      ++ (if features.num_complex."0.1.43".rustc-serialize or false then [ (crates.rustc_serialize."0.3.24" deps) ] else []));
    features = mkFeatures (features.num_complex."0.1.43" or {});
  };
  features_.num_complex."0.1.43" = deps: f: updateFeatures f (rec {
    num_complex = fold recursiveUpdate {} [
      { "0.1.43".default = (f.num_complex."0.1.43".default or true); }
      { "0.1.43".rustc-serialize =
        (f.num_complex."0.1.43".rustc-serialize or false) ||
        (f.num_complex."0.1.43".default or false) ||
        (num_complex."0.1.43"."default" or false); }
    ];
    num_traits = fold recursiveUpdate {} [
      { "${deps.num_complex."0.1.43".num_traits}"."std" = true; }
      { "${deps.num_complex."0.1.43".num_traits}".default = (f.num_traits."${deps.num_complex."0.1.43".num_traits}".default or false); }
    ];
    rustc_serialize = { "${deps.num_complex."0.1.43".rustc_serialize}".default = true; };
  }) [ (features_.num_traits."${deps."num_complex"."0.1.43"."num_traits"}" deps)
       (features_.rustc_serialize."${deps."num_complex"."0.1.43"."rustc_serialize"}" deps) ];


  crates.num_integer."0.1.38" = deps: { features?(features_.num_integer."0.1.38" deps {}) }: buildRustCrate {
    crateName = "num-integer";
    version = "0.1.38";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0xcyvsg43zrmaanf546l67mz816g5jigxi8818rx5y95xid722yy";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."num_traits"."${deps."num_integer"."0.1.38"."num_traits"}" deps) ]);
    features = mkFeatures (features.num_integer."0.1.38" or {});
  };
  features_.num_integer."0.1.38" = deps: f: updateFeatures f (rec {
    num_integer = fold recursiveUpdate {} [
      { "0.1.38".default = (f.num_integer."0.1.38".default or true); }
      { "0.1.38".std =
        (f.num_integer."0.1.38".std or false) ||
        (f.num_integer."0.1.38".default or false) ||
        (num_integer."0.1.38"."default" or false); }
    ];
    num_traits = fold recursiveUpdate {} [
      { "${deps.num_integer."0.1.38".num_traits}".default = (f.num_traits."${deps.num_integer."0.1.38".num_traits}".default or false); }
      { "0.2.4".i128 =
        (f.num_traits."0.2.4".i128 or false) ||
        (num_integer."0.1.38"."i128" or false) ||
        (f."num_integer"."0.1.38"."i128" or false); }
      { "0.2.4".std =
        (f.num_traits."0.2.4".std or false) ||
        (num_integer."0.1.38"."std" or false) ||
        (f."num_integer"."0.1.38"."std" or false); }
    ];
  }) [ (features_.num_traits."${deps."num_integer"."0.1.38"."num_traits"}" deps) ];


  crates.num_iter."0.1.37" = deps: { features?(features_.num_iter."0.1.37" deps {}) }: buildRustCrate {
    crateName = "num-iter";
    version = "0.1.37";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1rglyvi4yjfxfvfm2s7i60g1dkl5xmsyi77g6vy53jb11r6wl8ly";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."num_integer"."${deps."num_iter"."0.1.37"."num_integer"}" deps) (crates."num_traits"."${deps."num_iter"."0.1.37"."num_traits"}" deps) ]);
    features = mkFeatures (features.num_iter."0.1.37" or {});
  };
  features_.num_iter."0.1.37" = deps: f: updateFeatures f (rec {
    num_integer = fold recursiveUpdate {} [
      { "${deps.num_iter."0.1.37".num_integer}".default = (f.num_integer."${deps.num_iter."0.1.37".num_integer}".default or false); }
      { "0.1.38".i128 =
        (f.num_integer."0.1.38".i128 or false) ||
        (num_iter."0.1.37"."i128" or false) ||
        (f."num_iter"."0.1.37"."i128" or false); }
      { "0.1.38".std =
        (f.num_integer."0.1.38".std or false) ||
        (num_iter."0.1.37"."std" or false) ||
        (f."num_iter"."0.1.37"."std" or false); }
    ];
    num_iter = fold recursiveUpdate {} [
      { "0.1.37".default = (f.num_iter."0.1.37".default or true); }
      { "0.1.37".std =
        (f.num_iter."0.1.37".std or false) ||
        (f.num_iter."0.1.37".default or false) ||
        (num_iter."0.1.37"."default" or false); }
    ];
    num_traits = fold recursiveUpdate {} [
      { "${deps.num_iter."0.1.37".num_traits}".default = (f.num_traits."${deps.num_iter."0.1.37".num_traits}".default or false); }
      { "0.2.4".i128 =
        (f.num_traits."0.2.4".i128 or false) ||
        (num_iter."0.1.37"."i128" or false) ||
        (f."num_iter"."0.1.37"."i128" or false); }
      { "0.2.4".std =
        (f.num_traits."0.2.4".std or false) ||
        (num_iter."0.1.37"."std" or false) ||
        (f."num_iter"."0.1.37"."std" or false); }
    ];
  }) [ (features_.num_integer."${deps."num_iter"."0.1.37"."num_integer"}" deps)
       (features_.num_traits."${deps."num_iter"."0.1.37"."num_traits"}" deps) ];


  crates.num_rational."0.1.42" = deps: { features?(features_.num_rational."0.1.42" deps {}) }: buildRustCrate {
    crateName = "num-rational";
    version = "0.1.42";
    authors = [ "The Rust Project Developers" ];
    sha256 = "09gfmmak5p77rvi2mcsqsalzi81nc93nc8ipchnjv5b8lwn8mm89";
    dependencies = mapFeatures features ([ (crates."num_integer"."${deps."num_rational"."0.1.42"."num_integer"}" deps) (crates."num_traits"."${deps."num_rational"."0.1.42"."num_traits"}" deps) ]
      ++ (if features.num_rational."0.1.42".num-bigint or false then [ (crates.num_bigint."0.1.44" deps) ] else [])
      ++ (if features.num_rational."0.1.42".rustc-serialize or false then [ (crates.rustc_serialize."0.3.24" deps) ] else []));
    features = mkFeatures (features.num_rational."0.1.42" or {});
  };
  features_.num_rational."0.1.42" = deps: f: updateFeatures f (rec {
    num_bigint = { "${deps.num_rational."0.1.42".num_bigint}".default = true; };
    num_integer = { "${deps.num_rational."0.1.42".num_integer}".default = (f.num_integer."${deps.num_rational."0.1.42".num_integer}".default or false); };
    num_rational = fold recursiveUpdate {} [
      { "0.1.42".bigint =
        (f.num_rational."0.1.42".bigint or false) ||
        (f.num_rational."0.1.42".default or false) ||
        (num_rational."0.1.42"."default" or false); }
      { "0.1.42".default = (f.num_rational."0.1.42".default or true); }
      { "0.1.42".num-bigint =
        (f.num_rational."0.1.42".num-bigint or false) ||
        (f.num_rational."0.1.42".bigint or false) ||
        (num_rational."0.1.42"."bigint" or false); }
      { "0.1.42".rustc-serialize =
        (f.num_rational."0.1.42".rustc-serialize or false) ||
        (f.num_rational."0.1.42".default or false) ||
        (num_rational."0.1.42"."default" or false); }
    ];
    num_traits = fold recursiveUpdate {} [
      { "${deps.num_rational."0.1.42".num_traits}"."std" = true; }
      { "${deps.num_rational."0.1.42".num_traits}".default = (f.num_traits."${deps.num_rational."0.1.42".num_traits}".default or false); }
    ];
    rustc_serialize = { "${deps.num_rational."0.1.42".rustc_serialize}".default = true; };
  }) [ (features_.num_bigint."${deps."num_rational"."0.1.42"."num_bigint"}" deps)
       (features_.num_integer."${deps."num_rational"."0.1.42"."num_integer"}" deps)
       (features_.num_traits."${deps."num_rational"."0.1.42"."num_traits"}" deps)
       (features_.rustc_serialize."${deps."num_rational"."0.1.42"."rustc_serialize"}" deps) ];


  crates.num_traits."0.2.4" = deps: { features?(features_.num_traits."0.2.4" deps {}) }: buildRustCrate {
    crateName = "num-traits";
    version = "0.2.4";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0j0n4lcxbqq8q9v2qcyybz6aqxvmghzl5q2p19ds0c8fl5wviqmj";
    build = "build.rs";
    features = mkFeatures (features.num_traits."0.2.4" or {});
  };
  features_.num_traits."0.2.4" = deps: f: updateFeatures f (rec {
    num_traits = fold recursiveUpdate {} [
      { "0.2.4".default = (f.num_traits."0.2.4".default or true); }
      { "0.2.4".std =
        (f.num_traits."0.2.4".std or false) ||
        (f.num_traits."0.2.4".default or false) ||
        (num_traits."0.2.4"."default" or false); }
    ];
  }) [];


  crates.num_cpus."1.8.0" = deps: { features?(features_.num_cpus."1.8.0" deps {}) }: buildRustCrate {
    crateName = "num_cpus";
    version = "1.8.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1y6qnd9r8ga6y8mvlabdrr73nc8cshjjlzbvnanzyj9b8zzkfwk2";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."num_cpus"."1.8.0"."libc"}" deps) ]);
  };
  features_.num_cpus."1.8.0" = deps: f: updateFeatures f (rec {
    libc = { "${deps.num_cpus."1.8.0".libc}".default = true; };
    num_cpus = { "1.8.0".default = (f.num_cpus."1.8.0".default or true); };
  }) [ (features_.libc."${deps."num_cpus"."1.8.0"."libc"}" deps) ];


  crates.ole32_sys."0.2.0" = deps: { features?(features_.ole32_sys."0.2.0" deps {}) }: buildRustCrate {
    crateName = "ole32-sys";
    version = "0.2.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "05hxalvpxl28bi7kvvr04kbyjfm3a8vrgcsaxfg02rh2x04kf2d0";
    libName = "ole32";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."winapi"."${deps."ole32_sys"."0.2.0"."winapi"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."winapi_build"."${deps."ole32_sys"."0.2.0"."winapi_build"}" deps) ]);
  };
  features_.ole32_sys."0.2.0" = deps: f: updateFeatures f (rec {
    ole32_sys = { "0.2.0".default = (f.ole32_sys."0.2.0".default or true); };
    winapi = { "${deps.ole32_sys."0.2.0".winapi}".default = true; };
    winapi_build = { "${deps.ole32_sys."0.2.0".winapi_build}".default = true; };
  }) [ (features_.winapi."${deps."ole32_sys"."0.2.0"."winapi"}" deps)
       (features_.winapi_build."${deps."ole32_sys"."0.2.0"."winapi_build"}" deps) ];


  crates.openssl."0.9.24" = deps: { features?(features_.openssl."0.9.24" deps {}) }: buildRustCrate {
    crateName = "openssl";
    version = "0.9.24";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0wzm3c11g3ndaqyzq36mcdcm1q4a8pmsyi33ibybhjz28g2z0f79";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."bitflags"."${deps."openssl"."0.9.24"."bitflags"}" deps) (crates."foreign_types"."${deps."openssl"."0.9.24"."foreign_types"}" deps) (crates."lazy_static"."${deps."openssl"."0.9.24"."lazy_static"}" deps) (crates."libc"."${deps."openssl"."0.9.24"."libc"}" deps) (crates."openssl_sys"."${deps."openssl"."0.9.24"."openssl_sys"}" deps) ]);
    features = mkFeatures (features.openssl."0.9.24" or {});
  };
  features_.openssl."0.9.24" = deps: f: updateFeatures f (rec {
    bitflags = { "${deps.openssl."0.9.24".bitflags}".default = true; };
    foreign_types = { "${deps.openssl."0.9.24".foreign_types}".default = true; };
    lazy_static = { "${deps.openssl."0.9.24".lazy_static}".default = true; };
    libc = { "${deps.openssl."0.9.24".libc}".default = true; };
    openssl = { "0.9.24".default = (f.openssl."0.9.24".default or true); };
    openssl_sys = { "${deps.openssl."0.9.24".openssl_sys}".default = true; };
  }) [ (features_.bitflags."${deps."openssl"."0.9.24"."bitflags"}" deps)
       (features_.foreign_types."${deps."openssl"."0.9.24"."foreign_types"}" deps)
       (features_.lazy_static."${deps."openssl"."0.9.24"."lazy_static"}" deps)
       (features_.libc."${deps."openssl"."0.9.24"."libc"}" deps)
       (features_.openssl_sys."${deps."openssl"."0.9.24"."openssl_sys"}" deps) ];


  crates.openssl_sys."0.9.33" = deps: { features?(features_.openssl_sys."0.9.33" deps {}) }: buildRustCrate {
    crateName = "openssl-sys";
    version = "0.9.33";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1q5f7ykkxgniwjrqifx1ssrqjzcf8fi4fzh770xrbyp8n6v14qr6";
    build = "build/main.rs";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."openssl_sys"."0.9.33"."libc"}" deps) ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else []);

    buildDependencies = mapFeatures features ([ (crates."cc"."${deps."openssl_sys"."0.9.33"."cc"}" deps) (crates."pkg_config"."${deps."openssl_sys"."0.9.33"."pkg_config"}" deps) ]);
  };
  features_.openssl_sys."0.9.33" = deps: f: updateFeatures f (rec {
    cc = { "${deps.openssl_sys."0.9.33".cc}".default = true; };
    libc = { "${deps.openssl_sys."0.9.33".libc}".default = true; };
    openssl_sys = { "0.9.33".default = (f.openssl_sys."0.9.33".default or true); };
    pkg_config = { "${deps.openssl_sys."0.9.33".pkg_config}".default = true; };
  }) [ (features_.libc."${deps."openssl_sys"."0.9.33"."libc"}" deps)
       (features_.cc."${deps."openssl_sys"."0.9.33"."cc"}" deps)
       (features_.pkg_config."${deps."openssl_sys"."0.9.33"."pkg_config"}" deps) ];


  crates.option_filter."1.0.1" = deps: { features?(features_.option_filter."1.0.1" deps {}) }: buildRustCrate {
    crateName = "option-filter";
    version = "1.0.1";
    authors = [ "Chris Wong <lambda.fairy@gmail.com>" ];
    sha256 = "1ynp2ak6a9rvd1hq384ilrcapvn6m5cj0d99c8bs4am6dbyrgp8s";
    libPath = "lib.rs";
  };
  features_.option_filter."1.0.1" = deps: f: updateFeatures f (rec {
    option_filter = { "1.0.1".default = (f.option_filter."1.0.1".default or true); };
  }) [];


  crates.ordermap."0.3.5" = deps: { features?(features_.ordermap."0.3.5" deps {}) }: buildRustCrate {
    crateName = "ordermap";
    version = "0.3.5";
    authors = [ "bluss" ];
    sha256 = "0b6vxfyh627yqm6war3392g1hhi4dbn49ibx2qv6mv490jdhv7d3";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.ordermap."0.3.5" or {});
  };
  features_.ordermap."0.3.5" = deps: f: updateFeatures f (rec {
    ordermap = fold recursiveUpdate {} [
      { "0.3.5".default = (f.ordermap."0.3.5".default or true); }
      { "0.3.5".serde =
        (f.ordermap."0.3.5".serde or false) ||
        (f.ordermap."0.3.5".serde-1 or false) ||
        (ordermap."0.3.5"."serde-1" or false); }
    ];
  }) [];


  crates.owning_ref."0.2.4" = deps: { features?(features_.owning_ref."0.2.4" deps {}) }: buildRustCrate {
    crateName = "owning_ref";
    version = "0.2.4";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "19y3brv9zw0gamncijb5701zb1g005p5asi4x62samicq993b9hw";
  };
  features_.owning_ref."0.2.4" = deps: f: updateFeatures f (rec {
    owning_ref = { "0.2.4".default = (f.owning_ref."0.2.4".default or true); };
  }) [];


  crates.owning_ref."0.3.3" = deps: { features?(features_.owning_ref."0.3.3" deps {}) }: buildRustCrate {
    crateName = "owning_ref";
    version = "0.3.3";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "13ivn0ydc0hf957ix0f5si9nnplzzykbr70hni1qz9m19i9kvmrh";
    dependencies = mapFeatures features ([ (crates."stable_deref_trait"."${deps."owning_ref"."0.3.3"."stable_deref_trait"}" deps) ]);
  };
  features_.owning_ref."0.3.3" = deps: f: updateFeatures f (rec {
    owning_ref = { "0.3.3".default = (f.owning_ref."0.3.3".default or true); };
    stable_deref_trait = { "${deps.owning_ref."0.3.3".stable_deref_trait}".default = true; };
  }) [ (features_.stable_deref_trait."${deps."owning_ref"."0.3.3"."stable_deref_trait"}" deps) ];


  crates.parking_lot."0.3.8" = deps: { features?(features_.parking_lot."0.3.8" deps {}) }: buildRustCrate {
    crateName = "parking_lot";
    version = "0.3.8";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "0ww9i7yafbck7m30vxbbqv8nz89cc74f5xddwfpkc512mxnr7byg";
    dependencies = mapFeatures features ([ (crates."parking_lot_core"."${deps."parking_lot"."0.3.8"."parking_lot_core"}" deps) ]
      ++ (if features.parking_lot."0.3.8".owning_ref or false then [ (crates.owning_ref."0.2.4" deps) ] else []))
      ++ (if !(kernel == "emscripten") then mapFeatures features ([ (crates."thread_id"."${deps."parking_lot"."0.3.8"."thread_id"}" deps) ]) else []);
    features = mkFeatures (features.parking_lot."0.3.8" or {});
  };
  features_.parking_lot."0.3.8" = deps: f: updateFeatures f (rec {
    owning_ref = { "${deps.parking_lot."0.3.8".owning_ref}".default = true; };
    parking_lot = fold recursiveUpdate {} [
      { "0.3.8".default = (f.parking_lot."0.3.8".default or true); }
      { "0.3.8".owning_ref =
        (f.parking_lot."0.3.8".owning_ref or false) ||
        (f.parking_lot."0.3.8".default or false) ||
        (parking_lot."0.3.8"."default" or false); }
    ];
    parking_lot_core = fold recursiveUpdate {} [
      { "${deps.parking_lot."0.3.8".parking_lot_core}".default = true; }
      { "0.2.14".nightly =
        (f.parking_lot_core."0.2.14".nightly or false) ||
        (parking_lot."0.3.8"."nightly" or false) ||
        (f."parking_lot"."0.3.8"."nightly" or false); }
    ];
    thread_id = { "${deps.parking_lot."0.3.8".thread_id}".default = true; };
  }) [ (features_.owning_ref."${deps."parking_lot"."0.3.8"."owning_ref"}" deps)
       (features_.parking_lot_core."${deps."parking_lot"."0.3.8"."parking_lot_core"}" deps)
       (features_.thread_id."${deps."parking_lot"."0.3.8"."thread_id"}" deps) ];


  crates.parking_lot."0.5.5" = deps: { features?(features_.parking_lot."0.5.5" deps {}) }: buildRustCrate {
    crateName = "parking_lot";
    version = "0.5.5";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "0balxl593apy0l70z6dzk6c0r9707hgw2c9yav5asjc87dj6fx7l";
    dependencies = mapFeatures features ([ (crates."parking_lot_core"."${deps."parking_lot"."0.5.5"."parking_lot_core"}" deps) ]
      ++ (if features.parking_lot."0.5.5".owning_ref or false then [ (crates.owning_ref."0.3.3" deps) ] else []));
    features = mkFeatures (features.parking_lot."0.5.5" or {});
  };
  features_.parking_lot."0.5.5" = deps: f: updateFeatures f (rec {
    owning_ref = { "${deps.parking_lot."0.5.5".owning_ref}".default = true; };
    parking_lot = fold recursiveUpdate {} [
      { "0.5.5".default = (f.parking_lot."0.5.5".default or true); }
      { "0.5.5".owning_ref =
        (f.parking_lot."0.5.5".owning_ref or false) ||
        (f.parking_lot."0.5.5".default or false) ||
        (parking_lot."0.5.5"."default" or false); }
    ];
    parking_lot_core = fold recursiveUpdate {} [
      { "${deps.parking_lot."0.5.5".parking_lot_core}".default = true; }
      { "0.2.14".deadlock_detection =
        (f.parking_lot_core."0.2.14".deadlock_detection or false) ||
        (parking_lot."0.5.5"."deadlock_detection" or false) ||
        (f."parking_lot"."0.5.5"."deadlock_detection" or false); }
      { "0.2.14".nightly =
        (f.parking_lot_core."0.2.14".nightly or false) ||
        (parking_lot."0.5.5"."nightly" or false) ||
        (f."parking_lot"."0.5.5"."nightly" or false); }
    ];
  }) [ (features_.owning_ref."${deps."parking_lot"."0.5.5"."owning_ref"}" deps)
       (features_.parking_lot_core."${deps."parking_lot"."0.5.5"."parking_lot_core"}" deps) ];


  crates.parking_lot_core."0.2.14" = deps: { features?(features_.parking_lot_core."0.2.14" deps {}) }: buildRustCrate {
    crateName = "parking_lot_core";
    version = "0.2.14";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "0giypb8ckkpi34p14nfk4b19c7przj4jxs95gs7x2v5ncmi0y286";
    dependencies = mapFeatures features ([ (crates."rand"."${deps."parking_lot_core"."0.2.14"."rand"}" deps) (crates."smallvec"."${deps."parking_lot_core"."0.2.14"."smallvec"}" deps) ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ (crates."libc"."${deps."parking_lot_core"."0.2.14"."libc"}" deps) ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ (crates."winapi"."${deps."parking_lot_core"."0.2.14"."winapi"}" deps) ]) else []);
    features = mkFeatures (features.parking_lot_core."0.2.14" or {});
  };
  features_.parking_lot_core."0.2.14" = deps: f: updateFeatures f (rec {
    libc = { "${deps.parking_lot_core."0.2.14".libc}".default = true; };
    parking_lot_core = fold recursiveUpdate {} [
      { "0.2.14".backtrace =
        (f.parking_lot_core."0.2.14".backtrace or false) ||
        (f.parking_lot_core."0.2.14".deadlock_detection or false) ||
        (parking_lot_core."0.2.14"."deadlock_detection" or false); }
      { "0.2.14".default = (f.parking_lot_core."0.2.14".default or true); }
      { "0.2.14".petgraph =
        (f.parking_lot_core."0.2.14".petgraph or false) ||
        (f.parking_lot_core."0.2.14".deadlock_detection or false) ||
        (parking_lot_core."0.2.14"."deadlock_detection" or false); }
      { "0.2.14".thread-id =
        (f.parking_lot_core."0.2.14".thread-id or false) ||
        (f.parking_lot_core."0.2.14".deadlock_detection or false) ||
        (parking_lot_core."0.2.14"."deadlock_detection" or false); }
    ];
    rand = { "${deps.parking_lot_core."0.2.14".rand}".default = true; };
    smallvec = { "${deps.parking_lot_core."0.2.14".smallvec}".default = true; };
    winapi = fold recursiveUpdate {} [
      { "${deps.parking_lot_core."0.2.14".winapi}"."errhandlingapi" = true; }
      { "${deps.parking_lot_core."0.2.14".winapi}"."handleapi" = true; }
      { "${deps.parking_lot_core."0.2.14".winapi}"."minwindef" = true; }
      { "${deps.parking_lot_core."0.2.14".winapi}"."ntstatus" = true; }
      { "${deps.parking_lot_core."0.2.14".winapi}"."winbase" = true; }
      { "${deps.parking_lot_core."0.2.14".winapi}"."winerror" = true; }
      { "${deps.parking_lot_core."0.2.14".winapi}"."winnt" = true; }
      { "${deps.parking_lot_core."0.2.14".winapi}".default = true; }
    ];
  }) [ (features_.rand."${deps."parking_lot_core"."0.2.14"."rand"}" deps)
       (features_.smallvec."${deps."parking_lot_core"."0.2.14"."smallvec"}" deps)
       (features_.libc."${deps."parking_lot_core"."0.2.14"."libc"}" deps)
       (features_.winapi."${deps."parking_lot_core"."0.2.14"."winapi"}" deps) ];


  crates.percent_encoding."1.0.1" = deps: { features?(features_.percent_encoding."1.0.1" deps {}) }: buildRustCrate {
    crateName = "percent-encoding";
    version = "1.0.1";
    authors = [ "The rust-url developers" ];
    sha256 = "04ahrp7aw4ip7fmadb0bknybmkfav0kk0gw4ps3ydq5w6hr0ib5i";
    libPath = "lib.rs";
  };
  features_.percent_encoding."1.0.1" = deps: f: updateFeatures f (rec {
    percent_encoding = { "1.0.1".default = (f.percent_encoding."1.0.1".default or true); };
  }) [];


  crates.persistent."0.3.0" = deps: { features?(features_.persistent."0.3.0" deps {}) }: buildRustCrate {
    crateName = "persistent";
    version = "0.3.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "177xlsv4cjxmlc4pjxnixln8llh5xf06a5imxl951m0qp1y1jhpc";
    dependencies = mapFeatures features ([ (crates."iron"."${deps."persistent"."0.3.0"."iron"}" deps) (crates."plugin"."${deps."persistent"."0.3.0"."plugin"}" deps) ]);
  };
  features_.persistent."0.3.0" = deps: f: updateFeatures f (rec {
    iron = { "${deps.persistent."0.3.0".iron}".default = true; };
    persistent = { "0.3.0".default = (f.persistent."0.3.0".default or true); };
    plugin = { "${deps.persistent."0.3.0".plugin}".default = true; };
  }) [ (features_.iron."${deps."persistent"."0.3.0"."iron"}" deps)
       (features_.plugin."${deps."persistent"."0.3.0"."plugin"}" deps) ];


  crates.petgraph."0.4.12" = deps: { features?(features_.petgraph."0.4.12" deps {}) }: buildRustCrate {
    crateName = "petgraph";
    version = "0.4.12";
    authors = [ "bluss" "mitchmindtree" ];
    sha256 = "1v2b66dx1r2n8i447i1m76x1b5wbmhigxy1ka126439a5fvs3xlg";
    dependencies = mapFeatures features ([ (crates."fixedbitset"."${deps."petgraph"."0.4.12"."fixedbitset"}" deps) ]
      ++ (if features.petgraph."0.4.12".ordermap or false then [ (crates.ordermap."0.3.5" deps) ] else []));
    features = mkFeatures (features.petgraph."0.4.12" or {});
  };
  features_.petgraph."0.4.12" = deps: f: updateFeatures f (rec {
    fixedbitset = { "${deps.petgraph."0.4.12".fixedbitset}".default = true; };
    ordermap = { "${deps.petgraph."0.4.12".ordermap}".default = true; };
    petgraph = fold recursiveUpdate {} [
      { "0.4.12".default = (f.petgraph."0.4.12".default or true); }
      { "0.4.12".generate =
        (f.petgraph."0.4.12".generate or false) ||
        (f.petgraph."0.4.12".unstable or false) ||
        (petgraph."0.4.12"."unstable" or false); }
      { "0.4.12".graphmap =
        (f.petgraph."0.4.12".graphmap or false) ||
        (f.petgraph."0.4.12".all or false) ||
        (petgraph."0.4.12"."all" or false) ||
        (f.petgraph."0.4.12".default or false) ||
        (petgraph."0.4.12"."default" or false); }
      { "0.4.12".ordermap =
        (f.petgraph."0.4.12".ordermap or false) ||
        (f.petgraph."0.4.12".graphmap or false) ||
        (petgraph."0.4.12"."graphmap" or false); }
      { "0.4.12".quickcheck =
        (f.petgraph."0.4.12".quickcheck or false) ||
        (f.petgraph."0.4.12".all or false) ||
        (petgraph."0.4.12"."all" or false); }
      { "0.4.12".serde =
        (f.petgraph."0.4.12".serde or false) ||
        (f.petgraph."0.4.12".serde-1 or false) ||
        (petgraph."0.4.12"."serde-1" or false); }
      { "0.4.12".serde_derive =
        (f.petgraph."0.4.12".serde_derive or false) ||
        (f.petgraph."0.4.12".serde-1 or false) ||
        (petgraph."0.4.12"."serde-1" or false); }
      { "0.4.12".stable_graph =
        (f.petgraph."0.4.12".stable_graph or false) ||
        (f.petgraph."0.4.12".all or false) ||
        (petgraph."0.4.12"."all" or false) ||
        (f.petgraph."0.4.12".default or false) ||
        (petgraph."0.4.12"."default" or false); }
      { "0.4.12".unstable =
        (f.petgraph."0.4.12".unstable or false) ||
        (f.petgraph."0.4.12".all or false) ||
        (petgraph."0.4.12"."all" or false); }
    ];
  }) [ (features_.fixedbitset."${deps."petgraph"."0.4.12"."fixedbitset"}" deps)
       (features_.ordermap."${deps."petgraph"."0.4.12"."ordermap"}" deps) ];


  crates.pkg_config."0.3.11" = deps: { features?(features_.pkg_config."0.3.11" deps {}) }: buildRustCrate {
    crateName = "pkg-config";
    version = "0.3.11";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "177kbs465skvzmb2d9bh7aa5lqm0npfig12awcbd34c6k6nlyr5h";
  };
  features_.pkg_config."0.3.11" = deps: f: updateFeatures f (rec {
    pkg_config = { "0.3.11".default = (f.pkg_config."0.3.11".default or true); };
  }) [];


  crates.plugin."0.2.6" = deps: { features?(features_.plugin."0.2.6" deps {}) }: buildRustCrate {
    crateName = "plugin";
    version = "0.2.6";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "13byr5ilqcs83zlj3sm9chs70jim6n6dwgdrzmzjdk6jz35d376a";
    dependencies = mapFeatures features ([ (crates."typemap"."${deps."plugin"."0.2.6"."typemap"}" deps) ]);
  };
  features_.plugin."0.2.6" = deps: f: updateFeatures f (rec {
    plugin = { "0.2.6".default = (f.plugin."0.2.6".default or true); };
    typemap = { "${deps.plugin."0.2.6".typemap}".default = true; };
  }) [ (features_.typemap."${deps."plugin"."0.2.6"."typemap"}" deps) ];


  crates.podio."0.1.6" = deps: { features?(features_.podio."0.1.6" deps {}) }: buildRustCrate {
    crateName = "podio";
    version = "0.1.6";
    authors = [ "Mathijs van de Nes <git@mathijs.vd-nes.nl>" ];
    sha256 = "1dkhy2cv6wk4nrk0ak2s2w67bqbbxv9ymsxmwrkhz9fs84rx6mz4";
  };
  features_.podio."0.1.6" = deps: f: updateFeatures f (rec {
    podio = { "0.1.6".default = (f.podio."0.1.6".default or true); };
  }) [];


  crates.proc_macro2."0.4.6" = deps: { features?(features_.proc_macro2."0.4.6" deps {}) }: buildRustCrate {
    crateName = "proc-macro2";
    version = "0.4.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0lnxcavz5nqxypjyz6isffqiyxb3h0021nkn8djsl33a4qd4pxv6";
    dependencies = mapFeatures features ([ (crates."unicode_xid"."${deps."proc_macro2"."0.4.6"."unicode_xid"}" deps) ]);
    features = mkFeatures (features.proc_macro2."0.4.6" or {});
  };
  features_.proc_macro2."0.4.6" = deps: f: updateFeatures f (rec {
    proc_macro2 = fold recursiveUpdate {} [
      { "0.4.6".default = (f.proc_macro2."0.4.6".default or true); }
      { "0.4.6".proc-macro =
        (f.proc_macro2."0.4.6".proc-macro or false) ||
        (f.proc_macro2."0.4.6".default or false) ||
        (proc_macro2."0.4.6"."default" or false) ||
        (f.proc_macro2."0.4.6".nightly or false) ||
        (proc_macro2."0.4.6"."nightly" or false); }
    ];
    unicode_xid = { "${deps.proc_macro2."0.4.6".unicode_xid}".default = true; };
  }) [ (features_.unicode_xid."${deps."proc_macro2"."0.4.6"."unicode_xid"}" deps) ];


  crates.quick_error."1.2.2" = deps: { features?(features_.quick_error."1.2.2" deps {}) }: buildRustCrate {
    crateName = "quick-error";
    version = "1.2.2";
    authors = [ "Paul Colomiets <paul@colomiets.name>" "Colin Kiegel <kiegel@gmx.de>" ];
    sha256 = "192a3adc5phgpibgqblsdx1b421l5yg9bjbmv552qqq9f37h60k5";
  };
  features_.quick_error."1.2.2" = deps: f: updateFeatures f (rec {
    quick_error = { "1.2.2".default = (f.quick_error."1.2.2".default or true); };
  }) [];


  crates.quote."0.6.3" = deps: { features?(features_.quote."0.6.3" deps {}) }: buildRustCrate {
    crateName = "quote";
    version = "0.6.3";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1bqm3fjww2ivnshzxg54nnn1dxrx1cmvpjc5d50xjvjfg9xjb4b5";
    dependencies = mapFeatures features ([ (crates."proc_macro2"."${deps."quote"."0.6.3"."proc_macro2"}" deps) ]);
    features = mkFeatures (features.quote."0.6.3" or {});
  };
  features_.quote."0.6.3" = deps: f: updateFeatures f (rec {
    proc_macro2 = fold recursiveUpdate {} [
      { "${deps.quote."0.6.3".proc_macro2}".default = (f.proc_macro2."${deps.quote."0.6.3".proc_macro2}".default or false); }
      { "0.4.6".proc-macro =
        (f.proc_macro2."0.4.6".proc-macro or false) ||
        (quote."0.6.3"."proc-macro" or false) ||
        (f."quote"."0.6.3"."proc-macro" or false); }
    ];
    quote = fold recursiveUpdate {} [
      { "0.6.3".default = (f.quote."0.6.3".default or true); }
      { "0.6.3".proc-macro =
        (f.quote."0.6.3".proc-macro or false) ||
        (f.quote."0.6.3".default or false) ||
        (quote."0.6.3"."default" or false); }
    ];
  }) [ (features_.proc_macro2."${deps."quote"."0.6.3"."proc_macro2"}" deps) ];


  crates.rand."0.3.22" = deps: { features?(features_.rand."0.3.22" deps {}) }: buildRustCrate {
    crateName = "rand";
    version = "0.3.22";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0wrj12acx7l4hr7ag3nz8b50yhp8ancyq988bzmnnsxln67rsys0";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."rand"."0.3.22"."libc"}" deps) (crates."rand"."${deps."rand"."0.3.22"."rand"}" deps) ])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ (crates."fuchsia_zircon"."${deps."rand"."0.3.22"."fuchsia_zircon"}" deps) ]) else []);
    features = mkFeatures (features.rand."0.3.22" or {});
  };
  features_.rand."0.3.22" = deps: f: updateFeatures f (rec {
    fuchsia_zircon = { "${deps.rand."0.3.22".fuchsia_zircon}".default = true; };
    libc = { "${deps.rand."0.3.22".libc}".default = true; };
    rand = fold recursiveUpdate {} [
      { "${deps.rand."0.3.22".rand}".default = true; }
      { "0.3.22".default = (f.rand."0.3.22".default or true); }
      { "0.3.22".i128_support =
        (f.rand."0.3.22".i128_support or false) ||
        (f.rand."0.3.22".nightly or false) ||
        (rand."0.3.22"."nightly" or false); }
    ];
  }) [ (features_.libc."${deps."rand"."0.3.22"."libc"}" deps)
       (features_.rand."${deps."rand"."0.3.22"."rand"}" deps)
       (features_.fuchsia_zircon."${deps."rand"."0.3.22"."fuchsia_zircon"}" deps) ];


  crates.rand."0.4.2" = deps: { features?(features_.rand."0.4.2" deps {}) }: buildRustCrate {
    crateName = "rand";
    version = "0.4.2";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0h8pkg23wb67i8904sm76iyr1jlmhklb85vbpz9c9191a24xzkfm";
    dependencies = (if kernel == "fuchsia" then mapFeatures features ([ (crates."fuchsia_zircon"."${deps."rand"."0.4.2"."fuchsia_zircon"}" deps) ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.rand."0.4.2".libc or false then [ (crates.libc."0.2.42" deps) ] else [])) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ (crates."winapi"."${deps."rand"."0.4.2"."winapi"}" deps) ]) else []);
    features = mkFeatures (features.rand."0.4.2" or {});
  };
  features_.rand."0.4.2" = deps: f: updateFeatures f (rec {
    fuchsia_zircon = { "${deps.rand."0.4.2".fuchsia_zircon}".default = true; };
    libc = { "${deps.rand."0.4.2".libc}".default = true; };
    rand = fold recursiveUpdate {} [
      { "0.4.2".default = (f.rand."0.4.2".default or true); }
      { "0.4.2".i128_support =
        (f.rand."0.4.2".i128_support or false) ||
        (f.rand."0.4.2".nightly or false) ||
        (rand."0.4.2"."nightly" or false); }
      { "0.4.2".libc =
        (f.rand."0.4.2".libc or false) ||
        (f.rand."0.4.2".std or false) ||
        (rand."0.4.2"."std" or false); }
      { "0.4.2".std =
        (f.rand."0.4.2".std or false) ||
        (f.rand."0.4.2".default or false) ||
        (rand."0.4.2"."default" or false); }
    ];
    winapi = fold recursiveUpdate {} [
      { "${deps.rand."0.4.2".winapi}"."minwindef" = true; }
      { "${deps.rand."0.4.2".winapi}"."ntsecapi" = true; }
      { "${deps.rand."0.4.2".winapi}"."profileapi" = true; }
      { "${deps.rand."0.4.2".winapi}"."winnt" = true; }
      { "${deps.rand."0.4.2".winapi}".default = true; }
    ];
  }) [ (features_.fuchsia_zircon."${deps."rand"."0.4.2"."fuchsia_zircon"}" deps)
       (features_.libc."${deps."rand"."0.4.2"."libc"}" deps)
       (features_.winapi."${deps."rand"."0.4.2"."winapi"}" deps) ];


  crates.rand."0.5.0" = deps: { features?(features_.rand."0.5.0" deps {}) }: buildRustCrate {
    crateName = "rand";
    version = "0.5.0";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0plnicm1kwjdxncazkri029hnzl48q2y6f4q3xknd6i00v3bx2mz";
    dependencies = mapFeatures features ([ (crates."rand_core"."${deps."rand"."0.5.0"."rand_core"}" deps) ])
      ++ (if kernel == "cloudabi" then mapFeatures features ([ ]
      ++ (if features.rand."0.5.0".cloudabi or false then [ (crates.cloudabi."0.0.3" deps) ] else [])) else [])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ ]
      ++ (if features.rand."0.5.0".fuchsia-zircon or false then [ (crates.fuchsia_zircon."0.3.3" deps) ] else [])) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.rand."0.5.0".libc or false then [ (crates.libc."0.2.42" deps) ] else [])) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ ]
      ++ (if features.rand."0.5.0".winapi or false then [ (crates.winapi."0.3.5" deps) ] else [])) else [])
      ++ (if kernel == "wasm32-unknown-unknown" then mapFeatures features ([]) else []);
    features = mkFeatures (features.rand."0.5.0" or {});
  };
  features_.rand."0.5.0" = deps: f: updateFeatures f (rec {
    cloudabi = { "${deps.rand."0.5.0".cloudabi}".default = true; };
    fuchsia_zircon = { "${deps.rand."0.5.0".fuchsia_zircon}".default = true; };
    libc = { "${deps.rand."0.5.0".libc}".default = true; };
    rand = fold recursiveUpdate {} [
      { "0.5.0".alloc =
        (f.rand."0.5.0".alloc or false) ||
        (f.rand."0.5.0".std or false) ||
        (rand."0.5.0"."std" or false); }
      { "0.5.0".cloudabi =
        (f.rand."0.5.0".cloudabi or false) ||
        (f.rand."0.5.0".std or false) ||
        (rand."0.5.0"."std" or false); }
      { "0.5.0".default = (f.rand."0.5.0".default or true); }
      { "0.5.0".fuchsia-zircon =
        (f.rand."0.5.0".fuchsia-zircon or false) ||
        (f.rand."0.5.0".std or false) ||
        (rand."0.5.0"."std" or false); }
      { "0.5.0".i128_support =
        (f.rand."0.5.0".i128_support or false) ||
        (f.rand."0.5.0".nightly or false) ||
        (rand."0.5.0"."nightly" or false); }
      { "0.5.0".libc =
        (f.rand."0.5.0".libc or false) ||
        (f.rand."0.5.0".std or false) ||
        (rand."0.5.0"."std" or false); }
      { "0.5.0".serde =
        (f.rand."0.5.0".serde or false) ||
        (f.rand."0.5.0".serde1 or false) ||
        (rand."0.5.0"."serde1" or false); }
      { "0.5.0".serde_derive =
        (f.rand."0.5.0".serde_derive or false) ||
        (f.rand."0.5.0".serde1 or false) ||
        (rand."0.5.0"."serde1" or false); }
      { "0.5.0".std =
        (f.rand."0.5.0".std or false) ||
        (f.rand."0.5.0".default or false) ||
        (rand."0.5.0"."default" or false); }
      { "0.5.0".winapi =
        (f.rand."0.5.0".winapi or false) ||
        (f.rand."0.5.0".std or false) ||
        (rand."0.5.0"."std" or false); }
    ];
    rand_core = fold recursiveUpdate {} [
      { "${deps.rand."0.5.0".rand_core}".default = (f.rand_core."${deps.rand."0.5.0".rand_core}".default or false); }
      { "0.2.0".alloc =
        (f.rand_core."0.2.0".alloc or false) ||
        (rand."0.5.0"."alloc" or false) ||
        (f."rand"."0.5.0"."alloc" or false); }
      { "0.2.0".serde1 =
        (f.rand_core."0.2.0".serde1 or false) ||
        (rand."0.5.0"."serde1" or false) ||
        (f."rand"."0.5.0"."serde1" or false); }
      { "0.2.0".std =
        (f.rand_core."0.2.0".std or false) ||
        (rand."0.5.0"."std" or false) ||
        (f."rand"."0.5.0"."std" or false); }
    ];
    winapi = fold recursiveUpdate {} [
      { "${deps.rand."0.5.0".winapi}"."minwindef" = true; }
      { "${deps.rand."0.5.0".winapi}"."ntsecapi" = true; }
      { "${deps.rand."0.5.0".winapi}"."profileapi" = true; }
      { "${deps.rand."0.5.0".winapi}"."winnt" = true; }
      { "${deps.rand."0.5.0".winapi}".default = true; }
    ];
  }) [ (features_.rand_core."${deps."rand"."0.5.0"."rand_core"}" deps)
       (features_.cloudabi."${deps."rand"."0.5.0"."cloudabi"}" deps)
       (features_.fuchsia_zircon."${deps."rand"."0.5.0"."fuchsia_zircon"}" deps)
       (features_.libc."${deps."rand"."0.5.0"."libc"}" deps)
       (features_.winapi."${deps."rand"."0.5.0"."winapi"}" deps) ];


  crates.rand_core."0.2.0" = deps: { features?(features_.rand_core."0.2.0" deps {}) }: buildRustCrate {
    crateName = "rand_core";
    version = "0.2.0";
    authors = [ "The Rust Project Developers" ];
    sha256 = "07l963m2zacc9i1l2jgxng8cmkipfgk26l3pp4pdi02yag9zi40i";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.rand_core."0.2.0" or {});
  };
  features_.rand_core."0.2.0" = deps: f: updateFeatures f (rec {
    rand_core = fold recursiveUpdate {} [
      { "0.2.0".alloc =
        (f.rand_core."0.2.0".alloc or false) ||
        (f.rand_core."0.2.0".std or false) ||
        (rand_core."0.2.0"."std" or false); }
      { "0.2.0".default = (f.rand_core."0.2.0".default or true); }
      { "0.2.0".serde =
        (f.rand_core."0.2.0".serde or false) ||
        (f.rand_core."0.2.0".serde1 or false) ||
        (rand_core."0.2.0"."serde1" or false); }
      { "0.2.0".serde_derive =
        (f.rand_core."0.2.0".serde_derive or false) ||
        (f.rand_core."0.2.0".serde1 or false) ||
        (rand_core."0.2.0"."serde1" or false); }
      { "0.2.0".std =
        (f.rand_core."0.2.0".std or false) ||
        (f.rand_core."0.2.0".default or false) ||
        (rand_core."0.2.0"."default" or false); }
    ];
  }) [];


  crates.rayon."1.0.1" = deps: { features?(features_.rayon."1.0.1" deps {}) }: buildRustCrate {
    crateName = "rayon";
    version = "1.0.1";
    authors = [ "Niko Matsakis <niko@alum.mit.edu>" "Josh Stone <cuviper@gmail.com>" ];
    sha256 = "1ig3gr6r4294v4px1dmghllz14y87fdnfp19syymnrwmwf2k2y76";
    dependencies = mapFeatures features ([ (crates."either"."${deps."rayon"."1.0.1"."either"}" deps) (crates."rayon_core"."${deps."rayon"."1.0.1"."rayon_core"}" deps) ])
      ++ (if !(kernel == "windows" && abi == "gnu") then mapFeatures features ([]) else []);
  };
  features_.rayon."1.0.1" = deps: f: updateFeatures f (rec {
    either = { "${deps.rayon."1.0.1".either}".default = (f.either."${deps.rayon."1.0.1".either}".default or false); };
    rayon = { "1.0.1".default = (f.rayon."1.0.1".default or true); };
    rayon_core = { "${deps.rayon."1.0.1".rayon_core}".default = true; };
  }) [ (features_.either."${deps."rayon"."1.0.1"."either"}" deps)
       (features_.rayon_core."${deps."rayon"."1.0.1"."rayon_core"}" deps) ];


  crates.rayon_core."1.4.0" = deps: { features?(features_.rayon_core."1.4.0" deps {}) }: buildRustCrate {
    crateName = "rayon-core";
    version = "1.4.0";
    authors = [ "Niko Matsakis <niko@alum.mit.edu>" "Josh Stone <cuviper@gmail.com>" ];
    sha256 = "1gmg5fmgvhzks7b05g3ms7x8h1xxqnfkg28wvhzwpdzjljcbnr23";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."crossbeam_deque"."${deps."rayon_core"."1.4.0"."crossbeam_deque"}" deps) (crates."lazy_static"."${deps."rayon_core"."1.4.0"."lazy_static"}" deps) (crates."libc"."${deps."rayon_core"."1.4.0"."libc"}" deps) (crates."num_cpus"."${deps."rayon_core"."1.4.0"."num_cpus"}" deps) (crates."rand"."${deps."rayon_core"."1.4.0"."rand"}" deps) ]);
  };
  features_.rayon_core."1.4.0" = deps: f: updateFeatures f (rec {
    crossbeam_deque = { "${deps.rayon_core."1.4.0".crossbeam_deque}".default = true; };
    lazy_static = { "${deps.rayon_core."1.4.0".lazy_static}".default = true; };
    libc = { "${deps.rayon_core."1.4.0".libc}".default = true; };
    num_cpus = { "${deps.rayon_core."1.4.0".num_cpus}".default = true; };
    rand = { "${deps.rayon_core."1.4.0".rand}".default = true; };
    rayon_core = { "1.4.0".default = (f.rayon_core."1.4.0".default or true); };
  }) [ (features_.crossbeam_deque."${deps."rayon_core"."1.4.0"."crossbeam_deque"}" deps)
       (features_.lazy_static."${deps."rayon_core"."1.4.0"."lazy_static"}" deps)
       (features_.libc."${deps."rayon_core"."1.4.0"."libc"}" deps)
       (features_.num_cpus."${deps."rayon_core"."1.4.0"."num_cpus"}" deps)
       (features_.rand."${deps."rayon_core"."1.4.0"."rand"}" deps) ];


  crates.redox_syscall."0.1.40" = deps: { features?(features_.redox_syscall."0.1.40" deps {}) }: buildRustCrate {
    crateName = "redox_syscall";
    version = "0.1.40";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "132rnhrq49l3z7gjrwj2zfadgw6q0355s6a7id7x7c0d7sk72611";
    libName = "syscall";
  };
  features_.redox_syscall."0.1.40" = deps: f: updateFeatures f (rec {
    redox_syscall = { "0.1.40".default = (f.redox_syscall."0.1.40".default or true); };
  }) [];


  crates.redox_termios."0.1.1" = deps: { features?(features_.redox_termios."0.1.1" deps {}) }: buildRustCrate {
    crateName = "redox_termios";
    version = "0.1.1";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "04s6yyzjca552hdaqlvqhp3vw0zqbc304md5czyd3axh56iry8wh";
    libPath = "src/lib.rs";
    dependencies = mapFeatures features ([ (crates."redox_syscall"."${deps."redox_termios"."0.1.1"."redox_syscall"}" deps) ]);
  };
  features_.redox_termios."0.1.1" = deps: f: updateFeatures f (rec {
    redox_syscall = { "${deps.redox_termios."0.1.1".redox_syscall}".default = true; };
    redox_termios = { "0.1.1".default = (f.redox_termios."0.1.1".default or true); };
  }) [ (features_.redox_syscall."${deps."redox_termios"."0.1.1"."redox_syscall"}" deps) ];


  crates.regex."0.2.11" = deps: { features?(features_.regex."0.2.11" deps {}) }: buildRustCrate {
    crateName = "regex";
    version = "0.2.11";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0r50cymxdqp0fv1dxd22mjr6y32q450nwacd279p9s7lh0cafijj";
    dependencies = mapFeatures features ([ (crates."aho_corasick"."${deps."regex"."0.2.11"."aho_corasick"}" deps) (crates."memchr"."${deps."regex"."0.2.11"."memchr"}" deps) (crates."regex_syntax"."${deps."regex"."0.2.11"."regex_syntax"}" deps) (crates."thread_local"."${deps."regex"."0.2.11"."thread_local"}" deps) (crates."utf8_ranges"."${deps."regex"."0.2.11"."utf8_ranges"}" deps) ]);
    features = mkFeatures (features.regex."0.2.11" or {});
  };
  features_.regex."0.2.11" = deps: f: updateFeatures f (rec {
    aho_corasick = { "${deps.regex."0.2.11".aho_corasick}".default = true; };
    memchr = { "${deps.regex."0.2.11".memchr}".default = true; };
    regex = fold recursiveUpdate {} [
      { "0.2.11".default = (f.regex."0.2.11".default or true); }
      { "0.2.11".pattern =
        (f.regex."0.2.11".pattern or false) ||
        (f.regex."0.2.11".unstable or false) ||
        (regex."0.2.11"."unstable" or false); }
    ];
    regex_syntax = { "${deps.regex."0.2.11".regex_syntax}".default = true; };
    thread_local = { "${deps.regex."0.2.11".thread_local}".default = true; };
    utf8_ranges = { "${deps.regex."0.2.11".utf8_ranges}".default = true; };
  }) [ (features_.aho_corasick."${deps."regex"."0.2.11"."aho_corasick"}" deps)
       (features_.memchr."${deps."regex"."0.2.11"."memchr"}" deps)
       (features_.regex_syntax."${deps."regex"."0.2.11"."regex_syntax"}" deps)
       (features_.thread_local."${deps."regex"."0.2.11"."thread_local"}" deps)
       (features_.utf8_ranges."${deps."regex"."0.2.11"."utf8_ranges"}" deps) ];


  crates.regex_syntax."0.5.6" = deps: { features?(features_.regex_syntax."0.5.6" deps {}) }: buildRustCrate {
    crateName = "regex-syntax";
    version = "0.5.6";
    authors = [ "The Rust Project Developers" ];
    sha256 = "10vf3r34bgjnbrnqd5aszn35bjvm8insw498l1vjy8zx5yms3427";
    dependencies = mapFeatures features ([ (crates."ucd_util"."${deps."regex_syntax"."0.5.6"."ucd_util"}" deps) ]);
  };
  features_.regex_syntax."0.5.6" = deps: f: updateFeatures f (rec {
    regex_syntax = { "0.5.6".default = (f.regex_syntax."0.5.6".default or true); };
    ucd_util = { "${deps.regex_syntax."0.5.6".ucd_util}".default = true; };
  }) [ (features_.ucd_util."${deps."regex_syntax"."0.5.6"."ucd_util"}" deps) ];


  crates.remove_dir_all."0.5.1" = deps: { features?(features_.remove_dir_all."0.5.1" deps {}) }: buildRustCrate {
    crateName = "remove_dir_all";
    version = "0.5.1";
    authors = [ "Aaronepower <theaaronepower@gmail.com>" ];
    sha256 = "1chx3yvfbj46xjz4bzsvps208l46hfbcy0sm98gpiya454n4rrl7";
    dependencies = (if kernel == "windows" then mapFeatures features ([ (crates."winapi"."${deps."remove_dir_all"."0.5.1"."winapi"}" deps) ]) else []);
  };
  features_.remove_dir_all."0.5.1" = deps: f: updateFeatures f (rec {
    remove_dir_all = { "0.5.1".default = (f.remove_dir_all."0.5.1".default or true); };
    winapi = fold recursiveUpdate {} [
      { "${deps.remove_dir_all."0.5.1".winapi}"."errhandlingapi" = true; }
      { "${deps.remove_dir_all."0.5.1".winapi}"."fileapi" = true; }
      { "${deps.remove_dir_all."0.5.1".winapi}"."std" = true; }
      { "${deps.remove_dir_all."0.5.1".winapi}"."winbase" = true; }
      { "${deps.remove_dir_all."0.5.1".winapi}"."winerror" = true; }
      { "${deps.remove_dir_all."0.5.1".winapi}".default = true; }
    ];
  }) [ (features_.winapi."${deps."remove_dir_all"."0.5.1"."winapi"}" deps) ];


  crates.reqwest."0.6.2" = deps: { features?(features_.reqwest."0.6.2" deps {}) }: buildRustCrate {
    crateName = "reqwest";
    version = "0.6.2";
    authors = [ "Sean McArthur <sean.monstar@gmail.com>" ];
    sha256 = "1yms5gvmrhakmvm2q3i91n3m4gkg1smvggkz6scaq7fbsz7nznia";
    dependencies = mapFeatures features ([ (crates."hyper"."${deps."reqwest"."0.6.2"."hyper"}" deps) (crates."hyper_native_tls"."${deps."reqwest"."0.6.2"."hyper_native_tls"}" deps) (crates."libflate"."${deps."reqwest"."0.6.2"."libflate"}" deps) (crates."log"."${deps."reqwest"."0.6.2"."log"}" deps) (crates."serde"."${deps."reqwest"."0.6.2"."serde"}" deps) (crates."serde_json"."${deps."reqwest"."0.6.2"."serde_json"}" deps) (crates."serde_urlencoded"."${deps."reqwest"."0.6.2"."serde_urlencoded"}" deps) (crates."url"."${deps."reqwest"."0.6.2"."url"}" deps) ]);
  };
  features_.reqwest."0.6.2" = deps: f: updateFeatures f (rec {
    hyper = { "${deps.reqwest."0.6.2".hyper}".default = true; };
    hyper_native_tls = { "${deps.reqwest."0.6.2".hyper_native_tls}".default = true; };
    libflate = { "${deps.reqwest."0.6.2".libflate}".default = true; };
    log = { "${deps.reqwest."0.6.2".log}".default = true; };
    reqwest = { "0.6.2".default = (f.reqwest."0.6.2".default or true); };
    serde = { "${deps.reqwest."0.6.2".serde}".default = true; };
    serde_json = { "${deps.reqwest."0.6.2".serde_json}".default = true; };
    serde_urlencoded = { "${deps.reqwest."0.6.2".serde_urlencoded}".default = true; };
    url = { "${deps.reqwest."0.6.2".url}".default = true; };
  }) [ (features_.hyper."${deps."reqwest"."0.6.2"."hyper"}" deps)
       (features_.hyper_native_tls."${deps."reqwest"."0.6.2"."hyper_native_tls"}" deps)
       (features_.libflate."${deps."reqwest"."0.6.2"."libflate"}" deps)
       (features_.log."${deps."reqwest"."0.6.2"."log"}" deps)
       (features_.serde."${deps."reqwest"."0.6.2"."serde"}" deps)
       (features_.serde_json."${deps."reqwest"."0.6.2"."serde_json"}" deps)
       (features_.serde_urlencoded."${deps."reqwest"."0.6.2"."serde_urlencoded"}" deps)
       (features_.url."${deps."reqwest"."0.6.2"."url"}" deps) ];


  crates.rgb."0.8.9" = deps: { features?(features_.rgb."0.8.9" deps {}) }: buildRustCrate {
    crateName = "rgb";
    version = "0.8.9";
    authors = [ "Kornel Lesiński <kornel@geekhood.net>" ];
    sha256 = "01ayki35f9njfqd727ywqw35rc0kbj6gj9acy4a0x6xzywavsmcx";
    dependencies = mapFeatures features ([]);
  };
  features_.rgb."0.8.9" = deps: f: updateFeatures f (rec {
    rgb = { "0.8.9".default = (f.rgb."0.8.9".default or true); };
  }) [];


  crates.route_recognizer."0.1.12" = deps: { features?(features_.route_recognizer."0.1.12" deps {}) }: buildRustCrate {
    crateName = "route-recognizer";
    version = "0.1.12";
    authors = [ "wycats" ];
    sha256 = "16f2inl9zbr2c56idijwivh9hsnr188dv4ny6jmy1ralbs95f3ai";
  };
  features_.route_recognizer."0.1.12" = deps: f: updateFeatures f (rec {
    route_recognizer = { "0.1.12".default = (f.route_recognizer."0.1.12".default or true); };
  }) [];


  crates.router."0.5.1" = deps: { features?(features_.router."0.5.1" deps {}) }: buildRustCrate {
    crateName = "router";
    version = "0.5.1";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1m0i6g1f7y1a0fi5cqgx5rdsiwcswr96p9ls6473f1n43fx29i6n";
    dependencies = mapFeatures features ([ (crates."iron"."${deps."router"."0.5.1"."iron"}" deps) (crates."route_recognizer"."${deps."router"."0.5.1"."route_recognizer"}" deps) (crates."url"."${deps."router"."0.5.1"."url"}" deps) ]);
  };
  features_.router."0.5.1" = deps: f: updateFeatures f (rec {
    iron = { "${deps.router."0.5.1".iron}".default = true; };
    route_recognizer = { "${deps.router."0.5.1".route_recognizer}".default = true; };
    router = { "0.5.1".default = (f.router."0.5.1".default or true); };
    url = { "${deps.router."0.5.1".url}".default = true; };
  }) [ (features_.iron."${deps."router"."0.5.1"."iron"}" deps)
       (features_.route_recognizer."${deps."router"."0.5.1"."route_recognizer"}" deps)
       (features_.url."${deps."router"."0.5.1"."url"}" deps) ];


  crates.rustc_demangle."0.1.8" = deps: { features?(features_.rustc_demangle."0.1.8" deps {}) }: buildRustCrate {
    crateName = "rustc-demangle";
    version = "0.1.8";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0xn5l86qfwngmdsjbglj30wh37zplvch96jl9raysl3k06gkkv3c";
  };
  features_.rustc_demangle."0.1.8" = deps: f: updateFeatures f (rec {
    rustc_demangle = { "0.1.8".default = (f.rustc_demangle."0.1.8".default or true); };
  }) [];


  crates.rustc_serialize."0.3.24" = deps: { features?(features_.rustc_serialize."0.3.24" deps {}) }: buildRustCrate {
    crateName = "rustc-serialize";
    version = "0.3.24";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0rfk6p66mqkd3g36l0ddlv2rvnp1mp3lrq5frq9zz5cbnz5pmmxn";
  };
  features_.rustc_serialize."0.3.24" = deps: f: updateFeatures f (rec {
    rustc_serialize = { "0.3.24".default = (f.rustc_serialize."0.3.24".default or true); };
  }) [];


  crates.safemem."0.2.0" = deps: { features?(features_.safemem."0.2.0" deps {}) }: buildRustCrate {
    crateName = "safemem";
    version = "0.2.0";
    authors = [ "Austin Bonander <austin.bonander@gmail.com>" ];
    sha256 = "058m251q202n479ip1h6s91yw3plg66vsk5mpaflssn6rs5hijdm";
  };
  features_.safemem."0.2.0" = deps: f: updateFeatures f (rec {
    safemem = { "0.2.0".default = (f.safemem."0.2.0".default or true); };
  }) [];


  crates.schannel."0.1.12" = deps: { features?(features_.schannel."0.1.12" deps {}) }: buildRustCrate {
    crateName = "schannel";
    version = "0.1.12";
    authors = [ "Steven Fackler <sfackler@gmail.com>" "Steffen Butzer <steffen.butzer@outlook.com>" ];
    sha256 = "1lqdzx8d4rql8ah9w760syvrbbyp26s9cgidvrh34h0hjglja42d";
    dependencies = mapFeatures features ([ (crates."lazy_static"."${deps."schannel"."0.1.12"."lazy_static"}" deps) (crates."winapi"."${deps."schannel"."0.1.12"."winapi"}" deps) ]);
  };
  features_.schannel."0.1.12" = deps: f: updateFeatures f (rec {
    lazy_static = { "${deps.schannel."0.1.12".lazy_static}".default = true; };
    schannel = { "0.1.12".default = (f.schannel."0.1.12".default or true); };
    winapi = fold recursiveUpdate {} [
      { "${deps.schannel."0.1.12".winapi}"."lmcons" = true; }
      { "${deps.schannel."0.1.12".winapi}"."minschannel" = true; }
      { "${deps.schannel."0.1.12".winapi}"."schannel" = true; }
      { "${deps.schannel."0.1.12".winapi}"."securitybaseapi" = true; }
      { "${deps.schannel."0.1.12".winapi}"."sysinfoapi" = true; }
      { "${deps.schannel."0.1.12".winapi}"."timezoneapi" = true; }
      { "${deps.schannel."0.1.12".winapi}"."winbase" = true; }
      { "${deps.schannel."0.1.12".winapi}"."wincrypt" = true; }
      { "${deps.schannel."0.1.12".winapi}"."winerror" = true; }
      { "${deps.schannel."0.1.12".winapi}".default = true; }
    ];
  }) [ (features_.lazy_static."${deps."schannel"."0.1.12"."lazy_static"}" deps)
       (features_.winapi."${deps."schannel"."0.1.12"."winapi"}" deps) ];


  crates.scopeguard."0.3.3" = deps: { features?(features_.scopeguard."0.3.3" deps {}) }: buildRustCrate {
    crateName = "scopeguard";
    version = "0.3.3";
    authors = [ "bluss" ];
    sha256 = "0i1l013csrqzfz6c68pr5pi01hg5v5yahq8fsdmaxy6p8ygsjf3r";
    features = mkFeatures (features.scopeguard."0.3.3" or {});
  };
  features_.scopeguard."0.3.3" = deps: f: updateFeatures f (rec {
    scopeguard = fold recursiveUpdate {} [
      { "0.3.3".default = (f.scopeguard."0.3.3".default or true); }
      { "0.3.3".use_std =
        (f.scopeguard."0.3.3".use_std or false) ||
        (f.scopeguard."0.3.3".default or false) ||
        (scopeguard."0.3.3"."default" or false); }
    ];
  }) [];


  crates.security_framework."0.1.16" = deps: { features?(features_.security_framework."0.1.16" deps {}) }: buildRustCrate {
    crateName = "security-framework";
    version = "0.1.16";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1kxczsaj8gz4922jl5af2gkxh71rasb6khaf3dp7ldlnw9qf2sbm";
    dependencies = mapFeatures features ([ (crates."core_foundation"."${deps."security_framework"."0.1.16"."core_foundation"}" deps) (crates."core_foundation_sys"."${deps."security_framework"."0.1.16"."core_foundation_sys"}" deps) (crates."libc"."${deps."security_framework"."0.1.16"."libc"}" deps) (crates."security_framework_sys"."${deps."security_framework"."0.1.16"."security_framework_sys"}" deps) ]);
    features = mkFeatures (features.security_framework."0.1.16" or {});
  };
  features_.security_framework."0.1.16" = deps: f: updateFeatures f (rec {
    core_foundation = { "${deps.security_framework."0.1.16".core_foundation}".default = true; };
    core_foundation_sys = { "${deps.security_framework."0.1.16".core_foundation_sys}".default = true; };
    libc = { "${deps.security_framework."0.1.16".libc}".default = true; };
    security_framework = fold recursiveUpdate {} [
      { "0.1.16".OSX_10_10 =
        (f.security_framework."0.1.16".OSX_10_10 or false) ||
        (f.security_framework."0.1.16".OSX_10_11 or false) ||
        (security_framework."0.1.16"."OSX_10_11" or false); }
      { "0.1.16".OSX_10_11 =
        (f.security_framework."0.1.16".OSX_10_11 or false) ||
        (f.security_framework."0.1.16".OSX_10_12 or false) ||
        (security_framework."0.1.16"."OSX_10_12" or false); }
      { "0.1.16".OSX_10_8 =
        (f.security_framework."0.1.16".OSX_10_8 or false) ||
        (f.security_framework."0.1.16".OSX_10_9 or false) ||
        (security_framework."0.1.16"."OSX_10_9" or false); }
      { "0.1.16".OSX_10_9 =
        (f.security_framework."0.1.16".OSX_10_9 or false) ||
        (f.security_framework."0.1.16".OSX_10_10 or false) ||
        (security_framework."0.1.16"."OSX_10_10" or false); }
      { "0.1.16".default = (f.security_framework."0.1.16".default or true); }
    ];
    security_framework_sys = fold recursiveUpdate {} [
      { "${deps.security_framework."0.1.16".security_framework_sys}".default = true; }
      { "0.1.16".OSX_10_10 =
        (f.security_framework_sys."0.1.16".OSX_10_10 or false) ||
        (security_framework."0.1.16"."OSX_10_10" or false) ||
        (f."security_framework"."0.1.16"."OSX_10_10" or false); }
      { "0.1.16".OSX_10_11 =
        (f.security_framework_sys."0.1.16".OSX_10_11 or false) ||
        (security_framework."0.1.16"."OSX_10_11" or false) ||
        (f."security_framework"."0.1.16"."OSX_10_11" or false) ||
        (security_framework."0.1.16"."OSX_10_12" or false) ||
        (f."security_framework"."0.1.16"."OSX_10_12" or false); }
      { "0.1.16".OSX_10_8 =
        (f.security_framework_sys."0.1.16".OSX_10_8 or false) ||
        (security_framework."0.1.16"."OSX_10_8" or false) ||
        (f."security_framework"."0.1.16"."OSX_10_8" or false); }
      { "0.1.16".OSX_10_9 =
        (f.security_framework_sys."0.1.16".OSX_10_9 or false) ||
        (security_framework."0.1.16"."OSX_10_9" or false) ||
        (f."security_framework"."0.1.16"."OSX_10_9" or false); }
    ];
  }) [ (features_.core_foundation."${deps."security_framework"."0.1.16"."core_foundation"}" deps)
       (features_.core_foundation_sys."${deps."security_framework"."0.1.16"."core_foundation_sys"}" deps)
       (features_.libc."${deps."security_framework"."0.1.16"."libc"}" deps)
       (features_.security_framework_sys."${deps."security_framework"."0.1.16"."security_framework_sys"}" deps) ];


  crates.security_framework_sys."0.1.16" = deps: { features?(features_.security_framework_sys."0.1.16" deps {}) }: buildRustCrate {
    crateName = "security-framework-sys";
    version = "0.1.16";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0ai2pivdr5fyc7czbkpcrwap0imyy0r8ndarrl3n5kiv0jha1js3";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."core_foundation_sys"."${deps."security_framework_sys"."0.1.16"."core_foundation_sys"}" deps) (crates."libc"."${deps."security_framework_sys"."0.1.16"."libc"}" deps) ]);
    features = mkFeatures (features.security_framework_sys."0.1.16" or {});
  };
  features_.security_framework_sys."0.1.16" = deps: f: updateFeatures f (rec {
    core_foundation_sys = { "${deps.security_framework_sys."0.1.16".core_foundation_sys}".default = true; };
    libc = { "${deps.security_framework_sys."0.1.16".libc}".default = true; };
    security_framework_sys = fold recursiveUpdate {} [
      { "0.1.16".OSX_10_10 =
        (f.security_framework_sys."0.1.16".OSX_10_10 or false) ||
        (f.security_framework_sys."0.1.16".OSX_10_11 or false) ||
        (security_framework_sys."0.1.16"."OSX_10_11" or false); }
      { "0.1.16".OSX_10_11 =
        (f.security_framework_sys."0.1.16".OSX_10_11 or false) ||
        (f.security_framework_sys."0.1.16".OSX_10_12 or false) ||
        (security_framework_sys."0.1.16"."OSX_10_12" or false); }
      { "0.1.16".OSX_10_8 =
        (f.security_framework_sys."0.1.16".OSX_10_8 or false) ||
        (f.security_framework_sys."0.1.16".OSX_10_9 or false) ||
        (security_framework_sys."0.1.16"."OSX_10_9" or false); }
      { "0.1.16".OSX_10_9 =
        (f.security_framework_sys."0.1.16".OSX_10_9 or false) ||
        (f.security_framework_sys."0.1.16".OSX_10_10 or false) ||
        (security_framework_sys."0.1.16"."OSX_10_10" or false); }
      { "0.1.16".default = (f.security_framework_sys."0.1.16".default or true); }
    ];
  }) [ (features_.core_foundation_sys."${deps."security_framework_sys"."0.1.16"."core_foundation_sys"}" deps)
       (features_.libc."${deps."security_framework_sys"."0.1.16"."libc"}" deps) ];


  crates.sequence_trie."0.2.1" = deps: { features?(features_.sequence_trie."0.2.1" deps {}) }: buildRustCrate {
    crateName = "sequence_trie";
    version = "0.2.1";
    authors = [ "Michael Sproul <micsproul@gmail.com>" "Alex Gulyás <gulyas.alex@gmail.com>" ];
    sha256 = "0iiskfk4ds872pwm851kw61a9vrv0y9kz462xbjcp91lfzhj12cw";
  };
  features_.sequence_trie."0.2.1" = deps: f: updateFeatures f (rec {
    sequence_trie = { "0.2.1".default = (f.sequence_trie."0.2.1".default or true); };
  }) [];


  crates.serde."1.0.66" = deps: { features?(features_.serde."1.0.66" deps {}) }: buildRustCrate {
    crateName = "serde";
    version = "1.0.66";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "07z30q9z30z2v3l7j5g3b9lw0s1vlhjimamf0db23yydbp3vf5fi";
    build = "build.rs";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.serde."1.0.66" or {});
  };
  features_.serde."1.0.66" = deps: f: updateFeatures f (rec {
    serde = fold recursiveUpdate {} [
      { "1.0.66".default = (f.serde."1.0.66".default or true); }
      { "1.0.66".serde_derive =
        (f.serde."1.0.66".serde_derive or false) ||
        (f.serde."1.0.66".derive or false) ||
        (serde."1.0.66"."derive" or false); }
      { "1.0.66".std =
        (f.serde."1.0.66".std or false) ||
        (f.serde."1.0.66".default or false) ||
        (serde."1.0.66"."default" or false); }
      { "1.0.66".unstable =
        (f.serde."1.0.66".unstable or false) ||
        (f.serde."1.0.66".alloc or false) ||
        (serde."1.0.66"."alloc" or false); }
    ];
  }) [];


  crates.serde_derive."1.0.66" = deps: { features?(features_.serde_derive."1.0.66" deps {}) }: buildRustCrate {
    crateName = "serde_derive";
    version = "1.0.66";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1xfm8crm8zwv3gqy0zf84wzsk14v855jkr80i8pdw1p8v4lyc2zx";
    procMacro = true;
    dependencies = mapFeatures features ([ (crates."proc_macro2"."${deps."serde_derive"."1.0.66"."proc_macro2"}" deps) (crates."quote"."${deps."serde_derive"."1.0.66"."quote"}" deps) (crates."syn"."${deps."serde_derive"."1.0.66"."syn"}" deps) ]);
    features = mkFeatures (features.serde_derive."1.0.66" or {});
  };
  features_.serde_derive."1.0.66" = deps: f: updateFeatures f (rec {
    proc_macro2 = { "${deps.serde_derive."1.0.66".proc_macro2}".default = true; };
    quote = { "${deps.serde_derive."1.0.66".quote}".default = true; };
    serde_derive = { "1.0.66".default = (f.serde_derive."1.0.66".default or true); };
    syn = fold recursiveUpdate {} [
      { "${deps.serde_derive."1.0.66".syn}"."visit" = true; }
      { "${deps.serde_derive."1.0.66".syn}".default = true; }
    ];
  }) [ (features_.proc_macro2."${deps."serde_derive"."1.0.66"."proc_macro2"}" deps)
       (features_.quote."${deps."serde_derive"."1.0.66"."quote"}" deps)
       (features_.syn."${deps."serde_derive"."1.0.66"."syn"}" deps) ];


  crates.serde_json."1.0.20" = deps: { features?(features_.serde_json."1.0.20" deps {}) }: buildRustCrate {
    crateName = "serde_json";
    version = "1.0.20";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0hmbiv68mmr01rbngzvy6w2a8fsv7zi0pk8njghdbzgpipy11sk3";
    dependencies = mapFeatures features ([ (crates."dtoa"."${deps."serde_json"."1.0.20"."dtoa"}" deps) (crates."itoa"."${deps."serde_json"."1.0.20"."itoa"}" deps) (crates."serde"."${deps."serde_json"."1.0.20"."serde"}" deps) ]);
    features = mkFeatures (features.serde_json."1.0.20" or {});
  };
  features_.serde_json."1.0.20" = deps: f: updateFeatures f (rec {
    dtoa = { "${deps.serde_json."1.0.20".dtoa}".default = true; };
    itoa = { "${deps.serde_json."1.0.20".itoa}".default = true; };
    serde = { "${deps.serde_json."1.0.20".serde}".default = true; };
    serde_json = fold recursiveUpdate {} [
      { "1.0.20".default = (f.serde_json."1.0.20".default or true); }
      { "1.0.20".indexmap =
        (f.serde_json."1.0.20".indexmap or false) ||
        (f.serde_json."1.0.20".preserve_order or false) ||
        (serde_json."1.0.20"."preserve_order" or false); }
    ];
  }) [ (features_.dtoa."${deps."serde_json"."1.0.20"."dtoa"}" deps)
       (features_.itoa."${deps."serde_json"."1.0.20"."itoa"}" deps)
       (features_.serde."${deps."serde_json"."1.0.20"."serde"}" deps) ];


  crates.serde_urlencoded."0.5.2" = deps: { features?(features_.serde_urlencoded."0.5.2" deps {}) }: buildRustCrate {
    crateName = "serde_urlencoded";
    version = "0.5.2";
    authors = [ "Anthony Ramine <n.oxyde@gmail.com>" ];
    sha256 = "0m5pigng0665qrk4ii1z84pb4lchbsswhgb863yglljskmm056m0";
    dependencies = mapFeatures features ([ (crates."dtoa"."${deps."serde_urlencoded"."0.5.2"."dtoa"}" deps) (crates."itoa"."${deps."serde_urlencoded"."0.5.2"."itoa"}" deps) (crates."serde"."${deps."serde_urlencoded"."0.5.2"."serde"}" deps) (crates."url"."${deps."serde_urlencoded"."0.5.2"."url"}" deps) ]);
  };
  features_.serde_urlencoded."0.5.2" = deps: f: updateFeatures f (rec {
    dtoa = { "${deps.serde_urlencoded."0.5.2".dtoa}".default = true; };
    itoa = { "${deps.serde_urlencoded."0.5.2".itoa}".default = true; };
    serde = { "${deps.serde_urlencoded."0.5.2".serde}".default = true; };
    serde_urlencoded = { "0.5.2".default = (f.serde_urlencoded."0.5.2".default or true); };
    url = { "${deps.serde_urlencoded."0.5.2".url}".default = true; };
  }) [ (features_.dtoa."${deps."serde_urlencoded"."0.5.2"."dtoa"}" deps)
       (features_.itoa."${deps."serde_urlencoded"."0.5.2"."itoa"}" deps)
       (features_.serde."${deps."serde_urlencoded"."0.5.2"."serde"}" deps)
       (features_.url."${deps."serde_urlencoded"."0.5.2"."url"}" deps) ];


  crates.sha1."0.6.0" = deps: { features?(features_.sha1."0.6.0" deps {}) }: buildRustCrate {
    crateName = "sha1";
    version = "0.6.0";
    authors = [ "Armin Ronacher <armin.ronacher@active-4.com>" ];
    sha256 = "12cp2b8f3hbwhfpnv1j1afl285xxmmbxh9w4npzvwbdh7xfyww8v";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.sha1."0.6.0" or {});
  };
  features_.sha1."0.6.0" = deps: f: updateFeatures f (rec {
    sha1 = { "0.6.0".default = (f.sha1."0.6.0".default or true); };
  }) [];


  crates.sha2."0.7.1" = deps: { features?(features_.sha2."0.7.1" deps {}) }: buildRustCrate {
    crateName = "sha2";
    version = "0.7.1";
    authors = [ "RustCrypto Developers" ];
    sha256 = "1x5034qjkk6l3q5anlffh46jb4rlyyiwigwlxrnw7d6ijxpygfzb";
    dependencies = mapFeatures features ([ (crates."block_buffer"."${deps."sha2"."0.7.1"."block_buffer"}" deps) (crates."byte_tools"."${deps."sha2"."0.7.1"."byte_tools"}" deps) (crates."digest"."${deps."sha2"."0.7.1"."digest"}" deps) (crates."fake_simd"."${deps."sha2"."0.7.1"."fake_simd"}" deps) ]);
    features = mkFeatures (features.sha2."0.7.1" or {});
  };
  features_.sha2."0.7.1" = deps: f: updateFeatures f (rec {
    block_buffer = { "${deps.sha2."0.7.1".block_buffer}".default = true; };
    byte_tools = { "${deps.sha2."0.7.1".byte_tools}".default = true; };
    digest = { "${deps.sha2."0.7.1".digest}".default = true; };
    fake_simd = { "${deps.sha2."0.7.1".fake_simd}".default = true; };
    sha2 = fold recursiveUpdate {} [
      { "0.7.1".default = (f.sha2."0.7.1".default or true); }
      { "0.7.1".sha2-asm =
        (f.sha2."0.7.1".sha2-asm or false) ||
        (f.sha2."0.7.1".asm or false) ||
        (sha2."0.7.1"."asm" or false); }
    ];
  }) [ (features_.block_buffer."${deps."sha2"."0.7.1"."block_buffer"}" deps)
       (features_.byte_tools."${deps."sha2"."0.7.1"."byte_tools"}" deps)
       (features_.digest."${deps."sha2"."0.7.1"."digest"}" deps)
       (features_.fake_simd."${deps."sha2"."0.7.1"."fake_simd"}" deps) ];


  crates.shell32_sys."0.1.2" = deps: { features?(features_.shell32_sys."0.1.2" deps {}) }: buildRustCrate {
    crateName = "shell32-sys";
    version = "0.1.2";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "031vnnr88ip73a0p1q4g2klbkybr2p562m2ck7w2w66zkxz382a5";
    libName = "shell32";
    build = "build.rs";
    dependencies = mapFeatures features ([ (crates."winapi"."${deps."shell32_sys"."0.1.2"."winapi"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."winapi_build"."${deps."shell32_sys"."0.1.2"."winapi_build"}" deps) ]);
  };
  features_.shell32_sys."0.1.2" = deps: f: updateFeatures f (rec {
    shell32_sys = { "0.1.2".default = (f.shell32_sys."0.1.2".default or true); };
    winapi = { "${deps.shell32_sys."0.1.2".winapi}".default = true; };
    winapi_build = { "${deps.shell32_sys."0.1.2".winapi_build}".default = true; };
  }) [ (features_.winapi."${deps."shell32_sys"."0.1.2"."winapi"}" deps)
       (features_.winapi_build."${deps."shell32_sys"."0.1.2"."winapi_build"}" deps) ];


  crates.smallvec."0.6.1" = deps: { features?(features_.smallvec."0.6.1" deps {}) }: buildRustCrate {
    crateName = "smallvec";
    version = "0.6.1";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "16m07xh67xcdpwjkbzbv9d7visxmz4fb4a8jfcrsrf333w7vkl1g";
    libPath = "lib.rs";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.smallvec."0.6.1" or {});
  };
  features_.smallvec."0.6.1" = deps: f: updateFeatures f (rec {
    smallvec = fold recursiveUpdate {} [
      { "0.6.1".default = (f.smallvec."0.6.1".default or true); }
      { "0.6.1".std =
        (f.smallvec."0.6.1".std or false) ||
        (f.smallvec."0.6.1".default or false) ||
        (smallvec."0.6.1"."default" or false); }
    ];
  }) [];


  crates.stable_deref_trait."1.0.0" = deps: { features?(features_.stable_deref_trait."1.0.0" deps {}) }: buildRustCrate {
    crateName = "stable_deref_trait";
    version = "1.0.0";
    authors = [ "Robert Grosse <n210241048576@gmail.com>" ];
    sha256 = "0ya5fms9qdwkd52d3a111w4vcz18j4rbfx4p88z44116cqd6cczr";
    features = mkFeatures (features.stable_deref_trait."1.0.0" or {});
  };
  features_.stable_deref_trait."1.0.0" = deps: f: updateFeatures f (rec {
    stable_deref_trait = fold recursiveUpdate {} [
      { "1.0.0".default = (f.stable_deref_trait."1.0.0".default or true); }
      { "1.0.0".std =
        (f.stable_deref_trait."1.0.0".std or false) ||
        (f.stable_deref_trait."1.0.0".default or false) ||
        (stable_deref_trait."1.0.0"."default" or false); }
    ];
  }) [];


  crates.strsim."0.7.0" = deps: { features?(features_.strsim."0.7.0" deps {}) }: buildRustCrate {
    crateName = "strsim";
    version = "0.7.0";
    authors = [ "Danny Guo <dannyguo91@gmail.com>" ];
    sha256 = "0fy0k5f2705z73mb3x9459bpcvrx4ky8jpr4zikcbiwan4bnm0iv";
  };
  features_.strsim."0.7.0" = deps: f: updateFeatures f (rec {
    strsim = { "0.7.0".default = (f.strsim."0.7.0".default or true); };
  }) [];


  crates.syn."0.14.2" = deps: { features?(features_.syn."0.14.2" deps {}) }: buildRustCrate {
    crateName = "syn";
    version = "0.14.2";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1p9wa5h8p3djkhjrjc5bsbmkpylig3h5r0kkrkgv7rpfb4rpzvmp";
    dependencies = mapFeatures features ([ (crates."proc_macro2"."${deps."syn"."0.14.2"."proc_macro2"}" deps) (crates."unicode_xid"."${deps."syn"."0.14.2"."unicode_xid"}" deps) ]
      ++ (if features.syn."0.14.2".quote or false then [ (crates.quote."0.6.3" deps) ] else []));
    features = mkFeatures (features.syn."0.14.2" or {});
  };
  features_.syn."0.14.2" = deps: f: updateFeatures f (rec {
    proc_macro2 = fold recursiveUpdate {} [
      { "${deps.syn."0.14.2".proc_macro2}".default = (f.proc_macro2."${deps.syn."0.14.2".proc_macro2}".default or false); }
      { "0.4.6".proc-macro =
        (f.proc_macro2."0.4.6".proc-macro or false) ||
        (syn."0.14.2"."proc-macro" or false) ||
        (f."syn"."0.14.2"."proc-macro" or false); }
    ];
    quote = fold recursiveUpdate {} [
      { "${deps.syn."0.14.2".quote}".default = (f.quote."${deps.syn."0.14.2".quote}".default or false); }
      { "0.6.3".proc-macro =
        (f.quote."0.6.3".proc-macro or false) ||
        (syn."0.14.2"."proc-macro" or false) ||
        (f."syn"."0.14.2"."proc-macro" or false); }
    ];
    syn = fold recursiveUpdate {} [
      { "0.14.2".clone-impls =
        (f.syn."0.14.2".clone-impls or false) ||
        (f.syn."0.14.2".default or false) ||
        (syn."0.14.2"."default" or false); }
      { "0.14.2".default = (f.syn."0.14.2".default or true); }
      { "0.14.2".derive =
        (f.syn."0.14.2".derive or false) ||
        (f.syn."0.14.2".default or false) ||
        (syn."0.14.2"."default" or false); }
      { "0.14.2".parsing =
        (f.syn."0.14.2".parsing or false) ||
        (f.syn."0.14.2".default or false) ||
        (syn."0.14.2"."default" or false); }
      { "0.14.2".printing =
        (f.syn."0.14.2".printing or false) ||
        (f.syn."0.14.2".default or false) ||
        (syn."0.14.2"."default" or false); }
      { "0.14.2".proc-macro =
        (f.syn."0.14.2".proc-macro or false) ||
        (f.syn."0.14.2".default or false) ||
        (syn."0.14.2"."default" or false); }
      { "0.14.2".quote =
        (f.syn."0.14.2".quote or false) ||
        (f.syn."0.14.2".printing or false) ||
        (syn."0.14.2"."printing" or false); }
    ];
    unicode_xid = { "${deps.syn."0.14.2".unicode_xid}".default = true; };
  }) [ (features_.proc_macro2."${deps."syn"."0.14.2"."proc_macro2"}" deps)
       (features_.quote."${deps."syn"."0.14.2"."quote"}" deps)
       (features_.unicode_xid."${deps."syn"."0.14.2"."unicode_xid"}" deps) ];


  crates.syntex_errors."0.58.1" = deps: { features?(features_.syntex_errors."0.58.1" deps {}) }: buildRustCrate {
    crateName = "syntex_errors";
    version = "0.58.1";
    authors = [ "erick.tryzelaar@gmail.com" ];
    sha256 = "09z7rhivm1akj97b2vpb2lqsi5dhpkjzzwkli14m9phnwafjy25d";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."syntex_errors"."0.58.1"."libc"}" deps) (crates."rustc_serialize"."${deps."syntex_errors"."0.58.1"."rustc_serialize"}" deps) (crates."syntex_pos"."${deps."syntex_errors"."0.58.1"."syntex_pos"}" deps) (crates."term"."${deps."syntex_errors"."0.58.1"."term"}" deps) (crates."unicode_xid"."${deps."syntex_errors"."0.58.1"."unicode_xid"}" deps) ]);
  };
  features_.syntex_errors."0.58.1" = deps: f: updateFeatures f (rec {
    libc = { "${deps.syntex_errors."0.58.1".libc}".default = true; };
    rustc_serialize = { "${deps.syntex_errors."0.58.1".rustc_serialize}".default = true; };
    syntex_errors = { "0.58.1".default = (f.syntex_errors."0.58.1".default or true); };
    syntex_pos = { "${deps.syntex_errors."0.58.1".syntex_pos}".default = true; };
    term = { "${deps.syntex_errors."0.58.1".term}".default = true; };
    unicode_xid = { "${deps.syntex_errors."0.58.1".unicode_xid}".default = true; };
  }) [ (features_.libc."${deps."syntex_errors"."0.58.1"."libc"}" deps)
       (features_.rustc_serialize."${deps."syntex_errors"."0.58.1"."rustc_serialize"}" deps)
       (features_.syntex_pos."${deps."syntex_errors"."0.58.1"."syntex_pos"}" deps)
       (features_.term."${deps."syntex_errors"."0.58.1"."term"}" deps)
       (features_.unicode_xid."${deps."syntex_errors"."0.58.1"."unicode_xid"}" deps) ];


  crates.syntex_pos."0.58.1" = deps: { features?(features_.syntex_pos."0.58.1" deps {}) }: buildRustCrate {
    crateName = "syntex_pos";
    version = "0.58.1";
    authors = [ "erick.tryzelaar@gmail.com" ];
    sha256 = "1d8kkg1jzdjrqp1bcfvw2kq46pjkzvsrz0j9vj82yxdgch0vnkb3";
    dependencies = mapFeatures features ([ (crates."rustc_serialize"."${deps."syntex_pos"."0.58.1"."rustc_serialize"}" deps) ]);
  };
  features_.syntex_pos."0.58.1" = deps: f: updateFeatures f (rec {
    rustc_serialize = { "${deps.syntex_pos."0.58.1".rustc_serialize}".default = true; };
    syntex_pos = { "0.58.1".default = (f.syntex_pos."0.58.1".default or true); };
  }) [ (features_.rustc_serialize."${deps."syntex_pos"."0.58.1"."rustc_serialize"}" deps) ];


  crates.syntex_syntax."0.58.1" = deps: { features?(features_.syntex_syntax."0.58.1" deps {}) }: buildRustCrate {
    crateName = "syntex_syntax";
    version = "0.58.1";
    authors = [ "erick.tryzelaar@gmail.com" ];
    sha256 = "1iz4xql4jhncydcwsa5dh6jlcqrs51if8515cka5krannrb0iff1";
    dependencies = mapFeatures features ([ (crates."bitflags"."${deps."syntex_syntax"."0.58.1"."bitflags"}" deps) (crates."log"."${deps."syntex_syntax"."0.58.1"."log"}" deps) (crates."rustc_serialize"."${deps."syntex_syntax"."0.58.1"."rustc_serialize"}" deps) (crates."syntex_errors"."${deps."syntex_syntax"."0.58.1"."syntex_errors"}" deps) (crates."syntex_pos"."${deps."syntex_syntax"."0.58.1"."syntex_pos"}" deps) (crates."unicode_xid"."${deps."syntex_syntax"."0.58.1"."unicode_xid"}" deps) ]);
  };
  features_.syntex_syntax."0.58.1" = deps: f: updateFeatures f (rec {
    bitflags = { "${deps.syntex_syntax."0.58.1".bitflags}".default = true; };
    log = { "${deps.syntex_syntax."0.58.1".log}".default = true; };
    rustc_serialize = { "${deps.syntex_syntax."0.58.1".rustc_serialize}".default = true; };
    syntex_errors = { "${deps.syntex_syntax."0.58.1".syntex_errors}".default = true; };
    syntex_pos = { "${deps.syntex_syntax."0.58.1".syntex_pos}".default = true; };
    syntex_syntax = { "0.58.1".default = (f.syntex_syntax."0.58.1".default or true); };
    unicode_xid = { "${deps.syntex_syntax."0.58.1".unicode_xid}".default = true; };
  }) [ (features_.bitflags."${deps."syntex_syntax"."0.58.1"."bitflags"}" deps)
       (features_.log."${deps."syntex_syntax"."0.58.1"."log"}" deps)
       (features_.rustc_serialize."${deps."syntex_syntax"."0.58.1"."rustc_serialize"}" deps)
       (features_.syntex_errors."${deps."syntex_syntax"."0.58.1"."syntex_errors"}" deps)
       (features_.syntex_pos."${deps."syntex_syntax"."0.58.1"."syntex_pos"}" deps)
       (features_.unicode_xid."${deps."syntex_syntax"."0.58.1"."unicode_xid"}" deps) ];


  crates.tempdir."0.3.7" = deps: { features?(features_.tempdir."0.3.7" deps {}) }: buildRustCrate {
    crateName = "tempdir";
    version = "0.3.7";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0y53sxybyljrr7lh0x0ysrsa7p7cljmwv9v80acy3rc6n97g67vy";
    dependencies = mapFeatures features ([ (crates."rand"."${deps."tempdir"."0.3.7"."rand"}" deps) (crates."remove_dir_all"."${deps."tempdir"."0.3.7"."remove_dir_all"}" deps) ]);
  };
  features_.tempdir."0.3.7" = deps: f: updateFeatures f (rec {
    rand = { "${deps.tempdir."0.3.7".rand}".default = true; };
    remove_dir_all = { "${deps.tempdir."0.3.7".remove_dir_all}".default = true; };
    tempdir = { "0.3.7".default = (f.tempdir."0.3.7".default or true); };
  }) [ (features_.rand."${deps."tempdir"."0.3.7"."rand"}" deps)
       (features_.remove_dir_all."${deps."tempdir"."0.3.7"."remove_dir_all"}" deps) ];


  crates.term."0.4.6" = deps: { features?(features_.term."0.4.6" deps {}) }: buildRustCrate {
    crateName = "term";
    version = "0.4.6";
    authors = [ "The Rust Project Developers" "Steven Allen" ];
    sha256 = "14fll0l6247b4iyxnj52lpvxhd10yxbkmnpyxrn84iafzqmp56kv";
    dependencies = (if kernel == "windows" then mapFeatures features ([ (crates."kernel32_sys"."${deps."term"."0.4.6"."kernel32_sys"}" deps) (crates."winapi"."${deps."term"."0.4.6"."winapi"}" deps) ]) else []);
  };
  features_.term."0.4.6" = deps: f: updateFeatures f (rec {
    kernel32_sys = { "${deps.term."0.4.6".kernel32_sys}".default = true; };
    term = { "0.4.6".default = (f.term."0.4.6".default or true); };
    winapi = { "${deps.term."0.4.6".winapi}".default = true; };
  }) [ (features_.kernel32_sys."${deps."term"."0.4.6"."kernel32_sys"}" deps)
       (features_.winapi."${deps."term"."0.4.6"."winapi"}" deps) ];


  crates.termion."1.5.1" = deps: { features?(features_.termion."1.5.1" deps {}) }: buildRustCrate {
    crateName = "termion";
    version = "1.5.1";
    authors = [ "ticki <Ticki@users.noreply.github.com>" "gycos <alexandre.bury@gmail.com>" "IGI-111 <igi-111@protonmail.com>" ];
    sha256 = "02gq4vd8iws1f3gjrgrgpajsk2bk43nds5acbbb4s8dvrdvr8nf1";
    dependencies = (if !(kernel == "redox") then mapFeatures features ([ (crates."libc"."${deps."termion"."1.5.1"."libc"}" deps) ]) else [])
      ++ (if kernel == "redox" then mapFeatures features ([ (crates."redox_syscall"."${deps."termion"."1.5.1"."redox_syscall"}" deps) (crates."redox_termios"."${deps."termion"."1.5.1"."redox_termios"}" deps) ]) else []);
  };
  features_.termion."1.5.1" = deps: f: updateFeatures f (rec {
    libc = { "${deps.termion."1.5.1".libc}".default = true; };
    redox_syscall = { "${deps.termion."1.5.1".redox_syscall}".default = true; };
    redox_termios = { "${deps.termion."1.5.1".redox_termios}".default = true; };
    termion = { "1.5.1".default = (f.termion."1.5.1".default or true); };
  }) [ (features_.libc."${deps."termion"."1.5.1"."libc"}" deps)
       (features_.redox_syscall."${deps."termion"."1.5.1"."redox_syscall"}" deps)
       (features_.redox_termios."${deps."termion"."1.5.1"."redox_termios"}" deps) ];


  crates.textwrap."0.9.0" = deps: { features?(features_.textwrap."0.9.0" deps {}) }: buildRustCrate {
    crateName = "textwrap";
    version = "0.9.0";
    authors = [ "Martin Geisler <martin@geisler.net>" ];
    sha256 = "18jg79ndjlwndz01mlbh82kkr2arqm658yn5kwp65l5n1hz8w4yb";
    dependencies = mapFeatures features ([ (crates."unicode_width"."${deps."textwrap"."0.9.0"."unicode_width"}" deps) ]);
  };
  features_.textwrap."0.9.0" = deps: f: updateFeatures f (rec {
    textwrap = { "0.9.0".default = (f.textwrap."0.9.0".default or true); };
    unicode_width = { "${deps.textwrap."0.9.0".unicode_width}".default = true; };
  }) [ (features_.unicode_width."${deps."textwrap"."0.9.0"."unicode_width"}" deps) ];


  crates.thread_id."3.3.0" = deps: { features?(features_.thread_id."3.3.0" deps {}) }: buildRustCrate {
    crateName = "thread-id";
    version = "3.3.0";
    authors = [ "Ruud van Asseldonk <dev@veniogames.com>" ];
    sha256 = "1c24q4d2czza6b86sbw76z0f2vkbkkamivkmrhvs549v59za9gip";
    dependencies = (if kernel == "redox" then mapFeatures features ([ (crates."redox_syscall"."${deps."thread_id"."3.3.0"."redox_syscall"}" deps) ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ (crates."libc"."${deps."thread_id"."3.3.0"."libc"}" deps) ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ (crates."winapi"."${deps."thread_id"."3.3.0"."winapi"}" deps) ]) else []);
  };
  features_.thread_id."3.3.0" = deps: f: updateFeatures f (rec {
    libc = { "${deps.thread_id."3.3.0".libc}".default = true; };
    redox_syscall = { "${deps.thread_id."3.3.0".redox_syscall}".default = true; };
    thread_id = { "3.3.0".default = (f.thread_id."3.3.0".default or true); };
    winapi = fold recursiveUpdate {} [
      { "${deps.thread_id."3.3.0".winapi}"."processthreadsapi" = true; }
      { "${deps.thread_id."3.3.0".winapi}".default = true; }
    ];
  }) [ (features_.redox_syscall."${deps."thread_id"."3.3.0"."redox_syscall"}" deps)
       (features_.libc."${deps."thread_id"."3.3.0"."libc"}" deps)
       (features_.winapi."${deps."thread_id"."3.3.0"."winapi"}" deps) ];


  crates.thread_local."0.3.5" = deps: { features?(features_.thread_local."0.3.5" deps {}) }: buildRustCrate {
    crateName = "thread_local";
    version = "0.3.5";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "0mkp0sp91aqsk7brgygai4igv751r1754rsxn37mig3ag5rx8np6";
    dependencies = mapFeatures features ([ (crates."lazy_static"."${deps."thread_local"."0.3.5"."lazy_static"}" deps) (crates."unreachable"."${deps."thread_local"."0.3.5"."unreachable"}" deps) ]);
  };
  features_.thread_local."0.3.5" = deps: f: updateFeatures f (rec {
    lazy_static = { "${deps.thread_local."0.3.5".lazy_static}".default = true; };
    thread_local = { "0.3.5".default = (f.thread_local."0.3.5".default or true); };
    unreachable = { "${deps.thread_local."0.3.5".unreachable}".default = true; };
  }) [ (features_.lazy_static."${deps."thread_local"."0.3.5"."lazy_static"}" deps)
       (features_.unreachable."${deps."thread_local"."0.3.5"."unreachable"}" deps) ];


  crates.threadpool."1.7.1" = deps: { features?(features_.threadpool."1.7.1" deps {}) }: buildRustCrate {
    crateName = "threadpool";
    version = "1.7.1";
    authors = [ "The Rust Project Developers" "Corey Farwell <coreyf@rwell.org>" "Stefan Schindler <dns2utf8@estada.ch>" ];
    sha256 = "09g715plrn59kasvigqjrjqzcgqnaf6v6pia0xx03f18kvfmkq06";
    dependencies = mapFeatures features ([ (crates."num_cpus"."${deps."threadpool"."1.7.1"."num_cpus"}" deps) ]);
  };
  features_.threadpool."1.7.1" = deps: f: updateFeatures f (rec {
    num_cpus = { "${deps.threadpool."1.7.1".num_cpus}".default = true; };
    threadpool = { "1.7.1".default = (f.threadpool."1.7.1".default or true); };
  }) [ (features_.num_cpus."${deps."threadpool"."1.7.1"."num_cpus"}" deps) ];


  crates.time."0.1.40" = deps: { features?(features_.time."0.1.40" deps {}) }: buildRustCrate {
    crateName = "time";
    version = "0.1.40";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0wgnbjamljz6bqxsd5axc4p2mmhkqfrryj4gf2yswjaxiw5dd01m";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."time"."0.1.40"."libc"}" deps) ])
      ++ (if kernel == "redox" then mapFeatures features ([ (crates."redox_syscall"."${deps."time"."0.1.40"."redox_syscall"}" deps) ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ (crates."winapi"."${deps."time"."0.1.40"."winapi"}" deps) ]) else []);
  };
  features_.time."0.1.40" = deps: f: updateFeatures f (rec {
    libc = { "${deps.time."0.1.40".libc}".default = true; };
    redox_syscall = { "${deps.time."0.1.40".redox_syscall}".default = true; };
    time = { "0.1.40".default = (f.time."0.1.40".default or true); };
    winapi = fold recursiveUpdate {} [
      { "${deps.time."0.1.40".winapi}"."minwinbase" = true; }
      { "${deps.time."0.1.40".winapi}"."minwindef" = true; }
      { "${deps.time."0.1.40".winapi}"."ntdef" = true; }
      { "${deps.time."0.1.40".winapi}"."profileapi" = true; }
      { "${deps.time."0.1.40".winapi}"."std" = true; }
      { "${deps.time."0.1.40".winapi}"."sysinfoapi" = true; }
      { "${deps.time."0.1.40".winapi}"."timezoneapi" = true; }
      { "${deps.time."0.1.40".winapi}".default = true; }
    ];
  }) [ (features_.libc."${deps."time"."0.1.40"."libc"}" deps)
       (features_.redox_syscall."${deps."time"."0.1.40"."redox_syscall"}" deps)
       (features_.winapi."${deps."time"."0.1.40"."winapi"}" deps) ];


  crates.toml."0.4.6" = deps: { features?(features_.toml."0.4.6" deps {}) }: buildRustCrate {
    crateName = "toml";
    version = "0.4.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0rfl7lyb5f67spk69s604nw87f97g7fvv36hj9v88qlr2bwyrn8v";
    dependencies = mapFeatures features ([ (crates."serde"."${deps."toml"."0.4.6"."serde"}" deps) ]);
  };
  features_.toml."0.4.6" = deps: f: updateFeatures f (rec {
    serde = { "${deps.toml."0.4.6".serde}".default = true; };
    toml = { "0.4.6".default = (f.toml."0.4.6".default or true); };
  }) [ (features_.serde."${deps."toml"."0.4.6"."serde"}" deps) ];


  crates.traitobject."0.1.0" = deps: { features?(features_.traitobject."0.1.0" deps {}) }: buildRustCrate {
    crateName = "traitobject";
    version = "0.1.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "10hi8pl361l539g4kg74mcrhn7grmwlar4jl528ddn2z2jvb7lw3";
  };
  features_.traitobject."0.1.0" = deps: f: updateFeatures f (rec {
    traitobject = { "0.1.0".default = (f.traitobject."0.1.0".default or true); };
  }) [];


  crates.twox_hash."1.1.0" = deps: { features?(features_.twox_hash."1.1.0" deps {}) }: buildRustCrate {
    crateName = "twox-hash";
    version = "1.1.0";
    authors = [ "Jake Goulding <jake.goulding@gmail.com>" ];
    sha256 = "1lyvni9cjgbp3j6bk456h2gn7m2chclp1fr51cs3kx6f8hpn7l2z";
    dependencies = mapFeatures features ([ (crates."rand"."${deps."twox_hash"."1.1.0"."rand"}" deps) ]);
  };
  features_.twox_hash."1.1.0" = deps: f: updateFeatures f (rec {
    rand = { "${deps.twox_hash."1.1.0".rand}".default = true; };
    twox_hash = { "1.1.0".default = (f.twox_hash."1.1.0".default or true); };
  }) [ (features_.rand."${deps."twox_hash"."1.1.0"."rand"}" deps) ];


  crates.typeable."0.1.2" = deps: { features?(features_.typeable."0.1.2" deps {}) }: buildRustCrate {
    crateName = "typeable";
    version = "0.1.2";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "0lvff10hwyy852m6r11msyv1rpgpnapn284i8dk0p0q5saqvbvnx";
  };
  features_.typeable."0.1.2" = deps: f: updateFeatures f (rec {
    typeable = { "0.1.2".default = (f.typeable."0.1.2".default or true); };
  }) [];


  crates.typemap."0.3.3" = deps: { features?(features_.typemap."0.3.3" deps {}) }: buildRustCrate {
    crateName = "typemap";
    version = "0.3.3";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1whvpcq2slamy310z5hd3hl214v91sdxmd9avlqa1bn3l258svkx";
    dependencies = mapFeatures features ([ (crates."unsafe_any"."${deps."typemap"."0.3.3"."unsafe_any"}" deps) ]);
  };
  features_.typemap."0.3.3" = deps: f: updateFeatures f (rec {
    typemap = { "0.3.3".default = (f.typemap."0.3.3".default or true); };
    unsafe_any = { "${deps.typemap."0.3.3".unsafe_any}".default = true; };
  }) [ (features_.unsafe_any."${deps."typemap"."0.3.3"."unsafe_any"}" deps) ];


  crates.typenum."1.10.0" = deps: { features?(features_.typenum."1.10.0" deps {}) }: buildRustCrate {
    crateName = "typenum";
    version = "1.10.0";
    authors = [ "Paho Lurie-Gregg <paho@paholg.com>" "Andre Bogus <bogusandre@gmail.com>" ];
    sha256 = "1v2cgg0mlzkg5prs7swysckgk2ay6bpda8m83c2sn3z77dcsx3bc";
    build = "build/main.rs";
    features = mkFeatures (features.typenum."1.10.0" or {});
  };
  features_.typenum."1.10.0" = deps: f: updateFeatures f (rec {
    typenum = { "1.10.0".default = (f.typenum."1.10.0".default or true); };
  }) [];


  crates.ucd_util."0.1.1" = deps: { features?(features_.ucd_util."0.1.1" deps {}) }: buildRustCrate {
    crateName = "ucd-util";
    version = "0.1.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "02a8h3siipx52b832xc8m8rwasj6nx9jpiwfldw8hp6k205hgkn0";
  };
  features_.ucd_util."0.1.1" = deps: f: updateFeatures f (rec {
    ucd_util = { "0.1.1".default = (f.ucd_util."0.1.1".default or true); };
  }) [];


  crates.unicase."1.4.2" = deps: { features?(features_.unicase."1.4.2" deps {}) }: buildRustCrate {
    crateName = "unicase";
    version = "1.4.2";
    authors = [ "Sean McArthur <sean.monstar@gmail.com>" ];
    sha256 = "0rbnhw2mnhcwrij3vczp0sl8zdfmvf2dlh8hly81kj7132kfj0mf";
    build = "build.rs";
    dependencies = mapFeatures features ([]);

    buildDependencies = mapFeatures features ([ (crates."version_check"."${deps."unicase"."1.4.2"."version_check"}" deps) ]);
    features = mkFeatures (features.unicase."1.4.2" or {});
  };
  features_.unicase."1.4.2" = deps: f: updateFeatures f (rec {
    unicase = fold recursiveUpdate {} [
      { "1.4.2".default = (f.unicase."1.4.2".default or true); }
      { "1.4.2".heapsize =
        (f.unicase."1.4.2".heapsize or false) ||
        (f.unicase."1.4.2".heap_size or false) ||
        (unicase."1.4.2"."heap_size" or false); }
      { "1.4.2".heapsize_plugin =
        (f.unicase."1.4.2".heapsize_plugin or false) ||
        (f.unicase."1.4.2".heap_size or false) ||
        (unicase."1.4.2"."heap_size" or false); }
    ];
    version_check = { "${deps.unicase."1.4.2".version_check}".default = true; };
  }) [ (features_.version_check."${deps."unicase"."1.4.2"."version_check"}" deps) ];


  crates.unicase."2.1.0" = deps: { features?(features_.unicase."2.1.0" deps {}) }: buildRustCrate {
    crateName = "unicase";
    version = "2.1.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1zzn16hh8fdx5pnbbnl32q8m2mh4vpd1jm9pdcv969ik83dw4byp";
    build = "build.rs";

    buildDependencies = mapFeatures features ([ (crates."version_check"."${deps."unicase"."2.1.0"."version_check"}" deps) ]);
    features = mkFeatures (features.unicase."2.1.0" or {});
  };
  features_.unicase."2.1.0" = deps: f: updateFeatures f (rec {
    unicase = { "2.1.0".default = (f.unicase."2.1.0".default or true); };
    version_check = { "${deps.unicase."2.1.0".version_check}".default = true; };
  }) [ (features_.version_check."${deps."unicase"."2.1.0"."version_check"}" deps) ];


  crates.unicode_bidi."0.3.4" = deps: { features?(features_.unicode_bidi."0.3.4" deps {}) }: buildRustCrate {
    crateName = "unicode-bidi";
    version = "0.3.4";
    authors = [ "The Servo Project Developers" ];
    sha256 = "0lcd6jasrf8p9p0q20qyf10c6xhvw40m2c4rr105hbk6zy26nj1q";
    libName = "unicode_bidi";
    dependencies = mapFeatures features ([ (crates."matches"."${deps."unicode_bidi"."0.3.4"."matches"}" deps) ]);
    features = mkFeatures (features.unicode_bidi."0.3.4" or {});
  };
  features_.unicode_bidi."0.3.4" = deps: f: updateFeatures f (rec {
    matches = { "${deps.unicode_bidi."0.3.4".matches}".default = true; };
    unicode_bidi = fold recursiveUpdate {} [
      { "0.3.4".default = (f.unicode_bidi."0.3.4".default or true); }
      { "0.3.4".flame =
        (f.unicode_bidi."0.3.4".flame or false) ||
        (f.unicode_bidi."0.3.4".flame_it or false) ||
        (unicode_bidi."0.3.4"."flame_it" or false); }
      { "0.3.4".flamer =
        (f.unicode_bidi."0.3.4".flamer or false) ||
        (f.unicode_bidi."0.3.4".flame_it or false) ||
        (unicode_bidi."0.3.4"."flame_it" or false); }
      { "0.3.4".serde =
        (f.unicode_bidi."0.3.4".serde or false) ||
        (f.unicode_bidi."0.3.4".with_serde or false) ||
        (unicode_bidi."0.3.4"."with_serde" or false); }
    ];
  }) [ (features_.matches."${deps."unicode_bidi"."0.3.4"."matches"}" deps) ];


  crates.unicode_normalization."0.1.7" = deps: { features?(features_.unicode_normalization."0.1.7" deps {}) }: buildRustCrate {
    crateName = "unicode-normalization";
    version = "0.1.7";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "1da2hv800pd0wilmn4idwpgv5p510hjxizjcfv6xzb40xcsjd8gs";
  };
  features_.unicode_normalization."0.1.7" = deps: f: updateFeatures f (rec {
    unicode_normalization = { "0.1.7".default = (f.unicode_normalization."0.1.7".default or true); };
  }) [];


  crates.unicode_width."0.1.5" = deps: { features?(features_.unicode_width."0.1.5" deps {}) }: buildRustCrate {
    crateName = "unicode-width";
    version = "0.1.5";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "0886lc2aymwgy0lhavwn6s48ik3c61ykzzd3za6prgnw51j7bi4w";
    features = mkFeatures (features.unicode_width."0.1.5" or {});
  };
  features_.unicode_width."0.1.5" = deps: f: updateFeatures f (rec {
    unicode_width = { "0.1.5".default = (f.unicode_width."0.1.5".default or true); };
  }) [];


  crates.unicode_xid."0.0.4" = deps: { features?(features_.unicode_xid."0.0.4" deps {}) }: buildRustCrate {
    crateName = "unicode-xid";
    version = "0.0.4";
    authors = [ "erick.tryzelaar <erick.tryzelaar@gmail.com>" "kwantam <kwantam@gmail.com>" ];
    sha256 = "1dc8wkkcd3s6534s5aw4lbjn8m67flkkbnajp5bl8408wdg8rh9v";
    features = mkFeatures (features.unicode_xid."0.0.4" or {});
  };
  features_.unicode_xid."0.0.4" = deps: f: updateFeatures f (rec {
    unicode_xid = { "0.0.4".default = (f.unicode_xid."0.0.4".default or true); };
  }) [];


  crates.unicode_xid."0.1.0" = deps: { features?(features_.unicode_xid."0.1.0" deps {}) }: buildRustCrate {
    crateName = "unicode-xid";
    version = "0.1.0";
    authors = [ "erick.tryzelaar <erick.tryzelaar@gmail.com>" "kwantam <kwantam@gmail.com>" ];
    sha256 = "05wdmwlfzxhq3nhsxn6wx4q8dhxzzfb9szsz6wiw092m1rjj01zj";
    features = mkFeatures (features.unicode_xid."0.1.0" or {});
  };
  features_.unicode_xid."0.1.0" = deps: f: updateFeatures f (rec {
    unicode_xid = { "0.1.0".default = (f.unicode_xid."0.1.0".default or true); };
  }) [];


  crates.unreachable."1.0.0" = deps: { features?(features_.unreachable."1.0.0" deps {}) }: buildRustCrate {
    crateName = "unreachable";
    version = "1.0.0";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1am8czbk5wwr25gbp2zr007744fxjshhdqjz9liz7wl4pnv3whcf";
    dependencies = mapFeatures features ([ (crates."void"."${deps."unreachable"."1.0.0"."void"}" deps) ]);
  };
  features_.unreachable."1.0.0" = deps: f: updateFeatures f (rec {
    unreachable = { "1.0.0".default = (f.unreachable."1.0.0".default or true); };
    void = { "${deps.unreachable."1.0.0".void}".default = (f.void."${deps.unreachable."1.0.0".void}".default or false); };
  }) [ (features_.void."${deps."unreachable"."1.0.0"."void"}" deps) ];


  crates.unsafe_any."0.4.2" = deps: { features?(features_.unsafe_any."0.4.2" deps {}) }: buildRustCrate {
    crateName = "unsafe-any";
    version = "0.4.2";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "1zcvx5s71fbx4l691bg770g9yx947b8mmp4yf0mczcric07sh44s";
    dependencies = mapFeatures features ([ (crates."traitobject"."${deps."unsafe_any"."0.4.2"."traitobject"}" deps) ]);
  };
  features_.unsafe_any."0.4.2" = deps: f: updateFeatures f (rec {
    traitobject = { "${deps.unsafe_any."0.4.2".traitobject}".default = true; };
    unsafe_any = { "0.4.2".default = (f.unsafe_any."0.4.2".default or true); };
  }) [ (features_.traitobject."${deps."unsafe_any"."0.4.2"."traitobject"}" deps) ];


  crates.url."1.7.0" = deps: { features?(features_.url."1.7.0" deps {}) }: buildRustCrate {
    crateName = "url";
    version = "1.7.0";
    authors = [ "The rust-url developers" ];
    sha256 = "0333ynhkp47hna88aamz1zpk4lxyzx4ab9n7yhc75g14w27cv8jj";
    dependencies = mapFeatures features ([ (crates."idna"."${deps."url"."1.7.0"."idna"}" deps) (crates."matches"."${deps."url"."1.7.0"."matches"}" deps) (crates."percent_encoding"."${deps."url"."1.7.0"."percent_encoding"}" deps) ]);
    features = mkFeatures (features.url."1.7.0" or {});
  };
  features_.url."1.7.0" = deps: f: updateFeatures f (rec {
    idna = { "${deps.url."1.7.0".idna}".default = true; };
    matches = { "${deps.url."1.7.0".matches}".default = true; };
    percent_encoding = { "${deps.url."1.7.0".percent_encoding}".default = true; };
    url = fold recursiveUpdate {} [
      { "1.7.0".default = (f.url."1.7.0".default or true); }
      { "1.7.0".encoding =
        (f.url."1.7.0".encoding or false) ||
        (f.url."1.7.0".query_encoding or false) ||
        (url."1.7.0"."query_encoding" or false); }
      { "1.7.0".heapsize =
        (f.url."1.7.0".heapsize or false) ||
        (f.url."1.7.0".heap_size or false) ||
        (url."1.7.0"."heap_size" or false); }
    ];
  }) [ (features_.idna."${deps."url"."1.7.0"."idna"}" deps)
       (features_.matches."${deps."url"."1.7.0"."matches"}" deps)
       (features_.percent_encoding."${deps."url"."1.7.0"."percent_encoding"}" deps) ];


  crates.utf8_ranges."1.0.0" = deps: { features?(features_.utf8_ranges."1.0.0" deps {}) }: buildRustCrate {
    crateName = "utf8-ranges";
    version = "1.0.0";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0rzmqprwjv9yp1n0qqgahgm24872x6c0xddfym5pfndy7a36vkn0";
  };
  features_.utf8_ranges."1.0.0" = deps: f: updateFeatures f (rec {
    utf8_ranges = { "1.0.0".default = (f.utf8_ranges."1.0.0".default or true); };
  }) [];


  crates.uuid."0.6.5" = deps: { features?(features_.uuid."0.6.5" deps {}) }: buildRustCrate {
    crateName = "uuid";
    version = "0.6.5";
    authors = [ "Ashley Mannix<ashleymannix@live.com.au>" "Christopher Armstrong" "Dylan DPC<dylan.dpc@gmail.com>" "Hunar Roop Kahlon<hunar.roop@gmail.com>" ];
    sha256 = "1jy15m4yxxwma0jsy070garhbgfprky23i77rawjkk75vqhnnhlf";
    dependencies = mapFeatures features ([ (crates."cfg_if"."${deps."uuid"."0.6.5"."cfg_if"}" deps) ]
      ++ (if features.uuid."0.6.5".rand or false then [ (crates.rand."0.4.2" deps) ] else [])
      ++ (if features.uuid."0.6.5".sha1 or false then [ (crates.sha1."0.6.0" deps) ] else []));
    features = mkFeatures (features.uuid."0.6.5" or {});
  };
  features_.uuid."0.6.5" = deps: f: updateFeatures f (rec {
    cfg_if = { "${deps.uuid."0.6.5".cfg_if}".default = true; };
    rand = { "${deps.uuid."0.6.5".rand}".default = true; };
    sha1 = { "${deps.uuid."0.6.5".sha1}".default = true; };
    uuid = fold recursiveUpdate {} [
      { "0.6.5".byteorder =
        (f.uuid."0.6.5".byteorder or false) ||
        (f.uuid."0.6.5".u128 or false) ||
        (uuid."0.6.5"."u128" or false); }
      { "0.6.5".default = (f.uuid."0.6.5".default or true); }
      { "0.6.5".md5 =
        (f.uuid."0.6.5".md5 or false) ||
        (f.uuid."0.6.5".v3 or false) ||
        (uuid."0.6.5"."v3" or false); }
      { "0.6.5".nightly =
        (f.uuid."0.6.5".nightly or false) ||
        (f.uuid."0.6.5".const_fn or false) ||
        (uuid."0.6.5"."const_fn" or false); }
      { "0.6.5".rand =
        (f.uuid."0.6.5".rand or false) ||
        (f.uuid."0.6.5".v3 or false) ||
        (uuid."0.6.5"."v3" or false) ||
        (f.uuid."0.6.5".v4 or false) ||
        (uuid."0.6.5"."v4" or false) ||
        (f.uuid."0.6.5".v5 or false) ||
        (uuid."0.6.5"."v5" or false); }
      { "0.6.5".sha1 =
        (f.uuid."0.6.5".sha1 or false) ||
        (f.uuid."0.6.5".v5 or false) ||
        (uuid."0.6.5"."v5" or false); }
      { "0.6.5".std =
        (f.uuid."0.6.5".std or false) ||
        (f.uuid."0.6.5".default or false) ||
        (uuid."0.6.5"."default" or false) ||
        (f.uuid."0.6.5".use_std or false) ||
        (uuid."0.6.5"."use_std" or false); }
    ];
  }) [ (features_.cfg_if."${deps."uuid"."0.6.5"."cfg_if"}" deps)
       (features_.rand."${deps."uuid"."0.6.5"."rand"}" deps)
       (features_.sha1."${deps."uuid"."0.6.5"."sha1"}" deps) ];


  crates.vcpkg."0.2.3" = deps: { features?(features_.vcpkg."0.2.3" deps {}) }: buildRustCrate {
    crateName = "vcpkg";
    version = "0.2.3";
    authors = [ "Jim McGrath <jimmc2@gmail.com>" ];
    sha256 = "0achi8sfy0wm4q04gj7nwpq9xfx8ynk6vv4r12a3ijg26hispq0c";
  };
  features_.vcpkg."0.2.3" = deps: f: updateFeatures f (rec {
    vcpkg = { "0.2.3".default = (f.vcpkg."0.2.3".default or true); };
  }) [];


  crates.vec_map."0.8.1" = deps: { features?(features_.vec_map."0.8.1" deps {}) }: buildRustCrate {
    crateName = "vec_map";
    version = "0.8.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Jorge Aparicio <japaricious@gmail.com>" "Alexis Beingessner <a.beingessner@gmail.com>" "Brian Anderson <>" "tbu- <>" "Manish Goregaokar <>" "Aaron Turon <aturon@mozilla.com>" "Adolfo Ochagavía <>" "Niko Matsakis <>" "Steven Fackler <>" "Chase Southwood <csouth3@illinois.edu>" "Eduard Burtescu <>" "Florian Wilkens <>" "Félix Raimundo <>" "Tibor Benke <>" "Markus Siemens <markus@m-siemens.de>" "Josh Branchaud <jbranchaud@gmail.com>" "Huon Wilson <dbau.pp@gmail.com>" "Corey Farwell <coref@rwell.org>" "Aaron Liblong <>" "Nick Cameron <nrc@ncameron.org>" "Patrick Walton <pcwalton@mimiga.net>" "Felix S Klock II <>" "Andrew Paseltiner <apaseltiner@gmail.com>" "Sean McArthur <sean.monstar@gmail.com>" "Vadim Petrochenkov <>" ];
    sha256 = "1jj2nrg8h3l53d43rwkpkikq5a5x15ms4rf1rw92hp5lrqhi8mpi";
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.vec_map."0.8.1" or {});
  };
  features_.vec_map."0.8.1" = deps: f: updateFeatures f (rec {
    vec_map = fold recursiveUpdate {} [
      { "0.8.1".default = (f.vec_map."0.8.1".default or true); }
      { "0.8.1".serde =
        (f.vec_map."0.8.1".serde or false) ||
        (f.vec_map."0.8.1".eders or false) ||
        (vec_map."0.8.1"."eders" or false); }
    ];
  }) [];


  crates.version_check."0.1.3" = deps: { features?(features_.version_check."0.1.3" deps {}) }: buildRustCrate {
    crateName = "version_check";
    version = "0.1.3";
    authors = [ "Sergio Benitez <sb@sergio.bz>" ];
    sha256 = "0z635wdclv9bvafj11fpgndn7y79ibpsnc364pm61i1m4wwg8msg";
  };
  features_.version_check."0.1.3" = deps: f: updateFeatures f (rec {
    version_check = { "0.1.3".default = (f.version_check."0.1.3".default or true); };
  }) [];


  crates.void."1.0.2" = deps: { features?(features_.void."1.0.2" deps {}) }: buildRustCrate {
    crateName = "void";
    version = "1.0.2";
    authors = [ "Jonathan Reem <jonathan.reem@gmail.com>" ];
    sha256 = "0h1dm0dx8dhf56a83k68mijyxigqhizpskwxfdrs1drwv2cdclv3";
    features = mkFeatures (features.void."1.0.2" or {});
  };
  features_.void."1.0.2" = deps: f: updateFeatures f (rec {
    void = fold recursiveUpdate {} [
      { "1.0.2".default = (f.void."1.0.2".default or true); }
      { "1.0.2".std =
        (f.void."1.0.2".std or false) ||
        (f.void."1.0.2".default or false) ||
        (void."1.0.2"."default" or false); }
    ];
  }) [];


  crates.wait_timeout."0.1.5" = deps: { features?(features_.wait_timeout."0.1.5" deps {}) }: buildRustCrate {
    crateName = "wait-timeout";
    version = "0.1.5";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "16vy805q2fg7phpfnmasp53jwjx14snxrdzks6iic56ml7dic14l";
    dependencies = mapFeatures features ([ (crates."libc"."${deps."wait_timeout"."0.1.5"."libc"}" deps) ]);
  };
  features_.wait_timeout."0.1.5" = deps: f: updateFeatures f (rec {
    libc = { "${deps.wait_timeout."0.1.5".libc}".default = true; };
    wait_timeout = { "0.1.5".default = (f.wait_timeout."0.1.5".default or true); };
  }) [ (features_.libc."${deps."wait_timeout"."0.1.5"."libc"}" deps) ];


  crates.winapi."0.2.8" = deps: { features?(features_.winapi."0.2.8" deps {}) }: buildRustCrate {
    crateName = "winapi";
    version = "0.2.8";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
  };
  features_.winapi."0.2.8" = deps: f: updateFeatures f (rec {
    winapi = { "0.2.8".default = (f.winapi."0.2.8".default or true); };
  }) [];


  crates.winapi."0.3.5" = deps: { features?(features_.winapi."0.3.5" deps {}) }: buildRustCrate {
    crateName = "winapi";
    version = "0.3.5";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0cfdsxa5yf832r5i2z7dhdvnryyvhfp3nb32gpcaq502zgjdm3w6";
    build = "build.rs";
    dependencies = (if kernel == "i686-pc-windows-gnu" then mapFeatures features ([ (crates."winapi_i686_pc_windows_gnu"."${deps."winapi"."0.3.5"."winapi_i686_pc_windows_gnu"}" deps) ]) else [])
      ++ (if kernel == "x86_64-pc-windows-gnu" then mapFeatures features ([ (crates."winapi_x86_64_pc_windows_gnu"."${deps."winapi"."0.3.5"."winapi_x86_64_pc_windows_gnu"}" deps) ]) else []);
    features = mkFeatures (features.winapi."0.3.5" or {});
  };
  features_.winapi."0.3.5" = deps: f: updateFeatures f (rec {
    winapi = { "0.3.5".default = (f.winapi."0.3.5".default or true); };
    winapi_i686_pc_windows_gnu = { "${deps.winapi."0.3.5".winapi_i686_pc_windows_gnu}".default = true; };
    winapi_x86_64_pc_windows_gnu = { "${deps.winapi."0.3.5".winapi_x86_64_pc_windows_gnu}".default = true; };
  }) [ (features_.winapi_i686_pc_windows_gnu."${deps."winapi"."0.3.5"."winapi_i686_pc_windows_gnu"}" deps)
       (features_.winapi_x86_64_pc_windows_gnu."${deps."winapi"."0.3.5"."winapi_x86_64_pc_windows_gnu"}" deps) ];


  crates.winapi_build."0.1.1" = deps: { features?(features_.winapi_build."0.1.1" deps {}) }: buildRustCrate {
    crateName = "winapi-build";
    version = "0.1.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
    libName = "build";
  };
  features_.winapi_build."0.1.1" = deps: f: updateFeatures f (rec {
    winapi_build = { "0.1.1".default = (f.winapi_build."0.1.1".default or true); };
  }) [];


  crates.winapi_i686_pc_windows_gnu."0.4.0" = deps: { features?(features_.winapi_i686_pc_windows_gnu."0.4.0" deps {}) }: buildRustCrate {
    crateName = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
    build = "build.rs";
  };
  features_.winapi_i686_pc_windows_gnu."0.4.0" = deps: f: updateFeatures f (rec {
    winapi_i686_pc_windows_gnu = { "0.4.0".default = (f.winapi_i686_pc_windows_gnu."0.4.0".default or true); };
  }) [];


  crates.winapi_x86_64_pc_windows_gnu."0.4.0" = deps: { features?(features_.winapi_x86_64_pc_windows_gnu."0.4.0" deps {}) }: buildRustCrate {
    crateName = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
    build = "build.rs";
  };
  features_.winapi_x86_64_pc_windows_gnu."0.4.0" = deps: f: updateFeatures f (rec {
    winapi_x86_64_pc_windows_gnu = { "0.4.0".default = (f.winapi_x86_64_pc_windows_gnu."0.4.0".default or true); };
  }) [];


  crates.xdg."2.1.0" = deps: { features?(features_.xdg."2.1.0" deps {}) }: buildRustCrate {
    crateName = "xdg";
    version = "2.1.0";
    authors = [ "Ben Longbons <b.r.longbons@gmail.com>" "whitequark <whitequark@whitequark.org>" ];
    sha256 = "1n7w46z4qah7m5dajy1h9pcwcj8r96cbi1xi5yq8cp0p3d765kkn";
  };
  features_.xdg."2.1.0" = deps: f: updateFeatures f (rec {
    xdg = { "2.1.0".default = (f.xdg."2.1.0".default or true); };
  }) [];


  crates.zip."0.2.8" = deps: { features?(features_.zip."0.2.8" deps {}) }: buildRustCrate {
    crateName = "zip";
    version = "0.2.8";
    authors = [ "Mathijs van de Nes <git@mathijs.vd-nes.nl>" ];
    sha256 = "14pjn2235frjqrjkz5bcj11mqmdwwbkcnz6g0vj9jqaiba4l7901";
    dependencies = mapFeatures features ([ (crates."flate2"."${deps."zip"."0.2.8"."flate2"}" deps) (crates."msdos_time"."${deps."zip"."0.2.8"."msdos_time"}" deps) (crates."podio"."${deps."zip"."0.2.8"."podio"}" deps) (crates."time"."${deps."zip"."0.2.8"."time"}" deps) ]);
  };
  features_.zip."0.2.8" = deps: f: updateFeatures f (rec {
    flate2 = fold recursiveUpdate {} [
      { "${deps.zip."0.2.8".flate2}"."rust_backend" = true; }
      { "${deps.zip."0.2.8".flate2}".default = (f.flate2."${deps.zip."0.2.8".flate2}".default or false); }
    ];
    msdos_time = { "${deps.zip."0.2.8".msdos_time}".default = true; };
    podio = { "${deps.zip."0.2.8".podio}".default = true; };
    time = { "${deps.zip."0.2.8".time}".default = true; };
    zip = fold recursiveUpdate {} [
      { "0.2.8".bzip2 =
        (f.zip."0.2.8".bzip2 or false) ||
        (f.zip."0.2.8".default or false) ||
        (zip."0.2.8"."default" or false); }
      { "0.2.8".default = (f.zip."0.2.8".default or true); }
    ];
  }) [ (features_.flate2."${deps."zip"."0.2.8"."flate2"}" deps)
       (features_.msdos_time."${deps."zip"."0.2.8"."msdos_time"}" deps)
       (features_.podio."${deps."zip"."0.2.8"."podio"}" deps)
       (features_.time."${deps."zip"."0.2.8"."time"}" deps) ];


    };

crates = cratesIO // rec {
  crates.bincode."0.9.3" = deps: { features?(features_.bincode."0.9.3" deps {}) }: buildRustCrate {
    crateName = "bincode";
    version = "0.9.3";
    authors = [ "Ty Overby <ty@pre-alpha.com>" "Francesco Mazzoli <f@mazzo.li>" "David Tolnay <dtolnay@gmail.com>" "Daniel Griffen" ];
    src = fetchgit {
       url = "https://github.com/TyOverby/bincode";
       rev = "0bc254459489761e2a933a3bba26cba32d515794";
       sha256 = "1lrzrr2bykbfld4w071jfhjf538ji0964dx9yz1wzdfgwp5bm0li";
    };
    dependencies = mapFeatures features ([ (cratesIO.crates."byteorder"."${deps."bincode"."0.9.3"."byteorder"}" deps) (cratesIO.crates."serde"."${deps."bincode"."0.9.3"."serde"}" deps) ]);
  };
  features_.bincode."0.9.3" = deps: f: updateFeatures f (rec {
    bincode = { "0.9.3".default = (f.bincode."0.9.3".default or true); };
    byteorder = { "${deps.bincode."0.9.3".byteorder}".default = true; };
    serde = { "${deps.bincode."0.9.3".serde}".default = true; };
  }) [ (cratesIO.features_.byteorder."${deps."bincode"."0.9.3"."byteorder"}" deps)
       (cratesIO.features_.serde."${deps."bincode"."0.9.3"."serde"}" deps) ];


  crates.c_components_tests."0.1.0" = deps: { features?(features_.c_components_tests."0.1.0" deps {}) }: buildRustCrate {
    crateName = "c_components_tests";
    version = "0.1.0";
    authors = [ "Nathanael Jones <nathanael.jones@gmail.com>" "Kornel Lesiński <kornel@geekhood.net>" ];
    src = ./.;
    workspace_member = "c_components/tests";
    crateBin = [ {  name = "profile_imageflow";  path = "src/profile.rs"; } ];
    build = "src/build.rs";
    dependencies = mapFeatures features ([ (crates."imageflow_c_components"."${deps."c_components_tests"."0.1.0"."imageflow_c_components"}" deps) (cratesIO.crates."lcms2_sys"."${deps."c_components_tests"."0.1.0"."lcms2_sys"}" deps) (cratesIO.crates."libpng_sys"."${deps."c_components_tests"."0.1.0"."libpng_sys"}" deps) (cratesIO.crates."libz_sys"."${deps."c_components_tests"."0.1.0"."libz_sys"}" deps) (cratesIO.crates."mozjpeg_sys"."${deps."c_components_tests"."0.1.0"."mozjpeg_sys"}" deps) ]);

    buildDependencies = mapFeatures features ([ (cratesIO.crates."cc"."${deps."c_components_tests"."0.1.0"."cc"}" deps) (cratesIO.crates."glob"."${deps."c_components_tests"."0.1.0"."glob"}" deps) ]);
  };
  features_.c_components_tests."0.1.0" = deps: f: updateFeatures f (rec {
    c_components_tests = { "0.1.0".default = (f.c_components_tests."0.1.0".default or true); };
    cc = fold recursiveUpdate {} [
      { "${deps.c_components_tests."0.1.0".cc}"."parallel" = true; }
      { "${deps.c_components_tests."0.1.0".cc}".default = true; }
    ];
    glob = { "${deps.c_components_tests."0.1.0".glob}".default = true; };
    imageflow_c_components = { "${deps.c_components_tests."0.1.0".imageflow_c_components}".default = true; };
    lcms2_sys = { "${deps.c_components_tests."0.1.0".lcms2_sys}".default = true; };
    libpng_sys = { "${deps.c_components_tests."0.1.0".libpng_sys}".default = true; };
    libz_sys = { "${deps.c_components_tests."0.1.0".libz_sys}".default = true; };
    mozjpeg_sys = { "${deps.c_components_tests."0.1.0".mozjpeg_sys}".default = true; };
  }) [ (features_.imageflow_c_components."${deps."c_components_tests"."0.1.0"."imageflow_c_components"}" deps)
       (cratesIO.features_.lcms2_sys."${deps."c_components_tests"."0.1.0"."lcms2_sys"}" deps)
       (cratesIO.features_.libpng_sys."${deps."c_components_tests"."0.1.0"."libpng_sys"}" deps)
       (cratesIO.features_.libz_sys."${deps."c_components_tests"."0.1.0"."libz_sys"}" deps)
       (cratesIO.features_.mozjpeg_sys."${deps."c_components_tests"."0.1.0"."mozjpeg_sys"}" deps)
       (cratesIO.features_.cc."${deps."c_components_tests"."0.1.0"."cc"}" deps)
       (cratesIO.features_.glob."${deps."c_components_tests"."0.1.0"."glob"}" deps) ];


  crates.enum_derive."0.1.7" = deps: { features?(features_.enum_derive."0.1.7" deps {}) }: buildRustCrate {
    crateName = "enum_derive";
    version = "0.1.7";
    authors = [ "Daniel Keep <daniel.keep@gmail.com>" ];
    src = fetchgit {
       url = "https://github.com/DanielKeep/rust-custom-derive.git";
       rev = "1252f258cdb9b7c9867f937c52c2f5c0e69a9c03";
       sha256 = "1yr3fdc6x6078qlgv00llyb2a5jmhmdg56yp5fnzrd4ds5yh10ks";
    };
    features = mkFeatures (features.enum_derive."0.1.7" or {});
  };
  features_.enum_derive."0.1.7" = deps: f: updateFeatures f (rec {
    enum_derive = fold recursiveUpdate {} [
      { "0.1.7".default = (f.enum_derive."0.1.7".default or true); }
      { "0.1.7".std =
        (f.enum_derive."0.1.7".std or false) ||
        (f.enum_derive."0.1.7".default or false) ||
        (enum_derive."0.1.7"."default" or false); }
    ];
  }) [];


  crates.imageflow_abi."0.1.0" = deps: { features?(features_.imageflow_abi."0.1.0" deps {}) }: buildRustCrate {
    crateName = "imageflow_abi";
    version = "0.1.0";
    authors = [ "Nathanael Jones <nathanael.jones@gmail.com>" ];
    src = ./.;
    workspace_member = "imageflow_abi";
    libName = "imageflow";
    type = ["cdylib"];
    build = "build.rs";
    dependencies = mapFeatures features ([ (cratesIO.crates."backtrace"."${deps."imageflow_abi"."0.1.0"."backtrace"}" deps) (cratesIO.crates."base64"."${deps."imageflow_abi"."0.1.0"."base64"}" deps) (crates."imageflow_core"."${deps."imageflow_abi"."0.1.0"."imageflow_core"}" deps) (cratesIO.crates."libc"."${deps."imageflow_abi"."0.1.0"."libc"}" deps) (cratesIO.crates."smallvec"."${deps."imageflow_abi"."0.1.0"."smallvec"}" deps) ]);

    buildDependencies = mapFeatures features ([ (crates."imageflow_helpers"."${deps."imageflow_abi"."0.1.0"."imageflow_helpers"}" deps) (cratesIO.crates."moz_cheddar"."${deps."imageflow_abi"."0.1.0"."moz_cheddar"}" deps) (cratesIO.crates."regex"."${deps."imageflow_abi"."0.1.0"."regex"}" deps) ]);
  };
  features_.imageflow_abi."0.1.0" = deps: f: updateFeatures f (rec {
    backtrace = { "${deps.imageflow_abi."0.1.0".backtrace}".default = true; };
    base64 = { "${deps.imageflow_abi."0.1.0".base64}".default = true; };
    imageflow_abi = { "0.1.0".default = (f.imageflow_abi."0.1.0".default or true); };
    imageflow_core = { "${deps.imageflow_abi."0.1.0".imageflow_core}".default = true; };
    imageflow_helpers = { "${deps.imageflow_abi."0.1.0".imageflow_helpers}".default = true; };
    libc = { "${deps.imageflow_abi."0.1.0".libc}".default = true; };
    moz_cheddar = { "${deps.imageflow_abi."0.1.0".moz_cheddar}".default = true; };
    regex = { "${deps.imageflow_abi."0.1.0".regex}".default = true; };
    smallvec = { "${deps.imageflow_abi."0.1.0".smallvec}".default = true; };
  }) [ (cratesIO.features_.backtrace."${deps."imageflow_abi"."0.1.0"."backtrace"}" deps)
       (cratesIO.features_.base64."${deps."imageflow_abi"."0.1.0"."base64"}" deps)
       (features_.imageflow_core."${deps."imageflow_abi"."0.1.0"."imageflow_core"}" deps)
       (cratesIO.features_.libc."${deps."imageflow_abi"."0.1.0"."libc"}" deps)
       (cratesIO.features_.smallvec."${deps."imageflow_abi"."0.1.0"."smallvec"}" deps)
       (features_.imageflow_helpers."${deps."imageflow_abi"."0.1.0"."imageflow_helpers"}" deps)
       (cratesIO.features_.moz_cheddar."${deps."imageflow_abi"."0.1.0"."moz_cheddar"}" deps)
       (cratesIO.features_.regex."${deps."imageflow_abi"."0.1.0"."regex"}" deps) ];


  crates.imageflow_c_components."0.1.0" = deps: { features?(features_.imageflow_c_components."0.1.0" deps {}) }: buildRustCrate {
    crateName = "imageflow_c_components";
    version = "0.1.0";
    authors = [ "Nathanael Jones <nathanael.jones@gmail.com>" "Kornel Lesiński <kornel@geekhood.net>" ];
    src = ./.;
    workspace_member = "c_components";
    build = "build.rs";
    dependencies = mapFeatures features ([ (cratesIO.crates."lcms2_sys"."${deps."imageflow_c_components"."0.1.0"."lcms2_sys"}" deps) (cratesIO.crates."libpng_sys"."${deps."imageflow_c_components"."0.1.0"."libpng_sys"}" deps) (cratesIO.crates."libz_sys"."${deps."imageflow_c_components"."0.1.0"."libz_sys"}" deps) (cratesIO.crates."mozjpeg_sys"."${deps."imageflow_c_components"."0.1.0"."mozjpeg_sys"}" deps) ]);

    buildDependencies = mapFeatures features ([ (cratesIO.crates."cc"."${deps."imageflow_c_components"."0.1.0"."cc"}" deps) (cratesIO.crates."glob"."${deps."imageflow_c_components"."0.1.0"."glob"}" deps) ]);
    features = mkFeatures (features.imageflow_c_components."0.1.0" or {});
  };
  features_.imageflow_c_components."0.1.0" = deps: f: updateFeatures f (rec {
    cc = fold recursiveUpdate {} [
      { "${deps.imageflow_c_components."0.1.0".cc}"."parallel" = true; }
      { "${deps.imageflow_c_components."0.1.0".cc}".default = true; }
    ];
    glob = { "${deps.imageflow_c_components."0.1.0".glob}".default = true; };
    imageflow_c_components = { "0.1.0".default = (f.imageflow_c_components."0.1.0".default or true); };
    lcms2_sys = { "${deps.imageflow_c_components."0.1.0".lcms2_sys}".default = true; };
    libpng_sys = { "${deps.imageflow_c_components."0.1.0".libpng_sys}".default = true; };
    libz_sys = { "${deps.imageflow_c_components."0.1.0".libz_sys}".default = true; };
    mozjpeg_sys = { "${deps.imageflow_c_components."0.1.0".mozjpeg_sys}".default = true; };
  }) [ (cratesIO.features_.lcms2_sys."${deps."imageflow_c_components"."0.1.0"."lcms2_sys"}" deps)
       (cratesIO.features_.libpng_sys."${deps."imageflow_c_components"."0.1.0"."libpng_sys"}" deps)
       (cratesIO.features_.libz_sys."${deps."imageflow_c_components"."0.1.0"."libz_sys"}" deps)
       (cratesIO.features_.mozjpeg_sys."${deps."imageflow_c_components"."0.1.0"."mozjpeg_sys"}" deps)
       (cratesIO.features_.cc."${deps."imageflow_c_components"."0.1.0"."cc"}" deps)
       (cratesIO.features_.glob."${deps."imageflow_c_components"."0.1.0"."glob"}" deps) ];


  crates.imageflow_core."0.1.0" = deps: { features?(features_.imageflow_core."0.1.0" deps {}) }: buildRustCrate {
    crateName = "imageflow_core";
    version = "0.1.0";
    authors = [ "Nathanael Jones <nathanael.jones@gmail.com>" ];
    src = ./.;
    workspace_member = "imageflow_core";
    dependencies = mapFeatures features ([ (cratesIO.crates."blake2_rfc"."${deps."imageflow_core"."0.1.0"."blake2_rfc"}" deps) (cratesIO.crates."chashmap"."${deps."imageflow_core"."0.1.0"."chashmap"}" deps) (cratesIO.crates."chrono"."${deps."imageflow_core"."0.1.0"."chrono"}" deps) (cratesIO.crates."clap"."${deps."imageflow_core"."0.1.0"."clap"}" deps) (cratesIO.crates."daggy"."${deps."imageflow_core"."0.1.0"."daggy"}" deps) (cratesIO.crates."dssim"."${deps."imageflow_core"."0.1.0"."dssim"}" deps) (cratesIO.crates."fnv"."${deps."imageflow_core"."0.1.0"."fnv"}" deps) (cratesIO.crates."getopts"."${deps."imageflow_core"."0.1.0"."getopts"}" deps) (cratesIO.crates."gif"."${deps."imageflow_core"."0.1.0"."gif"}" deps) (crates."imageflow_c_components"."${deps."imageflow_core"."0.1.0"."imageflow_c_components"}" deps) (crates."imageflow_helpers"."${deps."imageflow_core"."0.1.0"."imageflow_helpers"}" deps) (crates."imageflow_riapi"."${deps."imageflow_core"."0.1.0"."imageflow_riapi"}" deps) (crates."imageflow_types"."${deps."imageflow_core"."0.1.0"."imageflow_types"}" deps) (cratesIO.crates."imagequant"."${deps."imageflow_core"."0.1.0"."imagequant"}" deps) (cratesIO.crates."imgref"."${deps."imageflow_core"."0.1.0"."imgref"}" deps) (cratesIO.crates."itertools"."${deps."imageflow_core"."0.1.0"."itertools"}" deps) (cratesIO.crates."lazy_static"."${deps."imageflow_core"."0.1.0"."lazy_static"}" deps) (cratesIO.crates."lcms2"."${deps."imageflow_core"."0.1.0"."lcms2"}" deps) (cratesIO.crates."libc"."${deps."imageflow_core"."0.1.0"."libc"}" deps) (cratesIO.crates."lodepng"."${deps."imageflow_core"."0.1.0"."lodepng"}" deps) (cratesIO.crates."mozjpeg"."${deps."imageflow_core"."0.1.0"."mozjpeg"}" deps) (cratesIO.crates."num"."${deps."imageflow_core"."0.1.0"."num"}" deps) (cratesIO.crates."petgraph"."${deps."imageflow_core"."0.1.0"."petgraph"}" deps) (cratesIO.crates."rgb"."${deps."imageflow_core"."0.1.0"."rgb"}" deps) (cratesIO.crates."rustc_serialize"."${deps."imageflow_core"."0.1.0"."rustc_serialize"}" deps) (cratesIO.crates."serde"."${deps."imageflow_core"."0.1.0"."serde"}" deps) (cratesIO.crates."serde_derive"."${deps."imageflow_core"."0.1.0"."serde_derive"}" deps) (cratesIO.crates."serde_json"."${deps."imageflow_core"."0.1.0"."serde_json"}" deps) (cratesIO.crates."smallvec"."${deps."imageflow_core"."0.1.0"."smallvec"}" deps) (cratesIO.crates."threadpool"."${deps."imageflow_core"."0.1.0"."threadpool"}" deps) (cratesIO.crates."time"."${deps."imageflow_core"."0.1.0"."time"}" deps) (cratesIO.crates."twox_hash"."${deps."imageflow_core"."0.1.0"."twox_hash"}" deps) (cratesIO.crates."url"."${deps."imageflow_core"."0.1.0"."url"}" deps) (cratesIO.crates."uuid"."${deps."imageflow_core"."0.1.0"."uuid"}" deps) ]);
  };
  features_.imageflow_core."0.1.0" = deps: f: updateFeatures f (rec {
    blake2_rfc = { "${deps.imageflow_core."0.1.0".blake2_rfc}".default = true; };
    chashmap = { "${deps.imageflow_core."0.1.0".chashmap}".default = true; };
    chrono = { "${deps.imageflow_core."0.1.0".chrono}".default = true; };
    clap = { "${deps.imageflow_core."0.1.0".clap}".default = true; };
    daggy = { "${deps.imageflow_core."0.1.0".daggy}".default = true; };
    dssim = { "${deps.imageflow_core."0.1.0".dssim}".default = true; };
    fnv = { "${deps.imageflow_core."0.1.0".fnv}".default = true; };
    getopts = { "${deps.imageflow_core."0.1.0".getopts}".default = true; };
    gif = { "${deps.imageflow_core."0.1.0".gif}".default = true; };
    imageflow_c_components = { "${deps.imageflow_core."0.1.0".imageflow_c_components}".default = true; };
    imageflow_core = { "0.1.0".default = (f.imageflow_core."0.1.0".default or true); };
    imageflow_helpers = { "${deps.imageflow_core."0.1.0".imageflow_helpers}".default = true; };
    imageflow_riapi = { "${deps.imageflow_core."0.1.0".imageflow_riapi}".default = true; };
    imageflow_types = { "${deps.imageflow_core."0.1.0".imageflow_types}".default = true; };
    imagequant = { "${deps.imageflow_core."0.1.0".imagequant}".default = true; };
    imgref = { "${deps.imageflow_core."0.1.0".imgref}".default = true; };
    itertools = { "${deps.imageflow_core."0.1.0".itertools}".default = true; };
    lazy_static = { "${deps.imageflow_core."0.1.0".lazy_static}".default = true; };
    lcms2 = { "${deps.imageflow_core."0.1.0".lcms2}".default = true; };
    libc = { "${deps.imageflow_core."0.1.0".libc}".default = true; };
    lodepng = { "${deps.imageflow_core."0.1.0".lodepng}".default = true; };
    mozjpeg = { "${deps.imageflow_core."0.1.0".mozjpeg}".default = true; };
    num = { "${deps.imageflow_core."0.1.0".num}".default = true; };
    petgraph = { "${deps.imageflow_core."0.1.0".petgraph}".default = true; };
    rgb = { "${deps.imageflow_core."0.1.0".rgb}".default = true; };
    rustc_serialize = { "${deps.imageflow_core."0.1.0".rustc_serialize}".default = true; };
    serde = { "${deps.imageflow_core."0.1.0".serde}".default = true; };
    serde_derive = { "${deps.imageflow_core."0.1.0".serde_derive}".default = true; };
    serde_json = { "${deps.imageflow_core."0.1.0".serde_json}".default = true; };
    smallvec = { "${deps.imageflow_core."0.1.0".smallvec}".default = true; };
    threadpool = { "${deps.imageflow_core."0.1.0".threadpool}".default = true; };
    time = { "${deps.imageflow_core."0.1.0".time}".default = true; };
    twox_hash = { "${deps.imageflow_core."0.1.0".twox_hash}".default = true; };
    url = { "${deps.imageflow_core."0.1.0".url}".default = true; };
    uuid = fold recursiveUpdate {} [
      { "${deps.imageflow_core."0.1.0".uuid}"."v4" = true; }
      { "${deps.imageflow_core."0.1.0".uuid}".default = true; }
    ];
  }) [ (cratesIO.features_.blake2_rfc."${deps."imageflow_core"."0.1.0"."blake2_rfc"}" deps)
       (cratesIO.features_.chashmap."${deps."imageflow_core"."0.1.0"."chashmap"}" deps)
       (cratesIO.features_.chrono."${deps."imageflow_core"."0.1.0"."chrono"}" deps)
       (cratesIO.features_.clap."${deps."imageflow_core"."0.1.0"."clap"}" deps)
       (cratesIO.features_.daggy."${deps."imageflow_core"."0.1.0"."daggy"}" deps)
       (cratesIO.features_.dssim."${deps."imageflow_core"."0.1.0"."dssim"}" deps)
       (cratesIO.features_.fnv."${deps."imageflow_core"."0.1.0"."fnv"}" deps)
       (cratesIO.features_.getopts."${deps."imageflow_core"."0.1.0"."getopts"}" deps)
       (cratesIO.features_.gif."${deps."imageflow_core"."0.1.0"."gif"}" deps)
       (features_.imageflow_c_components."${deps."imageflow_core"."0.1.0"."imageflow_c_components"}" deps)
       (features_.imageflow_helpers."${deps."imageflow_core"."0.1.0"."imageflow_helpers"}" deps)
       (features_.imageflow_riapi."${deps."imageflow_core"."0.1.0"."imageflow_riapi"}" deps)
       (features_.imageflow_types."${deps."imageflow_core"."0.1.0"."imageflow_types"}" deps)
       (cratesIO.features_.imagequant."${deps."imageflow_core"."0.1.0"."imagequant"}" deps)
       (cratesIO.features_.imgref."${deps."imageflow_core"."0.1.0"."imgref"}" deps)
       (cratesIO.features_.itertools."${deps."imageflow_core"."0.1.0"."itertools"}" deps)
       (cratesIO.features_.lazy_static."${deps."imageflow_core"."0.1.0"."lazy_static"}" deps)
       (cratesIO.features_.lcms2."${deps."imageflow_core"."0.1.0"."lcms2"}" deps)
       (cratesIO.features_.libc."${deps."imageflow_core"."0.1.0"."libc"}" deps)
       (cratesIO.features_.lodepng."${deps."imageflow_core"."0.1.0"."lodepng"}" deps)
       (cratesIO.features_.mozjpeg."${deps."imageflow_core"."0.1.0"."mozjpeg"}" deps)
       (cratesIO.features_.num."${deps."imageflow_core"."0.1.0"."num"}" deps)
       (cratesIO.features_.petgraph."${deps."imageflow_core"."0.1.0"."petgraph"}" deps)
       (cratesIO.features_.rgb."${deps."imageflow_core"."0.1.0"."rgb"}" deps)
       (cratesIO.features_.rustc_serialize."${deps."imageflow_core"."0.1.0"."rustc_serialize"}" deps)
       (cratesIO.features_.serde."${deps."imageflow_core"."0.1.0"."serde"}" deps)
       (cratesIO.features_.serde_derive."${deps."imageflow_core"."0.1.0"."serde_derive"}" deps)
       (cratesIO.features_.serde_json."${deps."imageflow_core"."0.1.0"."serde_json"}" deps)
       (cratesIO.features_.smallvec."${deps."imageflow_core"."0.1.0"."smallvec"}" deps)
       (cratesIO.features_.threadpool."${deps."imageflow_core"."0.1.0"."threadpool"}" deps)
       (cratesIO.features_.time."${deps."imageflow_core"."0.1.0"."time"}" deps)
       (cratesIO.features_.twox_hash."${deps."imageflow_core"."0.1.0"."twox_hash"}" deps)
       (cratesIO.features_.url."${deps."imageflow_core"."0.1.0"."url"}" deps)
       (cratesIO.features_.uuid."${deps."imageflow_core"."0.1.0"."uuid"}" deps) ];


  crates.imageflow_helpers."0.1.0" = deps: { features?(features_.imageflow_helpers."0.1.0" deps {}) }: buildRustCrate {
    crateName = "imageflow_helpers";
    version = "0.1.0";
    authors = [ "Nathanael Jones <nathanael.jones@gmail.com>" ];
    src = ./.;
    workspace_member = "imageflow_helpers";
    dependencies = mapFeatures features ([ (cratesIO.crates."app_dirs"."${deps."imageflow_helpers"."0.1.0"."app_dirs"}" deps) (cratesIO.crates."backtrace"."${deps."imageflow_helpers"."0.1.0"."backtrace"}" deps) (cratesIO.crates."base64"."${deps."imageflow_helpers"."0.1.0"."base64"}" deps) (cratesIO.crates."blake2_rfc"."${deps."imageflow_helpers"."0.1.0"."blake2_rfc"}" deps) (cratesIO.crates."chashmap"."${deps."imageflow_helpers"."0.1.0"."chashmap"}" deps) (cratesIO.crates."chrono"."${deps."imageflow_helpers"."0.1.0"."chrono"}" deps) (cratesIO.crates."digest"."${deps."imageflow_helpers"."0.1.0"."digest"}" deps) (cratesIO.crates."error_chain"."${deps."imageflow_helpers"."0.1.0"."error_chain"}" deps) (cratesIO.crates."fnv"."${deps."imageflow_helpers"."0.1.0"."fnv"}" deps) (cratesIO.crates."hyper"."${deps."imageflow_helpers"."0.1.0"."hyper"}" deps) (cratesIO.crates."hyper_native_tls"."${deps."imageflow_helpers"."0.1.0"."hyper_native_tls"}" deps) (cratesIO.crates."lazy_static"."${deps."imageflow_helpers"."0.1.0"."lazy_static"}" deps) (cratesIO.crates."libc"."${deps."imageflow_helpers"."0.1.0"."libc"}" deps) (cratesIO.crates."lockless"."${deps."imageflow_helpers"."0.1.0"."lockless"}" deps) (cratesIO.crates."mockito"."${deps."imageflow_helpers"."0.1.0"."mockito"}" deps) (cratesIO.crates."num"."${deps."imageflow_helpers"."0.1.0"."num"}" deps) (cratesIO.crates."parking_lot"."${deps."imageflow_helpers"."0.1.0"."parking_lot"}" deps) (cratesIO.crates."rand"."${deps."imageflow_helpers"."0.1.0"."rand"}" deps) (cratesIO.crates."regex"."${deps."imageflow_helpers"."0.1.0"."regex"}" deps) (cratesIO.crates."reqwest"."${deps."imageflow_helpers"."0.1.0"."reqwest"}" deps) (cratesIO.crates."rustc_serialize"."${deps."imageflow_helpers"."0.1.0"."rustc_serialize"}" deps) (cratesIO.crates."serde"."${deps."imageflow_helpers"."0.1.0"."serde"}" deps) (cratesIO.crates."serde_derive"."${deps."imageflow_helpers"."0.1.0"."serde_derive"}" deps) (cratesIO.crates."serde_json"."${deps."imageflow_helpers"."0.1.0"."serde_json"}" deps) (cratesIO.crates."sha2"."${deps."imageflow_helpers"."0.1.0"."sha2"}" deps) (cratesIO.crates."smallvec"."${deps."imageflow_helpers"."0.1.0"."smallvec"}" deps) (cratesIO.crates."time"."${deps."imageflow_helpers"."0.1.0"."time"}" deps) (cratesIO.crates."twox_hash"."${deps."imageflow_helpers"."0.1.0"."twox_hash"}" deps) (cratesIO.crates."unicase"."${deps."imageflow_helpers"."0.1.0"."unicase"}" deps) (cratesIO.crates."uuid"."${deps."imageflow_helpers"."0.1.0"."uuid"}" deps) (cratesIO.crates."zip"."${deps."imageflow_helpers"."0.1.0"."zip"}" deps) ])
      ++ (if !(kernel == "windows" || kernel == "darwin") then mapFeatures features ([ (cratesIO.crates."hyper_openssl"."${deps."imageflow_helpers"."0.1.0"."hyper_openssl"}" deps) (cratesIO.crates."openssl"."${deps."imageflow_helpers"."0.1.0"."openssl"}" deps) ]) else []);
  };
  features_.imageflow_helpers."0.1.0" = deps: f: updateFeatures f (rec {
    app_dirs = { "${deps.imageflow_helpers."0.1.0".app_dirs}".default = true; };
    backtrace = { "${deps.imageflow_helpers."0.1.0".backtrace}".default = true; };
    base64 = { "${deps.imageflow_helpers."0.1.0".base64}".default = true; };
    blake2_rfc = { "${deps.imageflow_helpers."0.1.0".blake2_rfc}".default = true; };
    chashmap = { "${deps.imageflow_helpers."0.1.0".chashmap}".default = true; };
    chrono = { "${deps.imageflow_helpers."0.1.0".chrono}".default = true; };
    digest = { "${deps.imageflow_helpers."0.1.0".digest}".default = true; };
    error_chain = { "${deps.imageflow_helpers."0.1.0".error_chain}".default = true; };
    fnv = { "${deps.imageflow_helpers."0.1.0".fnv}".default = true; };
    hyper = { "${deps.imageflow_helpers."0.1.0".hyper}".default = true; };
    hyper_native_tls = { "${deps.imageflow_helpers."0.1.0".hyper_native_tls}".default = true; };
    hyper_openssl = { "${deps.imageflow_helpers."0.1.0".hyper_openssl}".default = true; };
    imageflow_helpers = { "0.1.0".default = (f.imageflow_helpers."0.1.0".default or true); };
    lazy_static = { "${deps.imageflow_helpers."0.1.0".lazy_static}".default = true; };
    libc = { "${deps.imageflow_helpers."0.1.0".libc}".default = true; };
    lockless = { "${deps.imageflow_helpers."0.1.0".lockless}".default = true; };
    mockito = { "${deps.imageflow_helpers."0.1.0".mockito}".default = true; };
    num = { "${deps.imageflow_helpers."0.1.0".num}".default = true; };
    openssl = { "${deps.imageflow_helpers."0.1.0".openssl}".default = true; };
    parking_lot = fold recursiveUpdate {} [
      { "${deps.imageflow_helpers."0.1.0".parking_lot}"."nightly" = true; }
      { "${deps.imageflow_helpers."0.1.0".parking_lot}".default = true; }
    ];
    rand = { "${deps.imageflow_helpers."0.1.0".rand}".default = true; };
    regex = { "${deps.imageflow_helpers."0.1.0".regex}".default = true; };
    reqwest = { "${deps.imageflow_helpers."0.1.0".reqwest}".default = true; };
    rustc_serialize = { "${deps.imageflow_helpers."0.1.0".rustc_serialize}".default = true; };
    serde = { "${deps.imageflow_helpers."0.1.0".serde}".default = true; };
    serde_derive = { "${deps.imageflow_helpers."0.1.0".serde_derive}".default = true; };
    serde_json = { "${deps.imageflow_helpers."0.1.0".serde_json}".default = true; };
    sha2 = { "${deps.imageflow_helpers."0.1.0".sha2}".default = true; };
    smallvec = { "${deps.imageflow_helpers."0.1.0".smallvec}".default = true; };
    time = { "${deps.imageflow_helpers."0.1.0".time}".default = true; };
    twox_hash = { "${deps.imageflow_helpers."0.1.0".twox_hash}".default = true; };
    unicase = { "${deps.imageflow_helpers."0.1.0".unicase}".default = true; };
    uuid = fold recursiveUpdate {} [
      { "${deps.imageflow_helpers."0.1.0".uuid}"."v4" = true; }
      { "${deps.imageflow_helpers."0.1.0".uuid}"."v5" = true; }
      { "${deps.imageflow_helpers."0.1.0".uuid}".default = true; }
    ];
    zip = { "${deps.imageflow_helpers."0.1.0".zip}".default = (f.zip."${deps.imageflow_helpers."0.1.0".zip}".default or false); };
  }) [ (cratesIO.features_.app_dirs."${deps."imageflow_helpers"."0.1.0"."app_dirs"}" deps)
       (cratesIO.features_.backtrace."${deps."imageflow_helpers"."0.1.0"."backtrace"}" deps)
       (cratesIO.features_.base64."${deps."imageflow_helpers"."0.1.0"."base64"}" deps)
       (cratesIO.features_.blake2_rfc."${deps."imageflow_helpers"."0.1.0"."blake2_rfc"}" deps)
       (cratesIO.features_.chashmap."${deps."imageflow_helpers"."0.1.0"."chashmap"}" deps)
       (cratesIO.features_.chrono."${deps."imageflow_helpers"."0.1.0"."chrono"}" deps)
       (cratesIO.features_.digest."${deps."imageflow_helpers"."0.1.0"."digest"}" deps)
       (cratesIO.features_.error_chain."${deps."imageflow_helpers"."0.1.0"."error_chain"}" deps)
       (cratesIO.features_.fnv."${deps."imageflow_helpers"."0.1.0"."fnv"}" deps)
       (cratesIO.features_.hyper."${deps."imageflow_helpers"."0.1.0"."hyper"}" deps)
       (cratesIO.features_.hyper_native_tls."${deps."imageflow_helpers"."0.1.0"."hyper_native_tls"}" deps)
       (cratesIO.features_.lazy_static."${deps."imageflow_helpers"."0.1.0"."lazy_static"}" deps)
       (cratesIO.features_.libc."${deps."imageflow_helpers"."0.1.0"."libc"}" deps)
       (cratesIO.features_.lockless."${deps."imageflow_helpers"."0.1.0"."lockless"}" deps)
       (cratesIO.features_.mockito."${deps."imageflow_helpers"."0.1.0"."mockito"}" deps)
       (cratesIO.features_.num."${deps."imageflow_helpers"."0.1.0"."num"}" deps)
       (cratesIO.features_.parking_lot."${deps."imageflow_helpers"."0.1.0"."parking_lot"}" deps)
       (cratesIO.features_.rand."${deps."imageflow_helpers"."0.1.0"."rand"}" deps)
       (cratesIO.features_.regex."${deps."imageflow_helpers"."0.1.0"."regex"}" deps)
       (cratesIO.features_.reqwest."${deps."imageflow_helpers"."0.1.0"."reqwest"}" deps)
       (cratesIO.features_.rustc_serialize."${deps."imageflow_helpers"."0.1.0"."rustc_serialize"}" deps)
       (cratesIO.features_.serde."${deps."imageflow_helpers"."0.1.0"."serde"}" deps)
       (cratesIO.features_.serde_derive."${deps."imageflow_helpers"."0.1.0"."serde_derive"}" deps)
       (cratesIO.features_.serde_json."${deps."imageflow_helpers"."0.1.0"."serde_json"}" deps)
       (cratesIO.features_.sha2."${deps."imageflow_helpers"."0.1.0"."sha2"}" deps)
       (cratesIO.features_.smallvec."${deps."imageflow_helpers"."0.1.0"."smallvec"}" deps)
       (cratesIO.features_.time."${deps."imageflow_helpers"."0.1.0"."time"}" deps)
       (cratesIO.features_.twox_hash."${deps."imageflow_helpers"."0.1.0"."twox_hash"}" deps)
       (cratesIO.features_.unicase."${deps."imageflow_helpers"."0.1.0"."unicase"}" deps)
       (cratesIO.features_.uuid."${deps."imageflow_helpers"."0.1.0"."uuid"}" deps)
       (cratesIO.features_.zip."${deps."imageflow_helpers"."0.1.0"."zip"}" deps)
       (cratesIO.features_.hyper_openssl."${deps."imageflow_helpers"."0.1.0"."hyper_openssl"}" deps)
       (cratesIO.features_.openssl."${deps."imageflow_helpers"."0.1.0"."openssl"}" deps) ];


  crates.imageflow_riapi."0.1.0" = deps: { features?(features_.imageflow_riapi."0.1.0" deps {}) }: buildRustCrate {
    crateName = "imageflow_riapi";
    version = "0.1.0";
    authors = [ "Nathanael Jones <nathanael.jones@gmail.com>" ];
    src = ./.;
    workspace_member = "imageflow_riapi";
    dependencies = mapFeatures features ([ (cratesIO.crates."difference"."${deps."imageflow_riapi"."0.1.0"."difference"}" deps) (crates."enum_derive"."${deps."imageflow_riapi"."0.1.0"."enum_derive"}" deps) (cratesIO.crates."ieee754"."${deps."imageflow_riapi"."0.1.0"."ieee754"}" deps) (crates."imageflow_helpers"."${deps."imageflow_riapi"."0.1.0"."imageflow_helpers"}" deps) (crates."imageflow_types"."${deps."imageflow_riapi"."0.1.0"."imageflow_types"}" deps) (cratesIO.crates."lazy_static"."${deps."imageflow_riapi"."0.1.0"."lazy_static"}" deps) (crates."macro_attr"."${deps."imageflow_riapi"."0.1.0"."macro_attr"}" deps) (cratesIO.crates."option_filter"."${deps."imageflow_riapi"."0.1.0"."option_filter"}" deps) (cratesIO.crates."time"."${deps."imageflow_riapi"."0.1.0"."time"}" deps) (cratesIO.crates."url"."${deps."imageflow_riapi"."0.1.0"."url"}" deps) ]);
  };
  features_.imageflow_riapi."0.1.0" = deps: f: updateFeatures f (rec {
    difference = { "${deps.imageflow_riapi."0.1.0".difference}".default = true; };
    enum_derive = { "${deps.imageflow_riapi."0.1.0".enum_derive}".default = true; };
    ieee754 = { "${deps.imageflow_riapi."0.1.0".ieee754}".default = true; };
    imageflow_helpers = { "${deps.imageflow_riapi."0.1.0".imageflow_helpers}".default = true; };
    imageflow_riapi = { "0.1.0".default = (f.imageflow_riapi."0.1.0".default or true); };
    imageflow_types = { "${deps.imageflow_riapi."0.1.0".imageflow_types}".default = true; };
    lazy_static = { "${deps.imageflow_riapi."0.1.0".lazy_static}".default = true; };
    macro_attr = { "${deps.imageflow_riapi."0.1.0".macro_attr}".default = true; };
    option_filter = { "${deps.imageflow_riapi."0.1.0".option_filter}".default = true; };
    time = { "${deps.imageflow_riapi."0.1.0".time}".default = true; };
    url = { "${deps.imageflow_riapi."0.1.0".url}".default = true; };
  }) [ (cratesIO.features_.difference."${deps."imageflow_riapi"."0.1.0"."difference"}" deps)
       (features_.enum_derive."${deps."imageflow_riapi"."0.1.0"."enum_derive"}" deps)
       (cratesIO.features_.ieee754."${deps."imageflow_riapi"."0.1.0"."ieee754"}" deps)
       (features_.imageflow_helpers."${deps."imageflow_riapi"."0.1.0"."imageflow_helpers"}" deps)
       (features_.imageflow_types."${deps."imageflow_riapi"."0.1.0"."imageflow_types"}" deps)
       (cratesIO.features_.lazy_static."${deps."imageflow_riapi"."0.1.0"."lazy_static"}" deps)
       (features_.macro_attr."${deps."imageflow_riapi"."0.1.0"."macro_attr"}" deps)
       (cratesIO.features_.option_filter."${deps."imageflow_riapi"."0.1.0"."option_filter"}" deps)
       (cratesIO.features_.time."${deps."imageflow_riapi"."0.1.0"."time"}" deps)
       (cratesIO.features_.url."${deps."imageflow_riapi"."0.1.0"."url"}" deps) ];


  crates.imageflow_server."0.1.0" = deps: { features?(features_.imageflow_server."0.1.0" deps {}) }: buildRustCrate {
    crateName = "imageflow_server";
    version = "0.1.0";
    authors = [ "Nathanael Jones <nathanael.jones@gmail.com>" ];
    src = ./.;
    workspace_member = "imageflow_server";
    crateBin = [ {  name = "imageflow_server";  path = "src/main.rs"; } ];
    dependencies = mapFeatures features ([ (crates."bincode"."${deps."imageflow_server"."0.1.0"."bincode"}" deps) (cratesIO.crates."blake2_rfc"."${deps."imageflow_server"."0.1.0"."blake2_rfc"}" deps) (cratesIO.crates."chrono"."${deps."imageflow_server"."0.1.0"."chrono"}" deps) (cratesIO.crates."clap"."${deps."imageflow_server"."0.1.0"."clap"}" deps) (cratesIO.crates."conduit_mime_types"."${deps."imageflow_server"."0.1.0"."conduit_mime_types"}" deps) (cratesIO.crates."env_logger"."${deps."imageflow_server"."0.1.0"."env_logger"}" deps) (cratesIO.crates."fnv"."${deps."imageflow_server"."0.1.0"."fnv"}" deps) (cratesIO.crates."hyper"."${deps."imageflow_server"."0.1.0"."hyper"}" deps) (cratesIO.crates."hyper_native_tls"."${deps."imageflow_server"."0.1.0"."hyper_native_tls"}" deps) (crates."imageflow_core"."${deps."imageflow_server"."0.1.0"."imageflow_core"}" deps) (crates."imageflow_helpers"."${deps."imageflow_server"."0.1.0"."imageflow_helpers"}" deps) (crates."imageflow_riapi"."${deps."imageflow_server"."0.1.0"."imageflow_riapi"}" deps) (crates."imageflow_types"."${deps."imageflow_server"."0.1.0"."imageflow_types"}" deps) (cratesIO.crates."iron"."${deps."imageflow_server"."0.1.0"."iron"}" deps) (cratesIO.crates."lazy_static"."${deps."imageflow_server"."0.1.0"."lazy_static"}" deps) (cratesIO.crates."libc"."${deps."imageflow_server"."0.1.0"."libc"}" deps) (cratesIO.crates."log"."${deps."imageflow_server"."0.1.0"."log"}" deps) (crates."logger"."${deps."imageflow_server"."0.1.0"."logger"}" deps) (cratesIO.crates."lru_cache"."${deps."imageflow_server"."0.1.0"."lru_cache"}" deps) (cratesIO.crates."mount"."${deps."imageflow_server"."0.1.0"."mount"}" deps) (cratesIO.crates."persistent"."${deps."imageflow_server"."0.1.0"."persistent"}" deps) (cratesIO.crates."rand"."${deps."imageflow_server"."0.1.0"."rand"}" deps) (cratesIO.crates."regex"."${deps."imageflow_server"."0.1.0"."regex"}" deps) (cratesIO.crates."reqwest"."${deps."imageflow_server"."0.1.0"."reqwest"}" deps) (cratesIO.crates."router"."${deps."imageflow_server"."0.1.0"."router"}" deps) (cratesIO.crates."rustc_serialize"."${deps."imageflow_server"."0.1.0"."rustc_serialize"}" deps) (cratesIO.crates."serde"."${deps."imageflow_server"."0.1.0"."serde"}" deps) (cratesIO.crates."serde_derive"."${deps."imageflow_server"."0.1.0"."serde_derive"}" deps) (cratesIO.crates."serde_json"."${deps."imageflow_server"."0.1.0"."serde_json"}" deps) (crates."staticfile"."${deps."imageflow_server"."0.1.0"."staticfile"}" deps) (cratesIO.crates."threadpool"."${deps."imageflow_server"."0.1.0"."threadpool"}" deps) (cratesIO.crates."time"."${deps."imageflow_server"."0.1.0"."time"}" deps) (cratesIO.crates."twox_hash"."${deps."imageflow_server"."0.1.0"."twox_hash"}" deps) (cratesIO.crates."url"."${deps."imageflow_server"."0.1.0"."url"}" deps) (cratesIO.crates."wait_timeout"."${deps."imageflow_server"."0.1.0"."wait_timeout"}" deps) ]);
  };
  features_.imageflow_server."0.1.0" = deps: f: updateFeatures f (rec {
    bincode = { "${deps.imageflow_server."0.1.0".bincode}".default = true; };
    blake2_rfc = { "${deps.imageflow_server."0.1.0".blake2_rfc}".default = true; };
    chrono = { "${deps.imageflow_server."0.1.0".chrono}".default = true; };
    clap = { "${deps.imageflow_server."0.1.0".clap}".default = true; };
    conduit_mime_types = { "${deps.imageflow_server."0.1.0".conduit_mime_types}".default = true; };
    env_logger = { "${deps.imageflow_server."0.1.0".env_logger}".default = true; };
    fnv = { "${deps.imageflow_server."0.1.0".fnv}".default = true; };
    hyper = { "${deps.imageflow_server."0.1.0".hyper}".default = (f.hyper."${deps.imageflow_server."0.1.0".hyper}".default or false); };
    hyper_native_tls = { "${deps.imageflow_server."0.1.0".hyper_native_tls}".default = true; };
    imageflow_core = { "${deps.imageflow_server."0.1.0".imageflow_core}".default = true; };
    imageflow_helpers = { "${deps.imageflow_server."0.1.0".imageflow_helpers}".default = true; };
    imageflow_riapi = { "${deps.imageflow_server."0.1.0".imageflow_riapi}".default = true; };
    imageflow_server = { "0.1.0".default = (f.imageflow_server."0.1.0".default or true); };
    imageflow_types = { "${deps.imageflow_server."0.1.0".imageflow_types}".default = true; };
    iron = { "${deps.imageflow_server."0.1.0".iron}".default = true; };
    lazy_static = { "${deps.imageflow_server."0.1.0".lazy_static}".default = true; };
    libc = { "${deps.imageflow_server."0.1.0".libc}".default = true; };
    log = { "${deps.imageflow_server."0.1.0".log}".default = true; };
    logger = { "${deps.imageflow_server."0.1.0".logger}".default = true; };
    lru_cache = { "${deps.imageflow_server."0.1.0".lru_cache}".default = true; };
    mount = { "${deps.imageflow_server."0.1.0".mount}".default = true; };
    persistent = { "${deps.imageflow_server."0.1.0".persistent}".default = true; };
    rand = { "${deps.imageflow_server."0.1.0".rand}".default = true; };
    regex = { "${deps.imageflow_server."0.1.0".regex}".default = true; };
    reqwest = { "${deps.imageflow_server."0.1.0".reqwest}".default = true; };
    router = { "${deps.imageflow_server."0.1.0".router}".default = true; };
    rustc_serialize = { "${deps.imageflow_server."0.1.0".rustc_serialize}".default = true; };
    serde = { "${deps.imageflow_server."0.1.0".serde}".default = true; };
    serde_derive = { "${deps.imageflow_server."0.1.0".serde_derive}".default = true; };
    serde_json = { "${deps.imageflow_server."0.1.0".serde_json}".default = true; };
    staticfile = { "${deps.imageflow_server."0.1.0".staticfile}".default = true; };
    threadpool = { "${deps.imageflow_server."0.1.0".threadpool}".default = true; };
    time = { "${deps.imageflow_server."0.1.0".time}".default = true; };
    twox_hash = { "${deps.imageflow_server."0.1.0".twox_hash}".default = true; };
    url = { "${deps.imageflow_server."0.1.0".url}".default = true; };
    wait_timeout = { "${deps.imageflow_server."0.1.0".wait_timeout}".default = true; };
  }) [ (features_.bincode."${deps."imageflow_server"."0.1.0"."bincode"}" deps)
       (cratesIO.features_.blake2_rfc."${deps."imageflow_server"."0.1.0"."blake2_rfc"}" deps)
       (cratesIO.features_.chrono."${deps."imageflow_server"."0.1.0"."chrono"}" deps)
       (cratesIO.features_.clap."${deps."imageflow_server"."0.1.0"."clap"}" deps)
       (cratesIO.features_.conduit_mime_types."${deps."imageflow_server"."0.1.0"."conduit_mime_types"}" deps)
       (cratesIO.features_.env_logger."${deps."imageflow_server"."0.1.0"."env_logger"}" deps)
       (cratesIO.features_.fnv."${deps."imageflow_server"."0.1.0"."fnv"}" deps)
       (cratesIO.features_.hyper."${deps."imageflow_server"."0.1.0"."hyper"}" deps)
       (cratesIO.features_.hyper_native_tls."${deps."imageflow_server"."0.1.0"."hyper_native_tls"}" deps)
       (features_.imageflow_core."${deps."imageflow_server"."0.1.0"."imageflow_core"}" deps)
       (features_.imageflow_helpers."${deps."imageflow_server"."0.1.0"."imageflow_helpers"}" deps)
       (features_.imageflow_riapi."${deps."imageflow_server"."0.1.0"."imageflow_riapi"}" deps)
       (features_.imageflow_types."${deps."imageflow_server"."0.1.0"."imageflow_types"}" deps)
       (cratesIO.features_.iron."${deps."imageflow_server"."0.1.0"."iron"}" deps)
       (cratesIO.features_.lazy_static."${deps."imageflow_server"."0.1.0"."lazy_static"}" deps)
       (cratesIO.features_.libc."${deps."imageflow_server"."0.1.0"."libc"}" deps)
       (cratesIO.features_.log."${deps."imageflow_server"."0.1.0"."log"}" deps)
       (features_.logger."${deps."imageflow_server"."0.1.0"."logger"}" deps)
       (cratesIO.features_.lru_cache."${deps."imageflow_server"."0.1.0"."lru_cache"}" deps)
       (cratesIO.features_.mount."${deps."imageflow_server"."0.1.0"."mount"}" deps)
       (cratesIO.features_.persistent."${deps."imageflow_server"."0.1.0"."persistent"}" deps)
       (cratesIO.features_.rand."${deps."imageflow_server"."0.1.0"."rand"}" deps)
       (cratesIO.features_.regex."${deps."imageflow_server"."0.1.0"."regex"}" deps)
       (cratesIO.features_.reqwest."${deps."imageflow_server"."0.1.0"."reqwest"}" deps)
       (cratesIO.features_.router."${deps."imageflow_server"."0.1.0"."router"}" deps)
       (cratesIO.features_.rustc_serialize."${deps."imageflow_server"."0.1.0"."rustc_serialize"}" deps)
       (cratesIO.features_.serde."${deps."imageflow_server"."0.1.0"."serde"}" deps)
       (cratesIO.features_.serde_derive."${deps."imageflow_server"."0.1.0"."serde_derive"}" deps)
       (cratesIO.features_.serde_json."${deps."imageflow_server"."0.1.0"."serde_json"}" deps)
       (features_.staticfile."${deps."imageflow_server"."0.1.0"."staticfile"}" deps)
       (cratesIO.features_.threadpool."${deps."imageflow_server"."0.1.0"."threadpool"}" deps)
       (cratesIO.features_.time."${deps."imageflow_server"."0.1.0"."time"}" deps)
       (cratesIO.features_.twox_hash."${deps."imageflow_server"."0.1.0"."twox_hash"}" deps)
       (cratesIO.features_.url."${deps."imageflow_server"."0.1.0"."url"}" deps)
       (cratesIO.features_.wait_timeout."${deps."imageflow_server"."0.1.0"."wait_timeout"}" deps) ];


  crates.imageflow_tool_lib."0.1.0" = deps: { features?(features_.imageflow_tool_lib."0.1.0" deps {}) }: buildRustCrate {
    crateName = "imageflow_tool_lib";
    version = "0.1.0";
    authors = [ "Nathanael Jones <nathanael.jones@gmail.com>" ];
    src = ./.;
    workspace_member = "imageflow_tool";
    crateBin = [ {  name = "imageflow_tool";  path = "src/main.rs"; } ];
    dependencies = mapFeatures features ([ (cratesIO.crates."clap"."${deps."imageflow_tool_lib"."0.1.0"."clap"}" deps) (crates."imageflow_core"."${deps."imageflow_tool_lib"."0.1.0"."imageflow_core"}" deps) (crates."imageflow_helpers"."${deps."imageflow_tool_lib"."0.1.0"."imageflow_helpers"}" deps) (crates."imageflow_types"."${deps."imageflow_tool_lib"."0.1.0"."imageflow_types"}" deps) (cratesIO.crates."libc"."${deps."imageflow_tool_lib"."0.1.0"."libc"}" deps) (cratesIO.crates."rustc_serialize"."${deps."imageflow_tool_lib"."0.1.0"."rustc_serialize"}" deps) (cratesIO.crates."serde"."${deps."imageflow_tool_lib"."0.1.0"."serde"}" deps) (cratesIO.crates."serde_json"."${deps."imageflow_tool_lib"."0.1.0"."serde_json"}" deps) (cratesIO.crates."threadpool"."${deps."imageflow_tool_lib"."0.1.0"."threadpool"}" deps) (cratesIO.crates."time"."${deps."imageflow_tool_lib"."0.1.0"."time"}" deps) ]);
  };
  features_.imageflow_tool_lib."0.1.0" = deps: f: updateFeatures f (rec {
    clap = { "${deps.imageflow_tool_lib."0.1.0".clap}".default = true; };
    imageflow_core = { "${deps.imageflow_tool_lib."0.1.0".imageflow_core}".default = true; };
    imageflow_helpers = { "${deps.imageflow_tool_lib."0.1.0".imageflow_helpers}".default = true; };
    imageflow_tool_lib = { "0.1.0".default = (f.imageflow_tool_lib."0.1.0".default or true); };
    imageflow_types = { "${deps.imageflow_tool_lib."0.1.0".imageflow_types}".default = true; };
    libc = { "${deps.imageflow_tool_lib."0.1.0".libc}".default = true; };
    rustc_serialize = { "${deps.imageflow_tool_lib."0.1.0".rustc_serialize}".default = true; };
    serde = { "${deps.imageflow_tool_lib."0.1.0".serde}".default = true; };
    serde_json = { "${deps.imageflow_tool_lib."0.1.0".serde_json}".default = true; };
    threadpool = { "${deps.imageflow_tool_lib."0.1.0".threadpool}".default = true; };
    time = { "${deps.imageflow_tool_lib."0.1.0".time}".default = true; };
  }) [ (cratesIO.features_.clap."${deps."imageflow_tool_lib"."0.1.0"."clap"}" deps)
       (features_.imageflow_core."${deps."imageflow_tool_lib"."0.1.0"."imageflow_core"}" deps)
       (features_.imageflow_helpers."${deps."imageflow_tool_lib"."0.1.0"."imageflow_helpers"}" deps)
       (features_.imageflow_types."${deps."imageflow_tool_lib"."0.1.0"."imageflow_types"}" deps)
       (cratesIO.features_.libc."${deps."imageflow_tool_lib"."0.1.0"."libc"}" deps)
       (cratesIO.features_.rustc_serialize."${deps."imageflow_tool_lib"."0.1.0"."rustc_serialize"}" deps)
       (cratesIO.features_.serde."${deps."imageflow_tool_lib"."0.1.0"."serde"}" deps)
       (cratesIO.features_.serde_json."${deps."imageflow_tool_lib"."0.1.0"."serde_json"}" deps)
       (cratesIO.features_.threadpool."${deps."imageflow_tool_lib"."0.1.0"."threadpool"}" deps)
       (cratesIO.features_.time."${deps."imageflow_tool_lib"."0.1.0"."time"}" deps) ];


  crates.imageflow_types."0.1.0" = deps: { features?(features_.imageflow_types."0.1.0" deps {}) }: buildRustCrate {
    crateName = "imageflow_types";
    version = "0.1.0";
    authors = [ "Nathanael Jones <imageflow@imazen.io>" ];
    src = ./.;
    workspace_member = "imageflow_types";
    build = "build.rs";
    dependencies = mapFeatures features ([ (cratesIO.crates."chrono"."${deps."imageflow_types"."0.1.0"."chrono"}" deps) (crates."imageflow_helpers"."${deps."imageflow_types"."0.1.0"."imageflow_helpers"}" deps) (cratesIO.crates."lazy_static"."${deps."imageflow_types"."0.1.0"."lazy_static"}" deps) (cratesIO.crates."regex"."${deps."imageflow_types"."0.1.0"."regex"}" deps) (cratesIO.crates."serde"."${deps."imageflow_types"."0.1.0"."serde"}" deps) (cratesIO.crates."serde_derive"."${deps."imageflow_types"."0.1.0"."serde_derive"}" deps) (cratesIO.crates."serde_json"."${deps."imageflow_types"."0.1.0"."serde_json"}" deps) ]);

    buildDependencies = mapFeatures features ([ (cratesIO.crates."chrono"."${deps."imageflow_types"."0.1.0"."chrono"}" deps) (cratesIO.crates."quick_error"."${deps."imageflow_types"."0.1.0"."quick_error"}" deps) ]);
  };
  features_.imageflow_types."0.1.0" = deps: f: updateFeatures f (rec {
    chrono = { "${deps.imageflow_types."0.1.0".chrono}".default = true; };
    imageflow_helpers = { "${deps.imageflow_types."0.1.0".imageflow_helpers}".default = true; };
    imageflow_types = { "0.1.0".default = (f.imageflow_types."0.1.0".default or true); };
    lazy_static = { "${deps.imageflow_types."0.1.0".lazy_static}".default = true; };
    quick_error = { "${deps.imageflow_types."0.1.0".quick_error}".default = true; };
    regex = { "${deps.imageflow_types."0.1.0".regex}".default = true; };
    serde = { "${deps.imageflow_types."0.1.0".serde}".default = true; };
    serde_derive = { "${deps.imageflow_types."0.1.0".serde_derive}".default = true; };
    serde_json = { "${deps.imageflow_types."0.1.0".serde_json}".default = true; };
  }) [ (cratesIO.features_.chrono."${deps."imageflow_types"."0.1.0"."chrono"}" deps)
       (features_.imageflow_helpers."${deps."imageflow_types"."0.1.0"."imageflow_helpers"}" deps)
       (cratesIO.features_.lazy_static."${deps."imageflow_types"."0.1.0"."lazy_static"}" deps)
       (cratesIO.features_.regex."${deps."imageflow_types"."0.1.0"."regex"}" deps)
       (cratesIO.features_.serde."${deps."imageflow_types"."0.1.0"."serde"}" deps)
       (cratesIO.features_.serde_derive."${deps."imageflow_types"."0.1.0"."serde_derive"}" deps)
       (cratesIO.features_.serde_json."${deps."imageflow_types"."0.1.0"."serde_json"}" deps)
       (cratesIO.features_.chrono."${deps."imageflow_types"."0.1.0"."chrono"}" deps)
       (cratesIO.features_.quick_error."${deps."imageflow_types"."0.1.0"."quick_error"}" deps) ];


  crates.logger."0.3.0" = deps: { features?(features_.logger."0.3.0" deps {}) }: buildRustCrate {
    crateName = "logger";
    version = "0.3.0";
    authors = [ "Alexander Irbis <irbis.labs@gmail.com>" "Jonathan Reem <jonathan.reem@gmail.com>" "Michael Reinhard <mcreinhard@gmail.com>" ];
    src = fetchgit {
       url = "https://github.com/iron/logger.git";
       rev = "0daead5fe10c3cd0c4738767c162dc63a59c3fb3";
       sha256 = "179wirxzdm6jjclnrqfwijiha5qjny78p4y394qvvalv0rjjlk6w";
    };
    dependencies = mapFeatures features ([ (cratesIO.crates."iron"."${deps."logger"."0.3.0"."iron"}" deps) (cratesIO.crates."log"."${deps."logger"."0.3.0"."log"}" deps) (cratesIO.crates."time"."${deps."logger"."0.3.0"."time"}" deps) ]);
  };
  features_.logger."0.3.0" = deps: f: updateFeatures f (rec {
    iron = { "${deps.logger."0.3.0".iron}".default = (f.iron."${deps.logger."0.3.0".iron}".default or false); };
    log = { "${deps.logger."0.3.0".log}".default = true; };
    logger = { "0.3.0".default = (f.logger."0.3.0".default or true); };
    time = { "${deps.logger."0.3.0".time}".default = true; };
  }) [ (cratesIO.features_.iron."${deps."logger"."0.3.0"."iron"}" deps)
       (cratesIO.features_.log."${deps."logger"."0.3.0"."log"}" deps)
       (cratesIO.features_.time."${deps."logger"."0.3.0"."time"}" deps) ];


  crates.macro_attr."0.2.1" = deps: { features?(features_.macro_attr."0.2.1" deps {}) }: buildRustCrate {
    crateName = "macro-attr";
    version = "0.2.1";
    authors = [ "Daniel Keep <daniel.keep@gmail.com>" ];
    src = fetchgit {
       url = "https://github.com/DanielKeep/rust-custom-derive.git";
       rev = "1252f258cdb9b7c9867f937c52c2f5c0e69a9c03";
       sha256 = "1yr3fdc6x6078qlgv00llyb2a5jmhmdg56yp5fnzrd4ds5yh10ks";
    };
    features = mkFeatures (features.macro_attr."0.2.1" or {});
  };
  features_.macro_attr."0.2.1" = deps: f: updateFeatures f (rec {
    macro_attr = fold recursiveUpdate {} [
      { "0.2.1".default = (f.macro_attr."0.2.1".default or true); }
      { "0.2.1".std =
        (f.macro_attr."0.2.1".std or false) ||
        (f.macro_attr."0.2.1".default or false) ||
        (macro_attr."0.2.1"."default" or false); }
    ];
  }) [];


  crates.staticfile."0.3.1" = deps: { features?(features_.staticfile."0.3.1" deps {}) }: buildRustCrate {
    crateName = "staticfile";
    version = "0.3.1";
    authors = [ "Zach Pomerantz <zmp@umich.edu>" "Jonathan Reem <jonathan.reem@gmail.com>" ];
    src = fetchgit {
       url = "https://github.com/onur/staticfile";
       rev = "9f2ff7201eda648128c92e3f5597c587f0629f51";
       sha256 = "15n5ap4jq3wzwqlr3i70nmjhgz06kb1gi5v676kn6jbb1nivx215";
    };
    dependencies = mapFeatures features ([ (cratesIO.crates."iron"."${deps."staticfile"."0.3.1"."iron"}" deps) (cratesIO.crates."log"."${deps."staticfile"."0.3.1"."log"}" deps) (cratesIO.crates."mount"."${deps."staticfile"."0.3.1"."mount"}" deps) (cratesIO.crates."time"."${deps."staticfile"."0.3.1"."time"}" deps) (cratesIO.crates."url"."${deps."staticfile"."0.3.1"."url"}" deps) ]);
    features = mkFeatures (features.staticfile."0.3.1" or {});
  };
  features_.staticfile."0.3.1" = deps: f: updateFeatures f (rec {
    iron = { "${deps.staticfile."0.3.1".iron}".default = true; };
    log = { "${deps.staticfile."0.3.1".log}".default = true; };
    mount = { "${deps.staticfile."0.3.1".mount}".default = true; };
    staticfile = fold recursiveUpdate {} [
      { "0.3.1".default = (f.staticfile."0.3.1".default or true); }
      { "0.3.1".filetime =
        (f.staticfile."0.3.1".filetime or false) ||
        (f.staticfile."0.3.1".cache or false) ||
        (staticfile."0.3.1"."cache" or false); }
    ];
    time = { "${deps.staticfile."0.3.1".time}".default = true; };
    url = { "${deps.staticfile."0.3.1".url}".default = true; };
  }) [ (cratesIO.features_.iron."${deps."staticfile"."0.3.1"."iron"}" deps)
       (cratesIO.features_.log."${deps."staticfile"."0.3.1"."log"}" deps)
       (cratesIO.features_.mount."${deps."staticfile"."0.3.1"."mount"}" deps)
       (cratesIO.features_.time."${deps."staticfile"."0.3.1"."time"}" deps)
       (cratesIO.features_.url."${deps."staticfile"."0.3.1"."url"}" deps) ];


}; in

rec {
  c_components_tests."0.1.0" = crates.crates.c_components_tests."0.1.0" deps {};
  imageflow_abi."0.1.0" = crates.crates.imageflow_abi."0.1.0" deps {};
  imageflow_c_components."0.1.0" = crates.crates.imageflow_c_components."0.1.0" deps {};
  imageflow_core."0.1.0" = crates.crates.imageflow_core."0.1.0" deps {};
  imageflow_helpers."0.1.0" = crates.crates.imageflow_helpers."0.1.0" deps {};
  imageflow_riapi."0.1.0" = crates.crates.imageflow_riapi."0.1.0" deps {};
  imageflow_server."0.1.0" = crates.crates.imageflow_server."0.1.0" deps {};
  imageflow_tool_lib."0.1.0" = crates.crates.imageflow_tool_lib."0.1.0" deps {};
  imageflow_types."0.1.0" = crates.crates.imageflow_types."0.1.0" deps {};
  __all = [ (c_components_tests."0.1.0" {}) (imageflow_abi."0.1.0" {}) (imageflow_c_components."0.1.0" {}) (imageflow_core."0.1.0" {}) (imageflow_helpers."0.1.0" {}) (imageflow_riapi."0.1.0" {}) (imageflow_server."0.1.0" {}) (imageflow_tool_lib."0.1.0" {}) (imageflow_types."0.1.0" {}) ];
  deps.adler32."1.0.2" = {};
  deps.aho_corasick."0.6.4" = {
    memchr = "2.0.1";
  };
  deps.ansi_term."0.11.0" = {
    winapi = "0.3.5";
  };
  deps.antidote."1.0.0" = {};
  deps.app_dirs."1.2.1" = {
    xdg = "2.1.0";
    ole32_sys = "0.2.0";
    shell32_sys = "0.1.2";
    winapi = "0.2.8";
  };
  deps.arrayref."0.3.4" = {};
  deps.arrayvec."0.4.7" = {
    nodrop = "0.1.12";
  };
  deps.atty."0.2.10" = {
    termion = "1.5.1";
    libc = "0.2.42";
    winapi = "0.3.5";
  };
  deps.backtrace."0.3.8" = {
    cfg_if = "0.1.3";
    rustc_demangle = "0.1.8";
    backtrace_sys = "0.1.23";
    libc = "0.2.42";
    winapi = "0.3.5";
  };
  deps.backtrace_sys."0.1.23" = {
    libc = "0.2.42";
    cc = "1.0.17";
  };
  deps.base64."0.5.2" = {
    byteorder = "1.2.3";
  };
  deps.base64."0.6.0" = {
    byteorder = "1.2.3";
    safemem = "0.2.0";
  };
  deps.bincode."0.9.3" = {
    byteorder = "1.2.3";
    serde = "1.0.66";
  };
  deps.bitflags."0.8.2" = {};
  deps.bitflags."0.9.1" = {};
  deps.bitflags."1.0.3" = {};
  deps.blake2_rfc."0.2.18" = {
    arrayvec = "0.4.7";
    constant_time_eq = "0.1.3";
  };
  deps.block_buffer."0.3.3" = {
    arrayref = "0.3.4";
    byte_tools = "0.2.0";
  };
  deps.build_const."0.2.1" = {};
  deps.byte_tools."0.2.0" = {};
  deps.byteorder."1.2.3" = {};
  deps.c_components_tests."0.1.0" = {
    imageflow_c_components = "0.1.0";
    lcms2_sys = "2.4.8";
    libpng_sys = "0.2.6";
    libz_sys = "1.0.18";
    mozjpeg_sys = "0.5.13";
    cc = "1.0.17";
    glob = "0.2.11";
  };
  deps.cc."1.0.17" = {
    rayon = "1.0.1";
  };
  deps.cfg_if."0.1.3" = {};
  deps.chashmap."2.2.0" = {
    owning_ref = "0.2.4";
    parking_lot = "0.3.8";
  };
  deps.chrono."0.4.2" = {
    num_integer = "0.1.38";
    num_traits = "0.2.4";
    time = "0.1.40";
  };
  deps.clap."2.31.2" = {
    atty = "0.2.10";
    bitflags = "1.0.3";
    strsim = "0.7.0";
    textwrap = "0.9.0";
    unicode_width = "0.1.5";
    vec_map = "0.8.1";
    ansi_term = "0.11.0";
  };
  deps.cloudabi."0.0.3" = {
    bitflags = "1.0.3";
  };
  deps.color_quant."1.0.0" = {};
  deps.conduit_mime_types."0.7.3" = {
    rustc_serialize = "0.3.24";
  };
  deps.constant_time_eq."0.1.3" = {};
  deps.core_foundation."0.2.3" = {
    core_foundation_sys = "0.2.3";
    libc = "0.2.42";
  };
  deps.core_foundation_sys."0.2.3" = {
    libc = "0.2.42";
  };
  deps.crc."1.8.1" = {
    build_const = "0.2.1";
  };
  deps.crossbeam_deque."0.2.0" = {
    crossbeam_epoch = "0.3.1";
    crossbeam_utils = "0.2.2";
  };
  deps.crossbeam_epoch."0.3.1" = {
    arrayvec = "0.4.7";
    cfg_if = "0.1.3";
    crossbeam_utils = "0.2.2";
    lazy_static = "1.0.1";
    memoffset = "0.2.1";
    nodrop = "0.1.12";
    scopeguard = "0.3.3";
  };
  deps.crossbeam_utils."0.2.2" = {
    cfg_if = "0.1.3";
  };
  deps.daggy."0.5.0" = {
    petgraph = "0.4.12";
  };
  deps.difference."1.0.0" = {};
  deps.digest."0.7.2" = {
    generic_array = "0.9.0";
  };
  deps.dssim."2.9.9" = {
    getopts = "0.2.17";
    imgref = "1.3.4";
    itertools = "0.7.8";
    lodepng = "2.1.5";
    rayon = "1.0.1";
    rgb = "0.8.9";
  };
  deps.dtoa."0.4.2" = {};
  deps.dunce."0.1.1" = {};
  deps.either."1.5.0" = {};
  deps.enum_derive."0.1.7" = {};
  deps.env_logger."0.4.3" = {
    log = "0.3.9";
    regex = "0.2.11";
  };
  deps.error."0.1.9" = {
    traitobject = "0.1.0";
    typeable = "0.1.2";
  };
  deps.error_chain."0.11.0" = {
    backtrace = "0.3.8";
  };
  deps.fake_simd."0.1.2" = {};
  deps.fixedbitset."0.1.9" = {};
  deps.flate2."1.0.1" = {
    libc = "0.2.42";
    miniz_oxide_c_api = "0.1.2";
  };
  deps.fnv."1.0.6" = {};
  deps.foreign_types."0.3.2" = {
    foreign_types_shared = "0.1.1";
  };
  deps.foreign_types_shared."0.1.1" = {};
  deps.fuchsia_zircon."0.3.3" = {
    bitflags = "1.0.3";
    fuchsia_zircon_sys = "0.3.3";
  };
  deps.fuchsia_zircon_sys."0.3.3" = {};
  deps.futures."0.1.21" = {};
  deps.generic_array."0.9.0" = {
    typenum = "1.10.0";
  };
  deps.getopts."0.2.17" = {};
  deps.gif."0.10.0" = {
    color_quant = "1.0.0";
    lzw = "0.10.0";
  };
  deps.glob."0.2.11" = {};
  deps.http_muncher."0.3.2" = {
    libc = "0.2.42";
    cc = "1.0.17";
  };
  deps.httparse."1.2.4" = {};
  deps.hyper."0.10.12" = {
    base64 = "0.5.2";
    httparse = "1.2.4";
    language_tags = "0.2.2";
    log = "0.3.9";
    mime = "0.2.6";
    num_cpus = "1.8.0";
    time = "0.1.40";
    traitobject = "0.1.0";
    typeable = "0.1.2";
    unicase = "1.4.2";
    url = "1.7.0";
  };
  deps.hyper_native_tls."0.2.4" = {
    antidote = "1.0.0";
    hyper = "0.10.12";
    native_tls = "0.1.5";
  };
  deps.hyper_openssl."0.2.7" = {
    antidote = "1.0.0";
    hyper = "0.10.12";
    openssl = "0.9.24";
  };
  deps.idna."0.1.4" = {
    matches = "0.1.6";
    unicode_bidi = "0.3.4";
    unicode_normalization = "0.1.7";
  };
  deps.ieee754."0.2.2" = {};
  deps.imageflow_abi."0.1.0" = {
    backtrace = "0.3.8";
    base64 = "0.5.2";
    imageflow_core = "0.1.0";
    libc = "0.2.42";
    smallvec = "0.6.1";
    imageflow_helpers = "0.1.0";
    moz_cheddar = "0.4.2";
    regex = "0.2.11";
  };
  deps.imageflow_c_components."0.1.0" = {
    lcms2_sys = "2.4.8";
    libpng_sys = "0.2.6";
    libz_sys = "1.0.18";
    mozjpeg_sys = "0.5.13";
    cc = "1.0.17";
    glob = "0.2.11";
  };
  deps.imageflow_core."0.1.0" = {
    blake2_rfc = "0.2.18";
    chashmap = "2.2.0";
    chrono = "0.4.2";
    clap = "2.31.2";
    daggy = "0.5.0";
    dssim = "2.9.9";
    fnv = "1.0.6";
    getopts = "0.2.17";
    gif = "0.10.0";
    imageflow_c_components = "0.1.0";
    imageflow_helpers = "0.1.0";
    imageflow_riapi = "0.1.0";
    imageflow_types = "0.1.0";
    imagequant = "2.11.9";
    imgref = "1.3.4";
    itertools = "0.7.8";
    lazy_static = "1.0.1";
    lcms2 = "5.0.1";
    libc = "0.2.42";
    lodepng = "2.1.5";
    mozjpeg = "0.8.5";
    num = "0.1.42";
    petgraph = "0.4.12";
    rgb = "0.8.9";
    rustc_serialize = "0.3.24";
    serde = "1.0.66";
    serde_derive = "1.0.66";
    serde_json = "1.0.20";
    smallvec = "0.6.1";
    threadpool = "1.7.1";
    time = "0.1.40";
    twox_hash = "1.1.0";
    url = "1.7.0";
    uuid = "0.6.5";
  };
  deps.imageflow_helpers."0.1.0" = {
    app_dirs = "1.2.1";
    backtrace = "0.3.8";
    base64 = "0.6.0";
    blake2_rfc = "0.2.18";
    chashmap = "2.2.0";
    chrono = "0.4.2";
    digest = "0.7.2";
    error_chain = "0.11.0";
    fnv = "1.0.6";
    hyper = "0.10.12";
    hyper_native_tls = "0.2.4";
    lazy_static = "1.0.1";
    libc = "0.2.42";
    lockless = "0.2.0";
    mockito = "0.10.0";
    num = "0.1.42";
    parking_lot = "0.5.5";
    rand = "0.5.0";
    regex = "0.2.11";
    reqwest = "0.6.2";
    rustc_serialize = "0.3.24";
    serde = "1.0.66";
    serde_derive = "1.0.66";
    serde_json = "1.0.20";
    sha2 = "0.7.1";
    smallvec = "0.6.1";
    time = "0.1.40";
    twox_hash = "1.1.0";
    unicase = "2.1.0";
    uuid = "0.6.5";
    zip = "0.2.8";
    hyper_openssl = "0.2.7";
    openssl = "0.9.24";
  };
  deps.imageflow_riapi."0.1.0" = {
    difference = "1.0.0";
    enum_derive = "0.1.7";
    ieee754 = "0.2.2";
    imageflow_helpers = "0.1.0";
    imageflow_types = "0.1.0";
    lazy_static = "1.0.1";
    macro_attr = "0.2.1";
    option_filter = "1.0.1";
    time = "0.1.40";
    url = "1.7.0";
  };
  deps.imageflow_server."0.1.0" = {
    bincode = "0.9.3";
    blake2_rfc = "0.2.18";
    chrono = "0.4.2";
    clap = "2.31.2";
    conduit_mime_types = "0.7.3";
    env_logger = "0.4.3";
    fnv = "1.0.6";
    hyper = "0.10.12";
    hyper_native_tls = "0.2.4";
    imageflow_core = "0.1.0";
    imageflow_helpers = "0.1.0";
    imageflow_riapi = "0.1.0";
    imageflow_types = "0.1.0";
    iron = "0.5.1";
    lazy_static = "1.0.1";
    libc = "0.2.42";
    log = "0.3.9";
    logger = "0.3.0";
    lru_cache = "0.1.1";
    mount = "0.3.0";
    persistent = "0.3.0";
    rand = "0.3.22";
    regex = "0.2.11";
    reqwest = "0.6.2";
    router = "0.5.1";
    rustc_serialize = "0.3.24";
    serde = "1.0.66";
    serde_derive = "1.0.66";
    serde_json = "1.0.20";
    staticfile = "0.3.1";
    threadpool = "1.7.1";
    time = "0.1.40";
    twox_hash = "1.1.0";
    url = "1.7.0";
    wait_timeout = "0.1.5";
  };
  deps.imageflow_tool_lib."0.1.0" = {
    clap = "2.31.2";
    imageflow_core = "0.1.0";
    imageflow_helpers = "0.1.0";
    imageflow_types = "0.1.0";
    libc = "0.2.42";
    rustc_serialize = "0.3.24";
    serde = "1.0.66";
    serde_json = "1.0.20";
    threadpool = "1.7.1";
    time = "0.1.40";
  };
  deps.imageflow_types."0.1.0" = {
    chrono = "0.4.2";
    imageflow_helpers = "0.1.0";
    lazy_static = "1.0.1";
    regex = "0.2.11";
    serde = "1.0.66";
    serde_derive = "1.0.66";
    serde_json = "1.0.20";
    quick_error = "1.2.2";
  };
  deps.imagequant."2.11.9" = {
    imagequant_sys = "2.12.0";
    libc = "0.2.42";
  };
  deps.imagequant_sys."2.12.0" = {
    rgb = "0.8.9";
    cc = "1.0.17";
  };
  deps.imgref."1.3.4" = {};
  deps.iron."0.5.1" = {
    conduit_mime_types = "0.7.3";
    error = "0.1.9";
    hyper = "0.10.12";
    lazy_static = "0.2.11";
    log = "0.3.9";
    modifier = "0.1.0";
    num_cpus = "1.8.0";
    plugin = "0.2.6";
    typemap = "0.3.3";
    url = "1.7.0";
  };
  deps.itertools."0.7.8" = {
    either = "1.5.0";
  };
  deps.itoa."0.4.1" = {};
  deps.kernel32_sys."0.2.2" = {
    winapi = "0.2.8";
    winapi_build = "0.1.1";
  };
  deps.language_tags."0.2.2" = {};
  deps.lazy_static."0.2.11" = {};
  deps.lazy_static."1.0.1" = {};
  deps.lcms2."5.0.1" = {
    foreign_types = "0.3.2";
    lcms2_sys = "2.4.8";
  };
  deps.lcms2_sys."2.4.8" = {
    libc = "0.2.42";
    cc = "1.0.17";
    dunce = "0.1.1";
    pkg_config = "0.3.11";
  };
  deps.libc."0.2.42" = {};
  deps.libflate."0.1.15" = {
    adler32 = "1.0.2";
    byteorder = "1.2.3";
    crc = "1.8.1";
  };
  deps.libpng_sys."0.2.6" = {
    libc = "0.2.42";
    libz_sys = "1.0.18";
    cc = "1.0.17";
    dunce = "0.1.1";
    pkg_config = "0.3.11";
  };
  deps.libz_sys."1.0.18" = {
    libc = "0.2.42";
    cc = "1.0.17";
    pkg_config = "0.3.11";
  };
  deps.linked_hash_map."0.4.2" = {};
  deps.lockless."0.2.0" = {
    futures = "0.1.21";
    parking_lot = "0.3.8";
  };
  deps.lodepng."2.1.5" = {
    libc = "0.2.42";
    rgb = "0.8.9";
  };
  deps.log."0.3.9" = {
    log = "0.4.2";
  };
  deps.log."0.4.2" = {
    cfg_if = "0.1.3";
  };
  deps.logger."0.3.0" = {
    iron = "0.5.1";
    log = "0.3.9";
    time = "0.1.40";
  };
  deps.lru_cache."0.1.1" = {
    linked_hash_map = "0.4.2";
  };
  deps.lzw."0.10.0" = {};
  deps.macro_attr."0.2.1" = {};
  deps.matches."0.1.6" = {};
  deps.memchr."2.0.1" = {
    libc = "0.2.42";
  };
  deps.memoffset."0.2.1" = {};
  deps.mime."0.2.6" = {
    log = "0.3.9";
  };
  deps.miniz_oxide."0.1.2" = {
    adler32 = "1.0.2";
    libc = "0.2.42";
  };
  deps.miniz_oxide_c_api."0.1.2" = {
    crc = "1.8.1";
    libc = "0.2.42";
    miniz_oxide = "0.1.2";
    cc = "1.0.17";
  };
  deps.mockito."0.10.0" = {
    http_muncher = "0.3.2";
    lazy_static = "0.2.11";
    rand = "0.3.22";
    regex = "0.2.11";
    serde_json = "1.0.20";
  };
  deps.modifier."0.1.0" = {};
  deps.mount."0.3.0" = {
    iron = "0.5.1";
    sequence_trie = "0.2.1";
  };
  deps.moz_cheddar."0.4.2" = {
    clap = "2.31.2";
    syntex_errors = "0.58.1";
    syntex_syntax = "0.58.1";
    toml = "0.4.6";
  };
  deps.mozjpeg."0.8.5" = {
    arrayvec = "0.4.7";
    libc = "0.2.42";
    mozjpeg_sys = "0.5.13";
    rgb = "0.8.9";
  };
  deps.mozjpeg_sys."0.5.13" = {
    libc = "0.2.42";
    cc = "1.0.17";
    dunce = "0.1.1";
    nasm_rs = "0.1.3";
  };
  deps.msdos_time."0.1.6" = {
    time = "0.1.40";
    winapi = "0.3.5";
  };
  deps.nasm_rs."0.1.3" = {
    rayon = "1.0.1";
  };
  deps.native_tls."0.1.5" = {
    lazy_static = "0.2.11";
    libc = "0.2.42";
    security_framework = "0.1.16";
    security_framework_sys = "0.1.16";
    tempdir = "0.3.7";
    openssl = "0.9.24";
    schannel = "0.1.12";
  };
  deps.nodrop."0.1.12" = {};
  deps.num."0.1.42" = {
    num_bigint = "0.1.44";
    num_complex = "0.1.43";
    num_integer = "0.1.38";
    num_iter = "0.1.37";
    num_rational = "0.1.42";
    num_traits = "0.2.4";
  };
  deps.num_bigint."0.1.44" = {
    num_integer = "0.1.38";
    num_traits = "0.2.4";
    rand = "0.4.2";
    rustc_serialize = "0.3.24";
  };
  deps.num_complex."0.1.43" = {
    num_traits = "0.2.4";
    rustc_serialize = "0.3.24";
  };
  deps.num_integer."0.1.38" = {
    num_traits = "0.2.4";
  };
  deps.num_iter."0.1.37" = {
    num_integer = "0.1.38";
    num_traits = "0.2.4";
  };
  deps.num_rational."0.1.42" = {
    num_bigint = "0.1.44";
    num_integer = "0.1.38";
    num_traits = "0.2.4";
    rustc_serialize = "0.3.24";
  };
  deps.num_traits."0.2.4" = {};
  deps.num_cpus."1.8.0" = {
    libc = "0.2.42";
  };
  deps.ole32_sys."0.2.0" = {
    winapi = "0.2.8";
    winapi_build = "0.1.1";
  };
  deps.openssl."0.9.24" = {
    bitflags = "0.9.1";
    foreign_types = "0.3.2";
    lazy_static = "1.0.1";
    libc = "0.2.42";
    openssl_sys = "0.9.33";
  };
  deps.openssl_sys."0.9.33" = {
    libc = "0.2.42";
    cc = "1.0.17";
    pkg_config = "0.3.11";
  };
  deps.option_filter."1.0.1" = {};
  deps.ordermap."0.3.5" = {};
  deps.owning_ref."0.2.4" = {};
  deps.owning_ref."0.3.3" = {
    stable_deref_trait = "1.0.0";
  };
  deps.parking_lot."0.3.8" = {
    owning_ref = "0.2.4";
    parking_lot_core = "0.2.14";
    thread_id = "3.3.0";
  };
  deps.parking_lot."0.5.5" = {
    owning_ref = "0.3.3";
    parking_lot_core = "0.2.14";
  };
  deps.parking_lot_core."0.2.14" = {
    rand = "0.4.2";
    smallvec = "0.6.1";
    libc = "0.2.42";
    winapi = "0.3.5";
  };
  deps.percent_encoding."1.0.1" = {};
  deps.persistent."0.3.0" = {
    iron = "0.5.1";
    plugin = "0.2.6";
  };
  deps.petgraph."0.4.12" = {
    fixedbitset = "0.1.9";
    ordermap = "0.3.5";
  };
  deps.pkg_config."0.3.11" = {};
  deps.plugin."0.2.6" = {
    typemap = "0.3.3";
  };
  deps.podio."0.1.6" = {};
  deps.proc_macro2."0.4.6" = {
    unicode_xid = "0.1.0";
  };
  deps.quick_error."1.2.2" = {};
  deps.quote."0.6.3" = {
    proc_macro2 = "0.4.6";
  };
  deps.rand."0.3.22" = {
    libc = "0.2.42";
    rand = "0.4.2";
    fuchsia_zircon = "0.3.3";
  };
  deps.rand."0.4.2" = {
    fuchsia_zircon = "0.3.3";
    libc = "0.2.42";
    winapi = "0.3.5";
  };
  deps.rand."0.5.0" = {
    rand_core = "0.2.0";
    cloudabi = "0.0.3";
    fuchsia_zircon = "0.3.3";
    libc = "0.2.42";
    winapi = "0.3.5";
  };
  deps.rand_core."0.2.0" = {};
  deps.rayon."1.0.1" = {
    either = "1.5.0";
    rayon_core = "1.4.0";
  };
  deps.rayon_core."1.4.0" = {
    crossbeam_deque = "0.2.0";
    lazy_static = "1.0.1";
    libc = "0.2.42";
    num_cpus = "1.8.0";
    rand = "0.4.2";
  };
  deps.redox_syscall."0.1.40" = {};
  deps.redox_termios."0.1.1" = {
    redox_syscall = "0.1.40";
  };
  deps.regex."0.2.11" = {
    aho_corasick = "0.6.4";
    memchr = "2.0.1";
    regex_syntax = "0.5.6";
    thread_local = "0.3.5";
    utf8_ranges = "1.0.0";
  };
  deps.regex_syntax."0.5.6" = {
    ucd_util = "0.1.1";
  };
  deps.remove_dir_all."0.5.1" = {
    winapi = "0.3.5";
  };
  deps.reqwest."0.6.2" = {
    hyper = "0.10.12";
    hyper_native_tls = "0.2.4";
    libflate = "0.1.15";
    log = "0.3.9";
    serde = "1.0.66";
    serde_json = "1.0.20";
    serde_urlencoded = "0.5.2";
    url = "1.7.0";
  };
  deps.rgb."0.8.9" = {};
  deps.route_recognizer."0.1.12" = {};
  deps.router."0.5.1" = {
    iron = "0.5.1";
    route_recognizer = "0.1.12";
    url = "1.7.0";
  };
  deps.rustc_demangle."0.1.8" = {};
  deps.rustc_serialize."0.3.24" = {};
  deps.safemem."0.2.0" = {};
  deps.schannel."0.1.12" = {
    lazy_static = "1.0.1";
    winapi = "0.3.5";
  };
  deps.scopeguard."0.3.3" = {};
  deps.security_framework."0.1.16" = {
    core_foundation = "0.2.3";
    core_foundation_sys = "0.2.3";
    libc = "0.2.42";
    security_framework_sys = "0.1.16";
  };
  deps.security_framework_sys."0.1.16" = {
    core_foundation_sys = "0.2.3";
    libc = "0.2.42";
  };
  deps.sequence_trie."0.2.1" = {};
  deps.serde."1.0.66" = {};
  deps.serde_derive."1.0.66" = {
    proc_macro2 = "0.4.6";
    quote = "0.6.3";
    syn = "0.14.2";
  };
  deps.serde_json."1.0.20" = {
    dtoa = "0.4.2";
    itoa = "0.4.1";
    serde = "1.0.66";
  };
  deps.serde_urlencoded."0.5.2" = {
    dtoa = "0.4.2";
    itoa = "0.4.1";
    serde = "1.0.66";
    url = "1.7.0";
  };
  deps.sha1."0.6.0" = {};
  deps.sha2."0.7.1" = {
    block_buffer = "0.3.3";
    byte_tools = "0.2.0";
    digest = "0.7.2";
    fake_simd = "0.1.2";
  };
  deps.shell32_sys."0.1.2" = {
    winapi = "0.2.8";
    winapi_build = "0.1.1";
  };
  deps.smallvec."0.6.1" = {};
  deps.stable_deref_trait."1.0.0" = {};
  deps.staticfile."0.3.1" = {
    iron = "0.5.1";
    log = "0.3.9";
    mount = "0.3.0";
    time = "0.1.40";
    url = "1.7.0";
  };
  deps.strsim."0.7.0" = {};
  deps.syn."0.14.2" = {
    proc_macro2 = "0.4.6";
    quote = "0.6.3";
    unicode_xid = "0.1.0";
  };
  deps.syntex_errors."0.58.1" = {
    libc = "0.2.42";
    rustc_serialize = "0.3.24";
    syntex_pos = "0.58.1";
    term = "0.4.6";
    unicode_xid = "0.0.4";
  };
  deps.syntex_pos."0.58.1" = {
    rustc_serialize = "0.3.24";
  };
  deps.syntex_syntax."0.58.1" = {
    bitflags = "0.8.2";
    log = "0.3.9";
    rustc_serialize = "0.3.24";
    syntex_errors = "0.58.1";
    syntex_pos = "0.58.1";
    unicode_xid = "0.0.4";
  };
  deps.tempdir."0.3.7" = {
    rand = "0.4.2";
    remove_dir_all = "0.5.1";
  };
  deps.term."0.4.6" = {
    kernel32_sys = "0.2.2";
    winapi = "0.2.8";
  };
  deps.termion."1.5.1" = {
    libc = "0.2.42";
    redox_syscall = "0.1.40";
    redox_termios = "0.1.1";
  };
  deps.textwrap."0.9.0" = {
    unicode_width = "0.1.5";
  };
  deps.thread_id."3.3.0" = {
    redox_syscall = "0.1.40";
    libc = "0.2.42";
    winapi = "0.3.5";
  };
  deps.thread_local."0.3.5" = {
    lazy_static = "1.0.1";
    unreachable = "1.0.0";
  };
  deps.threadpool."1.7.1" = {
    num_cpus = "1.8.0";
  };
  deps.time."0.1.40" = {
    libc = "0.2.42";
    redox_syscall = "0.1.40";
    winapi = "0.3.5";
  };
  deps.toml."0.4.6" = {
    serde = "1.0.66";
  };
  deps.traitobject."0.1.0" = {};
  deps.twox_hash."1.1.0" = {
    rand = "0.3.22";
  };
  deps.typeable."0.1.2" = {};
  deps.typemap."0.3.3" = {
    unsafe_any = "0.4.2";
  };
  deps.typenum."1.10.0" = {};
  deps.ucd_util."0.1.1" = {};
  deps.unicase."1.4.2" = {
    version_check = "0.1.3";
  };
  deps.unicase."2.1.0" = {
    version_check = "0.1.3";
  };
  deps.unicode_bidi."0.3.4" = {
    matches = "0.1.6";
  };
  deps.unicode_normalization."0.1.7" = {};
  deps.unicode_width."0.1.5" = {};
  deps.unicode_xid."0.0.4" = {};
  deps.unicode_xid."0.1.0" = {};
  deps.unreachable."1.0.0" = {
    void = "1.0.2";
  };
  deps.unsafe_any."0.4.2" = {
    traitobject = "0.1.0";
  };
  deps.url."1.7.0" = {
    idna = "0.1.4";
    matches = "0.1.6";
    percent_encoding = "1.0.1";
  };
  deps.utf8_ranges."1.0.0" = {};
  deps.uuid."0.6.5" = {
    cfg_if = "0.1.3";
    rand = "0.4.2";
    sha1 = "0.6.0";
  };
  deps.vcpkg."0.2.3" = {};
  deps.vec_map."0.8.1" = {};
  deps.version_check."0.1.3" = {};
  deps.void."1.0.2" = {};
  deps.wait_timeout."0.1.5" = {
    libc = "0.2.42";
  };
  deps.winapi."0.2.8" = {};
  deps.winapi."0.3.5" = {
    winapi_i686_pc_windows_gnu = "0.4.0";
    winapi_x86_64_pc_windows_gnu = "0.4.0";
  };
  deps.winapi_build."0.1.1" = {};
  deps.winapi_i686_pc_windows_gnu."0.4.0" = {};
  deps.winapi_x86_64_pc_windows_gnu."0.4.0" = {};
  deps.xdg."2.1.0" = {};
  deps.zip."0.2.8" = {
    flate2 = "1.0.1";
    msdos_time = "0.1.6";
    podio = "0.1.6";
    time = "0.1.40";
  };
}
